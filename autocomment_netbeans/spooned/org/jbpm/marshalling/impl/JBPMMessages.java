/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 */
/**
 * source: org/jbpm/marshalling/jbpmmessages.proto
 */


package org.jbpm.marshalling.impl;

import com.google.protobuf.AbstractMessage;
import com.google.protobuf.AbstractParser;
import java.util.ArrayList;
import org.drools.core.marshalling.impl.ProtobufMessages.Trigger.Builder;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import java.util.Collections;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage;
import java.io.IOException;
import java.io.InputStream;
import com.google.protobuf.Internal;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.LazyStringArrayList;
import com.google.protobuf.LazyStringList;
import java.util.List;
import com.google.protobuf.Message;
import com.google.protobuf.MessageOrBuilder;
import java.io.ObjectStreamException;
import com.google.protobuf.Parser;
import org.drools.core.marshalling.impl.ProtobufMessages;
import com.google.protobuf.ProtocolMessageEnum;
import com.google.protobuf.RepeatedFieldBuilder;
import com.google.protobuf.SingleFieldBuilder;
import org.drools.core.marshalling.impl.ProtobufMessages.Trigger;
import org.drools.core.marshalling.impl.ProtobufMessages.TriggerOrBuilder;
import com.google.protobuf.UnknownFieldSet;
import com.google.protobuf.UnmodifiableLazyStringList;

// @@protoc_insertion_point(outer_class_scope)
public final class JBPMMessages {
    private JBPMMessages() {
    }

    public static void registerAllExtensions(ExtensionRegistry registry) {
        registry.add(org.jbpm.marshalling.impl.JBPMMessages.processInstance);
        registry.add(org.jbpm.marshalling.impl.JBPMMessages.workItem);
        registry.add(org.jbpm.marshalling.impl.JBPMMessages.timerId);
        registry.add(org.jbpm.marshalling.impl.JBPMMessages.processTimer);
        registry.add(org.jbpm.marshalling.impl.JBPMMessages.procTimer);
    }

    public interface ProcessInstanceOrBuilder extends MessageOrBuilder {
        // optional string process_type = 1;
        /**
         * <code>optional string process_type = 1;</code>
         */
        boolean hasProcessType();

        /**
         * <code>optional string process_type = 1;</code>
         */
        String getProcessType();

        /**
         * <code>optional string process_type = 1;</code>
         */
        ByteString getProcessTypeBytes();

        // optional int64 id = 2;
        /**
         * <code>optional int64 id = 2;</code>
         */
        boolean hasId();

        /**
         * <code>optional int64 id = 2;</code>
         */
        long getId();

        // optional string process_id = 3;
        /**
         * <code>optional string process_id = 3;</code>
         */
        boolean hasProcessId();

        /**
         * <code>optional string process_id = 3;</code>
         */
        String getProcessId();

        /**
         * <code>optional string process_id = 3;</code>
         */
        ByteString getProcessIdBytes();

        // optional int32 state = 4;
        /**
         * <code>optional int32 state = 4;</code>
         */
        boolean hasState();

        /**
         * <code>optional int32 state = 4;</code>
         */
        int getState();

        // optional int64 node_instance_counter = 5;
        /**
         * <code>optional int64 node_instance_counter = 5;</code>
         */
        boolean hasNodeInstanceCounter();

        /**
         * <code>optional int64 node_instance_counter = 5;</code>
         */
        long getNodeInstanceCounter();

        // optional string process_xml = 11;
        /**
         * <code>optional string process_xml = 11;</code>
         */
        boolean hasProcessXml();

        /**
         * <code>optional string process_xml = 11;</code>
         */
        String getProcessXml();

        /**
         * <code>optional string process_xml = 11;</code>
         */
        ByteString getProcessXmlBytes();

        // optional int64 parent_process_instance_id = 12;
        /**
         * <code>optional int64 parent_process_instance_id = 12;</code>
         */
        boolean hasParentProcessInstanceId();

        /**
         * <code>optional int64 parent_process_instance_id = 12;</code>
         */
        long getParentProcessInstanceId();

        // optional string description = 15;
        /**
         * <code>optional string description = 15;</code>
         */
        boolean hasDescription();

        /**
         * <code>optional string description = 15;</code>
         */
        String getDescription();

        /**
         * <code>optional string description = 15;</code>
         */
        ByteString getDescriptionBytes();

        // optional bool signal_completion = 16 [default = true];
        /**
         * <code>optional bool signal_completion = 16 [default = true];</code>
         */
        boolean hasSignalCompletion();

        /**
         * <code>optional bool signal_completion = 16 [default = true];</code>
         */
        boolean getSignalCompletion();

        // optional string deploymentId = 17;
        /**
         * <code>optional string deploymentId = 17;</code>
         */
        boolean hasDeploymentId();

        /**
         * <code>optional string deploymentId = 17;</code>
         */
        String getDeploymentId();

        /**
         * <code>optional string deploymentId = 17;</code>
         */
        ByteString getDeploymentIdBytes();

        // optional string correlation_key = 18;
        /**
         * <code>optional string correlation_key = 18;</code>
         */
        boolean hasCorrelationKey();

        /**
         * <code>optional string correlation_key = 18;</code>
         */
        String getCorrelationKey();

        /**
         * <code>optional string correlation_key = 18;</code>
         */
        ByteString getCorrelationKeyBytes();

        // repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;
        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
         */
        List<JBPMMessages.ProcessInstance.SwimlaneContextInstance> getSwimlaneContextList();

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
         */
        JBPMMessages.ProcessInstance.SwimlaneContextInstance getSwimlaneContext(int index);

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
         */
        int getSwimlaneContextCount();

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
         */
        List<? extends JBPMMessages.ProcessInstance.SwimlaneContextInstanceOrBuilder> getSwimlaneContextOrBuilderList();

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
         */
        JBPMMessages.ProcessInstance.SwimlaneContextInstanceOrBuilder getSwimlaneContextOrBuilder(int index);

        // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;
        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
         */
        List<JBPMMessages.ProcessInstance.NodeInstance> getNodeInstanceList();

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
         */
        JBPMMessages.ProcessInstance.NodeInstance getNodeInstance(int index);

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
         */
        int getNodeInstanceCount();

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
         */
        List<? extends JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> getNodeInstanceOrBuilderList();

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
         */
        JBPMMessages.ProcessInstance.NodeInstanceOrBuilder getNodeInstanceOrBuilder(int index);

        // repeated .org.jbpm.marshalling.Variable variable = 8;
        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
         */
        List<JBPMMessages.Variable> getVariableList();

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
         */
        JBPMMessages.Variable getVariable(int index);

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
         */
        int getVariableCount();

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
         */
        List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList();

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
         */
        JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index);

        // repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;
        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
         */
        List<JBPMMessages.ProcessInstance.ExclusiveGroupInstance> getExclusiveGroupList();

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
         */
        JBPMMessages.ProcessInstance.ExclusiveGroupInstance getExclusiveGroup(int index);

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
         */
        int getExclusiveGroupCount();

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
         */
        List<? extends JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder> getExclusiveGroupOrBuilderList();

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
         */
        JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder getExclusiveGroupOrBuilder(int index);

        // repeated string completedNodeIds = 13;
        /**
         * <code>repeated string completedNodeIds = 13;</code>
         */
        List<String> getCompletedNodeIdsList();

        /**
         * <code>repeated string completedNodeIds = 13;</code>
         */
        int getCompletedNodeIdsCount();

        /**
         * <code>repeated string completedNodeIds = 13;</code>
         */
        String getCompletedNodeIds(int index);

        /**
         * <code>repeated string completedNodeIds = 13;</code>
         */
        ByteString getCompletedNodeIdsBytes(int index);

        // repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;
        /**
         * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
         */
        List<JBPMMessages.IterationLevel> getIterationLevelsList();

        /**
         * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
         */
        JBPMMessages.IterationLevel getIterationLevels(int index);

        /**
         * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
         */
        int getIterationLevelsCount();

        /**
         * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
         */
        List<? extends JBPMMessages.IterationLevelOrBuilder> getIterationLevelsOrBuilderList();

        /**
         * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
         */
        JBPMMessages.IterationLevelOrBuilder getIterationLevelsOrBuilder(int index);
    }

    /**
     * Protobuf type {@code org.jbpm.marshalling.ProcessInstance}
     */
    // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance)
    public static final class ProcessInstance extends GeneratedMessage implements JBPMMessages.ProcessInstanceOrBuilder {
        // Use ProcessInstance.newBuilder() to construct.
        private ProcessInstance(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private ProcessInstance(boolean noInit) {
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        private static final JBPMMessages.ProcessInstance defaultInstance;

        public static JBPMMessages.ProcessInstance getDefaultInstance() {
            return JBPMMessages.ProcessInstance.defaultInstance;
        }

        public JBPMMessages.ProcessInstance getDefaultInstanceForType() {
            return JBPMMessages.ProcessInstance.defaultInstance;
        }

        private final UnknownFieldSet unknownFields;

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return JBPMMessages.ProcessInstance.this.unknownFields;
        }

        private ProcessInstance(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0 :
                            done = true;
                            break;
                        default :
                            {
                                if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                    done = true;
                                } 
                                break;
                            }
                        case 10 :
                            {
                                bitField0_ |= 1;
                                processType_ = input.readBytes();
                                break;
                            }
                        case 16 :
                            {
                                bitField0_ |= 2;
                                id_ = input.readInt64();
                                break;
                            }
                        case 26 :
                            {
                                bitField0_ |= 4;
                                processId_ = input.readBytes();
                                break;
                            }
                        case 32 :
                            {
                                bitField0_ |= 8;
                                state_ = input.readInt32();
                                break;
                            }
                        case 40 :
                            {
                                bitField0_ |= 16;
                                nodeInstanceCounter_ = input.readInt64();
                                break;
                            }
                        case 50 :
                            {
                                if (!((mutable_bitField0_ & 2048) == 2048)) {
                                    swimlaneContext_ = new ArrayList<JBPMMessages.ProcessInstance.SwimlaneContextInstance>();
                                    mutable_bitField0_ |= 2048;
                                } 
                                swimlaneContext_.add(input.readMessage(JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER, extensionRegistry));
                                break;
                            }
                        case 58 :
                            {
                                if (!((mutable_bitField0_ & 4096) == 4096)) {
                                    nodeInstance_ = new ArrayList<JBPMMessages.ProcessInstance.NodeInstance>();
                                    mutable_bitField0_ |= 4096;
                                } 
                                nodeInstance_.add(input.readMessage(JBPMMessages.ProcessInstance.NodeInstance.PARSER, extensionRegistry));
                                break;
                            }
                        case 66 :
                            {
                                if (!((mutable_bitField0_ & 8192) == 8192)) {
                                    variable_ = new ArrayList<JBPMMessages.Variable>();
                                    mutable_bitField0_ |= 8192;
                                } 
                                variable_.add(input.readMessage(JBPMMessages.Variable.PARSER, extensionRegistry));
                                break;
                            }
                        case 82 :
                            {
                                if (!((mutable_bitField0_ & 16384) == 16384)) {
                                    exclusiveGroup_ = new ArrayList<JBPMMessages.ProcessInstance.ExclusiveGroupInstance>();
                                    mutable_bitField0_ |= 16384;
                                } 
                                exclusiveGroup_.add(input.readMessage(JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER, extensionRegistry));
                                break;
                            }
                        case 90 :
                            {
                                bitField0_ |= 32;
                                processXml_ = input.readBytes();
                                break;
                            }
                        case 96 :
                            {
                                bitField0_ |= 64;
                                parentProcessInstanceId_ = input.readInt64();
                                break;
                            }
                        case 106 :
                            {
                                if (!((mutable_bitField0_ & 32768) == 32768)) {
                                    completedNodeIds_ = new LazyStringArrayList();
                                    mutable_bitField0_ |= 32768;
                                } 
                                completedNodeIds_.add(input.readBytes());
                                break;
                            }
                        case 114 :
                            {
                                if (!((mutable_bitField0_ & 65536) == 65536)) {
                                    iterationLevels_ = new ArrayList<JBPMMessages.IterationLevel>();
                                    mutable_bitField0_ |= 65536;
                                } 
                                iterationLevels_.add(input.readMessage(JBPMMessages.IterationLevel.PARSER, extensionRegistry));
                                break;
                            }
                        case 122 :
                            {
                                bitField0_ |= 128;
                                description_ = input.readBytes();
                                break;
                            }
                        case 128 :
                            {
                                bitField0_ |= 256;
                                signalCompletion_ = input.readBool();
                                break;
                            }
                        case 138 :
                            {
                                bitField0_ |= 512;
                                deploymentId_ = input.readBytes();
                                break;
                            }
                        case 146 :
                            {
                                bitField0_ |= 1024;
                                correlationKey_ = input.readBytes();
                                break;
                            }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.this);
            } catch (IOException e) {
                throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.this);
            } finally {
                if ((mutable_bitField0_ & 2048) == 2048) {
                    swimlaneContext_ = Collections.unmodifiableList(swimlaneContext_);
                } 
                if ((mutable_bitField0_ & 4096) == 4096) {
                    nodeInstance_ = Collections.unmodifiableList(nodeInstance_);
                } 
                if ((mutable_bitField0_ & 8192) == 8192) {
                    variable_ = Collections.unmodifiableList(variable_);
                } 
                if ((mutable_bitField0_ & 16384) == 16384) {
                    exclusiveGroup_ = Collections.unmodifiableList(exclusiveGroup_);
                } 
                if ((mutable_bitField0_ & 32768) == 32768) {
                    completedNodeIds_ = new UnmodifiableLazyStringList(completedNodeIds_);
                } 
                if ((mutable_bitField0_ & 65536) == 65536) {
                    iterationLevels_ = Collections.unmodifiableList(iterationLevels_);
                } 
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.class, JBPMMessages.ProcessInstance.Builder.class);
        }

        public static Parser<JBPMMessages.ProcessInstance> PARSER = new AbstractParser<JBPMMessages.ProcessInstance>() {
            public JBPMMessages.ProcessInstance parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new JBPMMessages.ProcessInstance(input, extensionRegistry);
            }
        };

        @Override
        public Parser<JBPMMessages.ProcessInstance> getParserForType() {
            return JBPMMessages.ProcessInstance.PARSER;
        }

        /**
         * Protobuf enum {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceType}
         */
        // @@protoc_insertion_point(enum_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceType)
        public enum NodeInstanceType implements ProtocolMessageEnum {
RULE_SET_NODE(0,0), HUMAN_TASK_NODE(1,1), WORK_ITEM_NODE(2,2), SUBPROCESS_NODE(3,3), MILESTONE_NODE(4,4), EVENT_NODE(5,5), TIMER_NODE(6,6), JOIN_NODE(7,7), STATE_NODE(8,8), COMPOSITE_CONTEXT_NODE(9,9), FOR_EACH_NODE(10,10), DYNAMIC_NODE(11,11), EVENT_SUBPROCESS_NODE(12,12), ASYNC_EVENT_NODE(13,13);
            /**
             * <code>RULE_SET_NODE = 0;</code>
             */
            public static final int RULE_SET_NODE_VALUE = 0;
            /**
             * <code>HUMAN_TASK_NODE = 1;</code>
             */
            public static final int HUMAN_TASK_NODE_VALUE = 1;
            /**
             * <code>WORK_ITEM_NODE = 2;</code>
             */
            public static final int WORK_ITEM_NODE_VALUE = 2;
            /**
             * <code>SUBPROCESS_NODE = 3;</code>
             */
            public static final int SUBPROCESS_NODE_VALUE = 3;
            /**
             * <code>MILESTONE_NODE = 4;</code>
             */
            public static final int MILESTONE_NODE_VALUE = 4;
            /**
             * <code>EVENT_NODE = 5;</code>
             */
            public static final int EVENT_NODE_VALUE = 5;
            /**
             * <code>TIMER_NODE = 6;</code>
             */
            public static final int TIMER_NODE_VALUE = 6;
            /**
             * <code>JOIN_NODE = 7;</code>
             */
            public static final int JOIN_NODE_VALUE = 7;
            /**
             * <code>STATE_NODE = 8;</code>
             */
            public static final int STATE_NODE_VALUE = 8;
            /**
             * <code>COMPOSITE_CONTEXT_NODE = 9;</code>
             */
            public static final int COMPOSITE_CONTEXT_NODE_VALUE = 9;
            /**
             * <code>FOR_EACH_NODE = 10;</code>
             */
            public static final int FOR_EACH_NODE_VALUE = 10;
            /**
             * <code>DYNAMIC_NODE = 11;</code>
             */
            public static final int DYNAMIC_NODE_VALUE = 11;
            /**
             * <code>EVENT_SUBPROCESS_NODE = 12;</code>
             */
            public static final int EVENT_SUBPROCESS_NODE_VALUE = 12;
            /**
             * <code>ASYNC_EVENT_NODE = 13;</code>
             */
            public static final int ASYNC_EVENT_NODE_VALUE = 13;
            private static Internal.EnumLiteMap<JBPMMessages.ProcessInstance.NodeInstanceType> internalValueMap = new Internal.EnumLiteMap<JBPMMessages.ProcessInstance.NodeInstanceType>() {
                public JBPMMessages.ProcessInstance.NodeInstanceType findValueByNumber(int number) {
                    return JBPMMessages.ProcessInstance.NodeInstanceType.valueOf(number);
                }
            };
            private static final JBPMMessages.ProcessInstance.NodeInstanceType[] VALUES = JBPMMessages.ProcessInstance.NodeInstanceType.values();
            private final int index;
            private final int value;
            private NodeInstanceType(int index, int value) {
                this.index = index;
                this.value = value;
            }
            public final int getNumber() {
                return value;
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceType valueOf(int value) {
                switch (value) {
                    case 0 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.RULE_SET_NODE;
                    case 1 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.HUMAN_TASK_NODE;
                    case 2 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.WORK_ITEM_NODE;
                    case 3 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.SUBPROCESS_NODE;
                    case 4 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.MILESTONE_NODE;
                    case 5 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.EVENT_NODE;
                    case 6 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.TIMER_NODE;
                    case 7 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.JOIN_NODE;
                    case 8 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.STATE_NODE;
                    case 9 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.COMPOSITE_CONTEXT_NODE;
                    case 10 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.FOR_EACH_NODE;
                    case 11 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.DYNAMIC_NODE;
                    case 12 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.EVENT_SUBPROCESS_NODE;
                    case 13 :
                        return JBPMMessages.ProcessInstance.NodeInstanceType.ASYNC_EVENT_NODE;
                    default :
                        return null;
                }
            }

            public static Internal.EnumLiteMap<JBPMMessages.ProcessInstance.NodeInstanceType> internalGetValueMap() {
                return JBPMMessages.ProcessInstance.NodeInstanceType.internalValueMap;
            }

            public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                return JBPMMessages.ProcessInstance.NodeInstanceType.getDescriptor().getValues().get(index);
            }

            public final Descriptors.EnumDescriptor getDescriptorForType() {
                return JBPMMessages.ProcessInstance.NodeInstanceType.getDescriptor();
            }

            public static final Descriptors.EnumDescriptor getDescriptor() {
                return JBPMMessages.ProcessInstance.getDescriptor().getEnumTypes().get(0);
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceType valueOf(Descriptors.EnumValueDescriptor desc) {
                if ((desc.getType()) != (JBPMMessages.ProcessInstance.NodeInstanceType.getDescriptor())) {
                    throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
                } 
                return JBPMMessages.ProcessInstance.NodeInstanceType.VALUES[desc.getIndex()];
            }
        }

        public interface SwimlaneContextInstanceOrBuilder extends MessageOrBuilder {
            // optional string swimlane = 1;
            /**
             * <code>optional string swimlane = 1;</code>
             */
            boolean hasSwimlane();

            /**
             * <code>optional string swimlane = 1;</code>
             */
            String getSwimlane();

            /**
             * <code>optional string swimlane = 1;</code>
             */
            ByteString getSwimlaneBytes();

            // optional string actor_id = 2;
            /**
             * <code>optional string actor_id = 2;</code>
             */
            boolean hasActorId();

            /**
             * <code>optional string actor_id = 2;</code>
             */
            String getActorId();

            /**
             * <code>optional string actor_id = 2;</code>
             */
            ByteString getActorIdBytes();
        }

        /**
         * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance}
         */
        // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance)
        public static final class SwimlaneContextInstance extends GeneratedMessage implements JBPMMessages.ProcessInstance.SwimlaneContextInstanceOrBuilder {
            // Use SwimlaneContextInstance.newBuilder() to construct.
            private SwimlaneContextInstance(GeneratedMessage.Builder<?> builder) {
                super(builder);
                this.unknownFields = builder.getUnknownFields();
            }

            private SwimlaneContextInstance(boolean noInit) {
                this.unknownFields = UnknownFieldSet.getDefaultInstance();
            }

            private static final JBPMMessages.ProcessInstance.SwimlaneContextInstance defaultInstance;

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance getDefaultInstance() {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.defaultInstance;
            }

            public JBPMMessages.ProcessInstance.SwimlaneContextInstance getDefaultInstanceForType() {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.defaultInstance;
            }

            private final UnknownFieldSet unknownFields;

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.this.unknownFields;
            }

            private SwimlaneContextInstance(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                initFields();
                int mutable_bitField0_ = 0;
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0 :
                                done = true;
                                break;
                            default :
                                {
                                    if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                        done = true;
                                    } 
                                    break;
                                }
                            case 10 :
                                {
                                    bitField0_ |= 1;
                                    swimlane_ = input.readBytes();
                                    break;
                                }
                            case 18 :
                                {
                                    bitField0_ |= 2;
                                    actorId_ = input.readBytes();
                                    break;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.SwimlaneContextInstance.this);
                } catch (IOException e) {
                    throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.SwimlaneContextInstance.this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    makeExtensionsImmutable();
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_SwimlaneContextInstance_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_SwimlaneContextInstance_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.SwimlaneContextInstance.class, JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.class);
            }

            public static Parser<JBPMMessages.ProcessInstance.SwimlaneContextInstance> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.SwimlaneContextInstance>() {
                public JBPMMessages.ProcessInstance.SwimlaneContextInstance parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return new JBPMMessages.ProcessInstance.SwimlaneContextInstance(input, extensionRegistry);
                }
            };

            @Override
            public Parser<JBPMMessages.ProcessInstance.SwimlaneContextInstance> getParserForType() {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER;
            }

            private int bitField0_;

            // optional string swimlane = 1;
            public static final int SWIMLANE_FIELD_NUMBER = 1;

            private Object swimlane_;

            /**
             * <code>optional string swimlane = 1;</code>
             */
            public boolean hasSwimlane() {
                return ((bitField0_) & 1) == 1;
            }

            /**
             * <code>optional string swimlane = 1;</code>
             */
            public String getSwimlane() {
                Object ref = swimlane_;
                if (ref instanceof String) {
                    return ((String) (ref));
                } else {
                    ByteString bs = ((ByteString) (ref));
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        swimlane_ = s;
                    } 
                    return s;
                }
            }

            /**
             * <code>optional string swimlane = 1;</code>
             */
            public ByteString getSwimlaneBytes() {
                Object ref = swimlane_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                    swimlane_ = b;
                    return b;
                } else {
                    return ((ByteString) (ref));
                }
            }

            // optional string actor_id = 2;
            public static final int ACTOR_ID_FIELD_NUMBER = 2;

            private Object actorId_;

            /**
             * <code>optional string actor_id = 2;</code>
             */
            public boolean hasActorId() {
                return ((bitField0_) & 2) == 2;
            }

            /**
             * <code>optional string actor_id = 2;</code>
             */
            public String getActorId() {
                Object ref = actorId_;
                if (ref instanceof String) {
                    return ((String) (ref));
                } else {
                    ByteString bs = ((ByteString) (ref));
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        actorId_ = s;
                    } 
                    return s;
                }
            }

            /**
             * <code>optional string actor_id = 2;</code>
             */
            public ByteString getActorIdBytes() {
                Object ref = actorId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                    actorId_ = b;
                    return b;
                } else {
                    return ((ByteString) (ref));
                }
            }

            private void initFields() {
                swimlane_ = "";
                actorId_ = "";
            }

            private byte memoizedIsInitialized = -1;

            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized != (-1))
                    return isInitialized == 1;
                
                memoizedIsInitialized = 1;
                return true;
            }

            public void writeTo(CodedOutputStream output) throws IOException {
                getSerializedSize();
                if (((bitField0_) & 1) == 1) {
                    output.writeBytes(1, getSwimlaneBytes());
                } 
                if (((bitField0_) & 2) == 2) {
                    output.writeBytes(2, getActorIdBytes());
                } 
                getUnknownFields().writeTo(output);
            }

            private int memoizedSerializedSize = -1;

            public int getSerializedSize() {
                int size = memoizedSerializedSize;
                if (size != (-1))
                    return size;
                
                size = 0;
                if (((bitField0_) & 1) == 1) {
                    size += CodedOutputStream.computeBytesSize(1, getSwimlaneBytes());
                } 
                if (((bitField0_) & 2) == 2) {
                    size += CodedOutputStream.computeBytesSize(2, getActorIdBytes());
                } 
                size += getUnknownFields().getSerializedSize();
                memoizedSerializedSize = size;
                return size;
            }

            private static final long serialVersionUID = 0L;

            @Override
            protected Object writeReplace() throws ObjectStreamException {
                return super.writeReplace();
            }

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance parseFrom(ByteString data) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER.parseFrom(data);
            }

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER.parseFrom(data, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance parseFrom(byte[] data) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER.parseFrom(data);
            }

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER.parseFrom(data, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance parseFrom(InputStream input) throws IOException {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER.parseFrom(input);
            }

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER.parseFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance parseDelimitedFrom(InputStream input) throws IOException {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER.parseDelimitedFrom(input);
            }

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER.parseDelimitedFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance parseFrom(CodedInputStream input) throws IOException {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER.parseFrom(input);
            }

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER.parseFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder newBuilder() {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.create();
            }

            public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder newBuilderForType() {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.newBuilder();
            }

            public static JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder newBuilder(JBPMMessages.ProcessInstance.SwimlaneContextInstance prototype) {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.newBuilder().mergeFrom(prototype);
            }

            public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder toBuilder() {
                return JBPMMessages.ProcessInstance.SwimlaneContextInstance.newBuilder(JBPMMessages.ProcessInstance.SwimlaneContextInstance.this);
            }

            @Override
            protected JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder builder = new JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder(parent);
                return builder;
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance}
             */
            // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance)
            public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder> implements JBPMMessages.ProcessInstance.SwimlaneContextInstanceOrBuilder {
                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_SwimlaneContextInstance_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_SwimlaneContextInstance_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.SwimlaneContextInstance.class, JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.class);
                }

                // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.SwimlaneContextInstance.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessage.BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    } 
                }

                private static JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder create() {
                    return new JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder();
                }

                public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder clear() {
                    super.clear();
                    swimlane_ = "";
                    bitField0_ = (bitField0_) & (~1);
                    actorId_ = "";
                    bitField0_ = (bitField0_) & (~2);
                    return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this;
                }

                public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder clone() {
                    return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.create().mergeFrom(buildPartial());
                }

                public Descriptors.Descriptor getDescriptorForType() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_SwimlaneContextInstance_descriptor;
                }

                public JBPMMessages.ProcessInstance.SwimlaneContextInstance getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.SwimlaneContextInstance.getDefaultInstance();
                }

                public JBPMMessages.ProcessInstance.SwimlaneContextInstance build() {
                    JBPMMessages.ProcessInstance.SwimlaneContextInstance result = buildPartial();
                    if (!(result.isInitialized())) {
                        throw AbstractMessage.Builder.newUninitializedMessageException(result);
                    } 
                    return result;
                }

                public JBPMMessages.ProcessInstance.SwimlaneContextInstance buildPartial() {
                    JBPMMessages.ProcessInstance.SwimlaneContextInstance result = new JBPMMessages.ProcessInstance.SwimlaneContextInstance(JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this);
                    int from_bitField0_ = bitField0_;
                    int to_bitField0_ = 0;
                    if ((from_bitField0_ & 1) == 1) {
                        to_bitField0_ |= 1;
                    } 
                    result.swimlane_ = swimlane_;
                    if ((from_bitField0_ & 2) == 2) {
                        to_bitField0_ |= 2;
                    } 
                    result.actorId_ = actorId_;
                    result.bitField0_ = to_bitField0_;
                    onBuilt();
                    return result;
                }

                public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder mergeFrom(Message other) {
                    if (other instanceof JBPMMessages.ProcessInstance.SwimlaneContextInstance) {
                        return mergeFrom(((JBPMMessages.ProcessInstance.SwimlaneContextInstance) (other)));
                    } else {
                        super.mergeFrom(other);
                        return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this;
                    }
                }

                public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder mergeFrom(JBPMMessages.ProcessInstance.SwimlaneContextInstance other) {
                    if (other == (JBPMMessages.ProcessInstance.SwimlaneContextInstance.getDefaultInstance()))
                        return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this;
                    
                    if (other.hasSwimlane()) {
                        bitField0_ |= 1;
                        swimlane_ = other.swimlane_;
                        onChanged();
                    } 
                    if (other.hasActorId()) {
                        bitField0_ |= 2;
                        actorId_ = other.actorId_;
                        onChanged();
                    } 
                    JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this.mergeUnknownFields(other.getUnknownFields());
                    return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this;
                }

                public final boolean isInitialized() {
                    return true;
                }

                public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    JBPMMessages.ProcessInstance.SwimlaneContextInstance parsedMessage = null;
                    try {
                        parsedMessage = JBPMMessages.ProcessInstance.SwimlaneContextInstance.PARSER.parsePartialFrom(input, extensionRegistry);
                    } catch (InvalidProtocolBufferException e) {
                        parsedMessage = ((JBPMMessages.ProcessInstance.SwimlaneContextInstance) (e.getUnfinishedMessage()));
                        throw e;
                    } finally {
                        if (parsedMessage != null) {
                            mergeFrom(parsedMessage);
                        } 
                    }
                    return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this;
                }

                private int bitField0_;

                // optional string swimlane = 1;
                private Object swimlane_ = "";

                /**
                 * <code>optional string swimlane = 1;</code>
                 */
                public boolean hasSwimlane() {
                    return ((bitField0_) & 1) == 1;
                }

                /**
                 * <code>optional string swimlane = 1;</code>
                 */
                public String getSwimlane() {
                    Object ref = swimlane_;
                    if (!(ref instanceof String)) {
                        String s = ((ByteString) (ref)).toStringUtf8();
                        swimlane_ = s;
                        return s;
                    } else {
                        return ((String) (ref));
                    }
                }

                /**
                 * <code>optional string swimlane = 1;</code>
                 */
                public ByteString getSwimlaneBytes() {
                    Object ref = swimlane_;
                    if (ref instanceof String) {
                        ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                        swimlane_ = b;
                        return b;
                    } else {
                        return ((ByteString) (ref));
                    }
                }

                /**
                 * <code>optional string swimlane = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder setSwimlane(String value) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    bitField0_ |= 1;
                    swimlane_ = value;
                    onChanged();
                    return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this;
                }

                /**
                 * <code>optional string swimlane = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder clearSwimlane() {
                    bitField0_ = (bitField0_) & (~1);
                    swimlane_ = JBPMMessages.ProcessInstance.SwimlaneContextInstance.getDefaultInstance().getSwimlane();
                    onChanged();
                    return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this;
                }

                /**
                 * <code>optional string swimlane = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder setSwimlaneBytes(ByteString value) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    bitField0_ |= 1;
                    swimlane_ = value;
                    onChanged();
                    return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this;
                }

                // optional string actor_id = 2;
                private Object actorId_ = "";

                /**
                 * <code>optional string actor_id = 2;</code>
                 */
                public boolean hasActorId() {
                    return ((bitField0_) & 2) == 2;
                }

                /**
                 * <code>optional string actor_id = 2;</code>
                 */
                public String getActorId() {
                    Object ref = actorId_;
                    if (!(ref instanceof String)) {
                        String s = ((ByteString) (ref)).toStringUtf8();
                        actorId_ = s;
                        return s;
                    } else {
                        return ((String) (ref));
                    }
                }

                /**
                 * <code>optional string actor_id = 2;</code>
                 */
                public ByteString getActorIdBytes() {
                    Object ref = actorId_;
                    if (ref instanceof String) {
                        ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                        actorId_ = b;
                        return b;
                    } else {
                        return ((ByteString) (ref));
                    }
                }

                /**
                 * <code>optional string actor_id = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder setActorId(String value) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    bitField0_ |= 2;
                    actorId_ = value;
                    onChanged();
                    return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this;
                }

                /**
                 * <code>optional string actor_id = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder clearActorId() {
                    bitField0_ = (bitField0_) & (~2);
                    actorId_ = JBPMMessages.ProcessInstance.SwimlaneContextInstance.getDefaultInstance().getActorId();
                    onChanged();
                    return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this;
                }

                /**
                 * <code>optional string actor_id = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder setActorIdBytes(ByteString value) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    bitField0_ |= 2;
                    actorId_ = value;
                    onChanged();
                    return JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder.this;
                }

                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance)
            }

            static {
                defaultInstance = new JBPMMessages.ProcessInstance.SwimlaneContextInstance(true);
                JBPMMessages.ProcessInstance.SwimlaneContextInstance.defaultInstance.initFields();
            }

            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance)
        }

        public interface NodeInstanceOrBuilder extends MessageOrBuilder {
            // optional int64 id = 1;
            /**
             * <code>optional int64 id = 1;</code>
             */
            boolean hasId();

            /**
             * <code>optional int64 id = 1;</code>
             */
            long getId();

            // optional int64 node_id = 2;
            /**
             * <code>optional int64 node_id = 2;</code>
             */
            boolean hasNodeId();

            /**
             * <code>optional int64 node_id = 2;</code>
             */
            long getNodeId();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
             */
            boolean hasContent();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent getContent();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContentOrBuilder getContentOrBuilder();

            // optional int32 level = 5;
            /**
             * <code>optional int32 level = 5;</code>
             */
            boolean hasLevel();

            /**
             * <code>optional int32 level = 5;</code>
             */
            int getLevel();
        }

        /**
         * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstance}
         */
        // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstance)
        public static final class NodeInstance extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceOrBuilder {
            // Use NodeInstance.newBuilder() to construct.
            private NodeInstance(GeneratedMessage.Builder<?> builder) {
                super(builder);
                this.unknownFields = builder.getUnknownFields();
            }

            private NodeInstance(boolean noInit) {
                this.unknownFields = UnknownFieldSet.getDefaultInstance();
            }

            private static final JBPMMessages.ProcessInstance.NodeInstance defaultInstance;

            public static JBPMMessages.ProcessInstance.NodeInstance getDefaultInstance() {
                return JBPMMessages.ProcessInstance.NodeInstance.defaultInstance;
            }

            public JBPMMessages.ProcessInstance.NodeInstance getDefaultInstanceForType() {
                return JBPMMessages.ProcessInstance.NodeInstance.defaultInstance;
            }

            private final UnknownFieldSet unknownFields;

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return JBPMMessages.ProcessInstance.NodeInstance.this.unknownFields;
            }

            private NodeInstance(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                initFields();
                int mutable_bitField0_ = 0;
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0 :
                                done = true;
                                break;
                            default :
                                {
                                    if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                        done = true;
                                    } 
                                    break;
                                }
                            case 8 :
                                {
                                    bitField0_ |= 1;
                                    id_ = input.readInt64();
                                    break;
                                }
                            case 16 :
                                {
                                    bitField0_ |= 2;
                                    nodeId_ = input.readInt64();
                                    break;
                                }
                            case 34 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.Builder subBuilder = null;
                                    if (((bitField0_) & 4) == 4) {
                                        subBuilder = content_.toBuilder();
                                    } 
                                    content_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(content_);
                                        content_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 4;
                                    break;
                                }
                            case 40 :
                                {
                                    bitField0_ |= 8;
                                    level_ = input.readInt32();
                                    break;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstance.this);
                } catch (IOException e) {
                    throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstance.this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    makeExtensionsImmutable();
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstance_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstance_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstance.class, JBPMMessages.ProcessInstance.NodeInstance.Builder.class);
            }

            public static Parser<JBPMMessages.ProcessInstance.NodeInstance> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstance>() {
                public JBPMMessages.ProcessInstance.NodeInstance parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return new JBPMMessages.ProcessInstance.NodeInstance(input, extensionRegistry);
                }
            };

            @Override
            public Parser<JBPMMessages.ProcessInstance.NodeInstance> getParserForType() {
                return JBPMMessages.ProcessInstance.NodeInstance.PARSER;
            }

            private int bitField0_;

            // optional int64 id = 1;
            public static final int ID_FIELD_NUMBER = 1;

            private long id_;

            /**
             * <code>optional int64 id = 1;</code>
             */
            public boolean hasId() {
                return ((bitField0_) & 1) == 1;
            }

            /**
             * <code>optional int64 id = 1;</code>
             */
            public long getId() {
                return id_;
            }

            // optional int64 node_id = 2;
            public static final int NODE_ID_FIELD_NUMBER = 2;

            private long nodeId_;

            /**
             * <code>optional int64 node_id = 2;</code>
             */
            public boolean hasNodeId() {
                return ((bitField0_) & 2) == 2;
            }

            /**
             * <code>optional int64 node_id = 2;</code>
             */
            public long getNodeId() {
                return nodeId_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;
            public static final int CONTENT_FIELD_NUMBER = 4;

            private JBPMMessages.ProcessInstance.NodeInstanceContent content_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
             */
            public boolean hasContent() {
                return ((bitField0_) & 4) == 4;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent getContent() {
                return content_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContentOrBuilder getContentOrBuilder() {
                return content_;
            }

            // optional int32 level = 5;
            public static final int LEVEL_FIELD_NUMBER = 5;

            private int level_;

            /**
             * <code>optional int32 level = 5;</code>
             */
            public boolean hasLevel() {
                return ((bitField0_) & 8) == 8;
            }

            /**
             * <code>optional int32 level = 5;</code>
             */
            public int getLevel() {
                return level_;
            }

            private void initFields() {
                id_ = 0L;
                nodeId_ = 0L;
                content_ = JBPMMessages.ProcessInstance.NodeInstanceContent.getDefaultInstance();
                level_ = 0;
            }

            private byte memoizedIsInitialized = -1;

            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized != (-1))
                    return isInitialized == 1;
                
                memoizedIsInitialized = 1;
                return true;
            }

            public void writeTo(CodedOutputStream output) throws IOException {
                getSerializedSize();
                if (((bitField0_) & 1) == 1) {
                    output.writeInt64(1, id_);
                } 
                if (((bitField0_) & 2) == 2) {
                    output.writeInt64(2, nodeId_);
                } 
                if (((bitField0_) & 4) == 4) {
                    output.writeMessage(4, content_);
                } 
                if (((bitField0_) & 8) == 8) {
                    output.writeInt32(5, level_);
                } 
                getUnknownFields().writeTo(output);
            }

            private int memoizedSerializedSize = -1;

            public int getSerializedSize() {
                int size = memoizedSerializedSize;
                if (size != (-1))
                    return size;
                
                size = 0;
                if (((bitField0_) & 1) == 1) {
                    size += CodedOutputStream.computeInt64Size(1, id_);
                } 
                if (((bitField0_) & 2) == 2) {
                    size += CodedOutputStream.computeInt64Size(2, nodeId_);
                } 
                if (((bitField0_) & 4) == 4) {
                    size += CodedOutputStream.computeMessageSize(4, content_);
                } 
                if (((bitField0_) & 8) == 8) {
                    size += CodedOutputStream.computeInt32Size(5, level_);
                } 
                size += getUnknownFields().getSerializedSize();
                memoizedSerializedSize = size;
                return size;
            }

            private static final long serialVersionUID = 0L;

            @Override
            protected Object writeReplace() throws ObjectStreamException {
                return super.writeReplace();
            }

            public static JBPMMessages.ProcessInstance.NodeInstance parseFrom(ByteString data) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.NodeInstance.PARSER.parseFrom(data);
            }

            public static JBPMMessages.ProcessInstance.NodeInstance parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.NodeInstance.PARSER.parseFrom(data, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.NodeInstance parseFrom(byte[] data) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.NodeInstance.PARSER.parseFrom(data);
            }

            public static JBPMMessages.ProcessInstance.NodeInstance parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.NodeInstance.PARSER.parseFrom(data, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.NodeInstance parseFrom(InputStream input) throws IOException {
                return JBPMMessages.ProcessInstance.NodeInstance.PARSER.parseFrom(input);
            }

            public static JBPMMessages.ProcessInstance.NodeInstance parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessInstance.NodeInstance.PARSER.parseFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.NodeInstance parseDelimitedFrom(InputStream input) throws IOException {
                return JBPMMessages.ProcessInstance.NodeInstance.PARSER.parseDelimitedFrom(input);
            }

            public static JBPMMessages.ProcessInstance.NodeInstance parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessInstance.NodeInstance.PARSER.parseDelimitedFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.NodeInstance parseFrom(CodedInputStream input) throws IOException {
                return JBPMMessages.ProcessInstance.NodeInstance.PARSER.parseFrom(input);
            }

            public static JBPMMessages.ProcessInstance.NodeInstance parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessInstance.NodeInstance.PARSER.parseFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.NodeInstance.Builder newBuilder() {
                return JBPMMessages.ProcessInstance.NodeInstance.Builder.create();
            }

            public JBPMMessages.ProcessInstance.NodeInstance.Builder newBuilderForType() {
                return JBPMMessages.ProcessInstance.NodeInstance.newBuilder();
            }

            public static JBPMMessages.ProcessInstance.NodeInstance.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstance prototype) {
                return JBPMMessages.ProcessInstance.NodeInstance.newBuilder().mergeFrom(prototype);
            }

            public JBPMMessages.ProcessInstance.NodeInstance.Builder toBuilder() {
                return JBPMMessages.ProcessInstance.NodeInstance.newBuilder(JBPMMessages.ProcessInstance.NodeInstance.this);
            }

            @Override
            protected JBPMMessages.ProcessInstance.NodeInstance.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                JBPMMessages.ProcessInstance.NodeInstance.Builder builder = new JBPMMessages.ProcessInstance.NodeInstance.Builder(parent);
                return builder;
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstance}
             */
            // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstance)
            public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstance.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceOrBuilder {
                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstance_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstance_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstance.class, JBPMMessages.ProcessInstance.NodeInstance.Builder.class);
                }

                // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstance.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessage.BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                        getContentFieldBuilder();
                    } 
                }

                private static JBPMMessages.ProcessInstance.NodeInstance.Builder create() {
                    return new JBPMMessages.ProcessInstance.NodeInstance.Builder();
                }

                public JBPMMessages.ProcessInstance.NodeInstance.Builder clear() {
                    super.clear();
                    id_ = 0L;
                    bitField0_ = (bitField0_) & (~1);
                    nodeId_ = 0L;
                    bitField0_ = (bitField0_) & (~2);
                    if ((contentBuilder_) == null) {
                        content_ = JBPMMessages.ProcessInstance.NodeInstanceContent.getDefaultInstance();
                    } else {
                        contentBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~4);
                    level_ = 0;
                    bitField0_ = (bitField0_) & (~8);
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                public JBPMMessages.ProcessInstance.NodeInstance.Builder clone() {
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.create().mergeFrom(buildPartial());
                }

                public Descriptors.Descriptor getDescriptorForType() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstance_descriptor;
                }

                public JBPMMessages.ProcessInstance.NodeInstance getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstance.getDefaultInstance();
                }

                public JBPMMessages.ProcessInstance.NodeInstance build() {
                    JBPMMessages.ProcessInstance.NodeInstance result = buildPartial();
                    if (!(result.isInitialized())) {
                        throw AbstractMessage.Builder.newUninitializedMessageException(result);
                    } 
                    return result;
                }

                public JBPMMessages.ProcessInstance.NodeInstance buildPartial() {
                    JBPMMessages.ProcessInstance.NodeInstance result = new JBPMMessages.ProcessInstance.NodeInstance(JBPMMessages.ProcessInstance.NodeInstance.Builder.this);
                    int from_bitField0_ = bitField0_;
                    int to_bitField0_ = 0;
                    if ((from_bitField0_ & 1) == 1) {
                        to_bitField0_ |= 1;
                    } 
                    result.id_ = id_;
                    if ((from_bitField0_ & 2) == 2) {
                        to_bitField0_ |= 2;
                    } 
                    result.nodeId_ = nodeId_;
                    if ((from_bitField0_ & 4) == 4) {
                        to_bitField0_ |= 4;
                    } 
                    if ((contentBuilder_) == null) {
                        result.content_ = content_;
                    } else {
                        result.content_ = contentBuilder_.build();
                    }
                    if ((from_bitField0_ & 8) == 8) {
                        to_bitField0_ |= 8;
                    } 
                    result.level_ = level_;
                    result.bitField0_ = to_bitField0_;
                    onBuilt();
                    return result;
                }

                public JBPMMessages.ProcessInstance.NodeInstance.Builder mergeFrom(Message other) {
                    if (other instanceof JBPMMessages.ProcessInstance.NodeInstance) {
                        return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstance) (other)));
                    } else {
                        super.mergeFrom(other);
                        return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                    }
                }

                public JBPMMessages.ProcessInstance.NodeInstance.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstance other) {
                    if (other == (JBPMMessages.ProcessInstance.NodeInstance.getDefaultInstance()))
                        return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                    
                    if (other.hasId()) {
                        setId(other.getId());
                    } 
                    if (other.hasNodeId()) {
                        setNodeId(other.getNodeId());
                    } 
                    if (other.hasContent()) {
                        mergeContent(other.getContent());
                    } 
                    if (other.hasLevel()) {
                        setLevel(other.getLevel());
                    } 
                    JBPMMessages.ProcessInstance.NodeInstance.Builder.this.mergeUnknownFields(other.getUnknownFields());
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                public final boolean isInitialized() {
                    return true;
                }

                public JBPMMessages.ProcessInstance.NodeInstance.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    JBPMMessages.ProcessInstance.NodeInstance parsedMessage = null;
                    try {
                        parsedMessage = JBPMMessages.ProcessInstance.NodeInstance.PARSER.parsePartialFrom(input, extensionRegistry);
                    } catch (InvalidProtocolBufferException e) {
                        parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstance) (e.getUnfinishedMessage()));
                        throw e;
                    } finally {
                        if (parsedMessage != null) {
                            mergeFrom(parsedMessage);
                        } 
                    }
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                private int bitField0_;

                // optional int64 id = 1;
                private long id_;

                /**
                 * <code>optional int64 id = 1;</code>
                 */
                public boolean hasId() {
                    return ((bitField0_) & 1) == 1;
                }

                /**
                 * <code>optional int64 id = 1;</code>
                 */
                public long getId() {
                    return id_;
                }

                /**
                 * <code>optional int64 id = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstance.Builder setId(long value) {
                    bitField0_ |= 1;
                    id_ = value;
                    onChanged();
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                /**
                 * <code>optional int64 id = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstance.Builder clearId() {
                    bitField0_ = (bitField0_) & (~1);
                    id_ = 0L;
                    onChanged();
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                // optional int64 node_id = 2;
                private long nodeId_;

                /**
                 * <code>optional int64 node_id = 2;</code>
                 */
                public boolean hasNodeId() {
                    return ((bitField0_) & 2) == 2;
                }

                /**
                 * <code>optional int64 node_id = 2;</code>
                 */
                public long getNodeId() {
                    return nodeId_;
                }

                /**
                 * <code>optional int64 node_id = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstance.Builder setNodeId(long value) {
                    bitField0_ |= 2;
                    nodeId_ = value;
                    onChanged();
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                /**
                 * <code>optional int64 node_id = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstance.Builder clearNodeId() {
                    bitField0_ = (bitField0_) & (~2);
                    nodeId_ = 0L;
                    onChanged();
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;
                private JBPMMessages.ProcessInstance.NodeInstanceContent content_ = JBPMMessages.ProcessInstance.NodeInstanceContent.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent, JBPMMessages.ProcessInstance.NodeInstanceContent.Builder, JBPMMessages.ProcessInstance.NodeInstanceContentOrBuilder> contentBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
                 */
                public boolean hasContent() {
                    return ((bitField0_) & 4) == 4;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent getContent() {
                    if ((contentBuilder_) == null) {
                        return content_;
                    } else {
                        return contentBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstance.Builder setContent(JBPMMessages.ProcessInstance.NodeInstanceContent value) {
                    if ((contentBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        content_ = value;
                        onChanged();
                    } else {
                        contentBuilder_.setMessage(value);
                    }
                    bitField0_ |= 4;
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstance.Builder setContent(JBPMMessages.ProcessInstance.NodeInstanceContent.Builder builderForValue) {
                    if ((contentBuilder_) == null) {
                        content_ = builderForValue.build();
                        onChanged();
                    } else {
                        contentBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 4;
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstance.Builder mergeContent(JBPMMessages.ProcessInstance.NodeInstanceContent value) {
                    if ((contentBuilder_) == null) {
                        if ((((bitField0_) & 4) == 4) && ((content_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.getDefaultInstance()))) {
                            content_ = JBPMMessages.ProcessInstance.NodeInstanceContent.newBuilder(content_).mergeFrom(value).buildPartial();
                        } else {
                            content_ = value;
                        }
                        onChanged();
                    } else {
                        contentBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 4;
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstance.Builder clearContent() {
                    if ((contentBuilder_) == null) {
                        content_ = JBPMMessages.ProcessInstance.NodeInstanceContent.getDefaultInstance();
                        onChanged();
                    } else {
                        contentBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~4);
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder getContentBuilder() {
                    bitField0_ |= 4;
                    onChanged();
                    return getContentFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContentOrBuilder getContentOrBuilder() {
                    if ((contentBuilder_) != null) {
                        return contentBuilder_.getMessageOrBuilder();
                    } else {
                        return content_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent content = 4;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent, JBPMMessages.ProcessInstance.NodeInstanceContent.Builder, JBPMMessages.ProcessInstance.NodeInstanceContentOrBuilder> getContentFieldBuilder() {
                    if ((contentBuilder_) == null) {
                        contentBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent, JBPMMessages.ProcessInstance.NodeInstanceContent.Builder, JBPMMessages.ProcessInstance.NodeInstanceContentOrBuilder>(content_, getParentForChildren(), isClean());
                        content_ = null;
                    } 
                    return contentBuilder_;
                }

                // optional int32 level = 5;
                private int level_;

                /**
                 * <code>optional int32 level = 5;</code>
                 */
                public boolean hasLevel() {
                    return ((bitField0_) & 8) == 8;
                }

                /**
                 * <code>optional int32 level = 5;</code>
                 */
                public int getLevel() {
                    return level_;
                }

                /**
                 * <code>optional int32 level = 5;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstance.Builder setLevel(int value) {
                    bitField0_ |= 8;
                    level_ = value;
                    onChanged();
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                /**
                 * <code>optional int32 level = 5;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstance.Builder clearLevel() {
                    bitField0_ = (bitField0_) & (~8);
                    level_ = 0;
                    onChanged();
                    return JBPMMessages.ProcessInstance.NodeInstance.Builder.this;
                }

                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstance)
            }

            static {
                defaultInstance = new JBPMMessages.ProcessInstance.NodeInstance(true);
                JBPMMessages.ProcessInstance.NodeInstance.defaultInstance.initFields();
            }

            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstance)
        }

        public interface ExclusiveGroupInstanceOrBuilder extends MessageOrBuilder {
            // repeated int64 group_node_instance_id = 1;
            /**
             * <code>repeated int64 group_node_instance_id = 1;</code>
             */
            List<Long> getGroupNodeInstanceIdList();

            /**
             * <code>repeated int64 group_node_instance_id = 1;</code>
             */
            int getGroupNodeInstanceIdCount();

            /**
             * <code>repeated int64 group_node_instance_id = 1;</code>
             */
            long getGroupNodeInstanceId(int index);
        }

        /**
         * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance}
         */
        // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance)
        public static final class ExclusiveGroupInstance extends GeneratedMessage implements JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder {
            // Use ExclusiveGroupInstance.newBuilder() to construct.
            private ExclusiveGroupInstance(GeneratedMessage.Builder<?> builder) {
                super(builder);
                this.unknownFields = builder.getUnknownFields();
            }

            private ExclusiveGroupInstance(boolean noInit) {
                this.unknownFields = UnknownFieldSet.getDefaultInstance();
            }

            private static final JBPMMessages.ProcessInstance.ExclusiveGroupInstance defaultInstance;

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance getDefaultInstance() {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.defaultInstance;
            }

            public JBPMMessages.ProcessInstance.ExclusiveGroupInstance getDefaultInstanceForType() {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.defaultInstance;
            }

            private final UnknownFieldSet unknownFields;

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.this.unknownFields;
            }

            private ExclusiveGroupInstance(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                initFields();
                int mutable_bitField0_ = 0;
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0 :
                                done = true;
                                break;
                            default :
                                {
                                    if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                        done = true;
                                    } 
                                    break;
                                }
                            case 8 :
                                {
                                    if (!((mutable_bitField0_ & 1) == 1)) {
                                        groupNodeInstanceId_ = new ArrayList<Long>();
                                        mutable_bitField0_ |= 1;
                                    } 
                                    groupNodeInstanceId_.add(input.readInt64());
                                    break;
                                }
                            case 10 :
                                {
                                    int length = input.readRawVarint32();
                                    int limit = input.pushLimit(length);
                                    if ((!((mutable_bitField0_ & 1) == 1)) && ((input.getBytesUntilLimit()) > 0)) {
                                        groupNodeInstanceId_ = new ArrayList<Long>();
                                        mutable_bitField0_ |= 1;
                                    } 
                                    while ((input.getBytesUntilLimit()) > 0) {
                                        groupNodeInstanceId_.add(input.readInt64());
                                    }
                                    input.popLimit(limit);
                                    break;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.ExclusiveGroupInstance.this);
                } catch (IOException e) {
                    throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.ExclusiveGroupInstance.this);
                } finally {
                    if ((mutable_bitField0_ & 1) == 1) {
                        groupNodeInstanceId_ = Collections.unmodifiableList(groupNodeInstanceId_);
                    } 
                    this.unknownFields = unknownFields.build();
                    makeExtensionsImmutable();
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_ExclusiveGroupInstance_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_ExclusiveGroupInstance_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.ExclusiveGroupInstance.class, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.class);
            }

            public static Parser<JBPMMessages.ProcessInstance.ExclusiveGroupInstance> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.ExclusiveGroupInstance>() {
                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return new JBPMMessages.ProcessInstance.ExclusiveGroupInstance(input, extensionRegistry);
                }
            };

            @Override
            public Parser<JBPMMessages.ProcessInstance.ExclusiveGroupInstance> getParserForType() {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER;
            }

            // repeated int64 group_node_instance_id = 1;
            public static final int GROUP_NODE_INSTANCE_ID_FIELD_NUMBER = 1;

            private List<Long> groupNodeInstanceId_;

            /**
             * <code>repeated int64 group_node_instance_id = 1;</code>
             */
            public List<Long> getGroupNodeInstanceIdList() {
                return groupNodeInstanceId_;
            }

            /**
             * <code>repeated int64 group_node_instance_id = 1;</code>
             */
            public int getGroupNodeInstanceIdCount() {
                return groupNodeInstanceId_.size();
            }

            /**
             * <code>repeated int64 group_node_instance_id = 1;</code>
             */
            public long getGroupNodeInstanceId(int index) {
                return groupNodeInstanceId_.get(index);
            }

            private void initFields() {
                groupNodeInstanceId_ = Collections.emptyList();
            }

            private byte memoizedIsInitialized = -1;

            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized != (-1))
                    return isInitialized == 1;
                
                memoizedIsInitialized = 1;
                return true;
            }

            public void writeTo(CodedOutputStream output) throws IOException {
                getSerializedSize();
                for (int i = 0; i < (groupNodeInstanceId_.size()); i++) {
                    output.writeInt64(1, groupNodeInstanceId_.get(i));
                }
                getUnknownFields().writeTo(output);
            }

            private int memoizedSerializedSize = -1;

            public int getSerializedSize() {
                int size = memoizedSerializedSize;
                if (size != (-1))
                    return size;
                
                size = 0;
                {
                    int dataSize = 0;
                    for (int i = 0; i < (groupNodeInstanceId_.size()); i++) {
                        dataSize += CodedOutputStream.computeInt64SizeNoTag(groupNodeInstanceId_.get(i));
                    }
                    size += dataSize;
                    size += 1 * (getGroupNodeInstanceIdList().size());
                }
                size += getUnknownFields().getSerializedSize();
                memoizedSerializedSize = size;
                return size;
            }

            private static final long serialVersionUID = 0L;

            @Override
            protected Object writeReplace() throws ObjectStreamException {
                return super.writeReplace();
            }

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance parseFrom(ByteString data) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER.parseFrom(data);
            }

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER.parseFrom(data, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance parseFrom(byte[] data) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER.parseFrom(data);
            }

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER.parseFrom(data, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance parseFrom(InputStream input) throws IOException {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER.parseFrom(input);
            }

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER.parseFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance parseDelimitedFrom(InputStream input) throws IOException {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER.parseDelimitedFrom(input);
            }

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER.parseDelimitedFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance parseFrom(CodedInputStream input) throws IOException {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER.parseFrom(input);
            }

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER.parseFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder newBuilder() {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.create();
            }

            public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder newBuilderForType() {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.newBuilder();
            }

            public static JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder newBuilder(JBPMMessages.ProcessInstance.ExclusiveGroupInstance prototype) {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.newBuilder().mergeFrom(prototype);
            }

            public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder toBuilder() {
                return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.newBuilder(JBPMMessages.ProcessInstance.ExclusiveGroupInstance.this);
            }

            @Override
            protected JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder builder = new JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder(parent);
                return builder;
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance}
             */
            // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance)
            public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder> implements JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder {
                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_ExclusiveGroupInstance_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_ExclusiveGroupInstance_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.ExclusiveGroupInstance.class, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.class);
                }

                // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.ExclusiveGroupInstance.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessage.BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    } 
                }

                private static JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder create() {
                    return new JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder();
                }

                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder clear() {
                    super.clear();
                    groupNodeInstanceId_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~1);
                    return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.this;
                }

                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder clone() {
                    return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.create().mergeFrom(buildPartial());
                }

                public Descriptors.Descriptor getDescriptorForType() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_ExclusiveGroupInstance_descriptor;
                }

                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.getDefaultInstance();
                }

                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance build() {
                    JBPMMessages.ProcessInstance.ExclusiveGroupInstance result = buildPartial();
                    if (!(result.isInitialized())) {
                        throw AbstractMessage.Builder.newUninitializedMessageException(result);
                    } 
                    return result;
                }

                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance buildPartial() {
                    JBPMMessages.ProcessInstance.ExclusiveGroupInstance result = new JBPMMessages.ProcessInstance.ExclusiveGroupInstance(JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.this);
                    int from_bitField0_ = bitField0_;
                    if (((bitField0_) & 1) == 1) {
                        groupNodeInstanceId_ = Collections.unmodifiableList(groupNodeInstanceId_);
                        bitField0_ = (bitField0_) & (~1);
                    } 
                    result.groupNodeInstanceId_ = groupNodeInstanceId_;
                    onBuilt();
                    return result;
                }

                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder mergeFrom(Message other) {
                    if (other instanceof JBPMMessages.ProcessInstance.ExclusiveGroupInstance) {
                        return mergeFrom(((JBPMMessages.ProcessInstance.ExclusiveGroupInstance) (other)));
                    } else {
                        super.mergeFrom(other);
                        return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.this;
                    }
                }

                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder mergeFrom(JBPMMessages.ProcessInstance.ExclusiveGroupInstance other) {
                    if (other == (JBPMMessages.ProcessInstance.ExclusiveGroupInstance.getDefaultInstance()))
                        return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.this;
                    
                    if (!(other.groupNodeInstanceId_.isEmpty())) {
                        if (groupNodeInstanceId_.isEmpty()) {
                            groupNodeInstanceId_ = other.groupNodeInstanceId_;
                            bitField0_ = (bitField0_) & (~1);
                        } else {
                            ensureGroupNodeInstanceIdIsMutable();
                            groupNodeInstanceId_.addAll(other.groupNodeInstanceId_);
                        }
                        onChanged();
                    } 
                    JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.this.mergeUnknownFields(other.getUnknownFields());
                    return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.this;
                }

                public final boolean isInitialized() {
                    return true;
                }

                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    JBPMMessages.ProcessInstance.ExclusiveGroupInstance parsedMessage = null;
                    try {
                        parsedMessage = JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER.parsePartialFrom(input, extensionRegistry);
                    } catch (InvalidProtocolBufferException e) {
                        parsedMessage = ((JBPMMessages.ProcessInstance.ExclusiveGroupInstance) (e.getUnfinishedMessage()));
                        throw e;
                    } finally {
                        if (parsedMessage != null) {
                            mergeFrom(parsedMessage);
                        } 
                    }
                    return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.this;
                }

                private int bitField0_;

                // repeated int64 group_node_instance_id = 1;
                private List<Long> groupNodeInstanceId_ = Collections.emptyList();

                private void ensureGroupNodeInstanceIdIsMutable() {
                    if (!(((bitField0_) & 1) == 1)) {
                        groupNodeInstanceId_ = new ArrayList<Long>(groupNodeInstanceId_);
                        bitField0_ |= 1;
                    } 
                }

                /**
                 * <code>repeated int64 group_node_instance_id = 1;</code>
                 */
                public List<Long> getGroupNodeInstanceIdList() {
                    return Collections.unmodifiableList(groupNodeInstanceId_);
                }

                /**
                 * <code>repeated int64 group_node_instance_id = 1;</code>
                 */
                public int getGroupNodeInstanceIdCount() {
                    return groupNodeInstanceId_.size();
                }

                /**
                 * <code>repeated int64 group_node_instance_id = 1;</code>
                 */
                public long getGroupNodeInstanceId(int index) {
                    return groupNodeInstanceId_.get(index);
                }

                /**
                 * <code>repeated int64 group_node_instance_id = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder setGroupNodeInstanceId(int index, long value) {
                    ensureGroupNodeInstanceIdIsMutable();
                    groupNodeInstanceId_.set(index, value);
                    onChanged();
                    return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.this;
                }

                /**
                 * <code>repeated int64 group_node_instance_id = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder addGroupNodeInstanceId(long value) {
                    ensureGroupNodeInstanceIdIsMutable();
                    groupNodeInstanceId_.add(value);
                    onChanged();
                    return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.this;
                }

                /**
                 * <code>repeated int64 group_node_instance_id = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder addAllGroupNodeInstanceId(Iterable<? extends Long> values) {
                    ensureGroupNodeInstanceIdIsMutable();
                    super.addAll(values, groupNodeInstanceId_);
                    onChanged();
                    return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.this;
                }

                /**
                 * <code>repeated int64 group_node_instance_id = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder clearGroupNodeInstanceId() {
                    groupNodeInstanceId_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~1);
                    onChanged();
                    return JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder.this;
                }

                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance)
            }

            static {
                defaultInstance = new JBPMMessages.ProcessInstance.ExclusiveGroupInstance(true);
                JBPMMessages.ProcessInstance.ExclusiveGroupInstance.defaultInstance.initFields();
            }

            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance)
        }

        public interface NodeInstanceContentOrBuilder extends MessageOrBuilder {
            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceType type = 1;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceType type = 1;</code>
             */
            boolean hasType();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceType type = 1;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceType getType();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
             */
            boolean hasRuleSet();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode getRuleSet();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNodeOrBuilder getRuleSetOrBuilder();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
             */
            boolean hasHumanTask();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode getHumanTask();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNodeOrBuilder getHumanTaskOrBuilder();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
             */
            boolean hasWorkItem();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode getWorkItem();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNodeOrBuilder getWorkItemOrBuilder();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
             */
            boolean hasSubProcess();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode getSubProcess();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNodeOrBuilder getSubProcessOrBuilder();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
             */
            boolean hasMilestone();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode getMilestone();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNodeOrBuilder getMilestoneOrBuilder();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
             */
            boolean hasEvent();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode getEvent();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.EventNodeOrBuilder getEventOrBuilder();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
             */
            boolean hasTimer();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode getTimer();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNodeOrBuilder getTimerOrBuilder();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
             */
            boolean hasJoin();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode getJoin();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNodeOrBuilder getJoinOrBuilder();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
             */
            boolean hasState();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode getState();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.StateNodeOrBuilder getStateOrBuilder();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
             */
            boolean hasComposite();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode getComposite();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNodeOrBuilder getCompositeOrBuilder();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
             */
            boolean hasForEach();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode getForEach();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNodeOrBuilder getForEachOrBuilder();

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;
            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
             */
            boolean hasAsyncEvent();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode getAsyncEvent();

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
             */
            JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNodeOrBuilder getAsyncEventOrBuilder();
        }

        /**
         * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent}
         */
        // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent)
        public static final class NodeInstanceContent extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContentOrBuilder {
            // Use NodeInstanceContent.newBuilder() to construct.
            private NodeInstanceContent(GeneratedMessage.Builder<?> builder) {
                super(builder);
                this.unknownFields = builder.getUnknownFields();
            }

            private NodeInstanceContent(boolean noInit) {
                this.unknownFields = UnknownFieldSet.getDefaultInstance();
            }

            private static final JBPMMessages.ProcessInstance.NodeInstanceContent defaultInstance;

            public static JBPMMessages.ProcessInstance.NodeInstanceContent getDefaultInstance() {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.defaultInstance;
            }

            public JBPMMessages.ProcessInstance.NodeInstanceContent getDefaultInstanceForType() {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.defaultInstance;
            }

            private final UnknownFieldSet unknownFields;

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.this.unknownFields;
            }

            private NodeInstanceContent(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                initFields();
                int mutable_bitField0_ = 0;
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0 :
                                done = true;
                                break;
                            default :
                                {
                                    if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                        done = true;
                                    } 
                                    break;
                                }
                            case 8 :
                                {
                                    int rawValue = input.readEnum();
                                    JBPMMessages.ProcessInstance.NodeInstanceType value = JBPMMessages.ProcessInstance.NodeInstanceType.valueOf(rawValue);
                                    if (value == null) {
                                        unknownFields.mergeVarintField(1, rawValue);
                                    } else {
                                        bitField0_ |= 1;
                                        type_ = value;
                                    }
                                    break;
                                }
                            case 18 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder subBuilder = null;
                                    if (((bitField0_) & 2) == 2) {
                                        subBuilder = ruleSet_.toBuilder();
                                    } 
                                    ruleSet_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(ruleSet_);
                                        ruleSet_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 2;
                                    break;
                                }
                            case 26 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder subBuilder = null;
                                    if (((bitField0_) & 4) == 4) {
                                        subBuilder = humanTask_.toBuilder();
                                    } 
                                    humanTask_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(humanTask_);
                                        humanTask_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 4;
                                    break;
                                }
                            case 34 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder subBuilder = null;
                                    if (((bitField0_) & 8) == 8) {
                                        subBuilder = workItem_.toBuilder();
                                    } 
                                    workItem_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(workItem_);
                                        workItem_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 8;
                                    break;
                                }
                            case 42 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder subBuilder = null;
                                    if (((bitField0_) & 16) == 16) {
                                        subBuilder = subProcess_.toBuilder();
                                    } 
                                    subProcess_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(subProcess_);
                                        subProcess_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 16;
                                    break;
                                }
                            case 50 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder subBuilder = null;
                                    if (((bitField0_) & 32) == 32) {
                                        subBuilder = milestone_.toBuilder();
                                    } 
                                    milestone_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(milestone_);
                                        milestone_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 32;
                                    break;
                                }
                            case 58 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder subBuilder = null;
                                    if (((bitField0_) & 64) == 64) {
                                        subBuilder = event_.toBuilder();
                                    } 
                                    event_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(event_);
                                        event_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 64;
                                    break;
                                }
                            case 66 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder subBuilder = null;
                                    if (((bitField0_) & 128) == 128) {
                                        subBuilder = timer_.toBuilder();
                                    } 
                                    timer_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(timer_);
                                        timer_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 128;
                                    break;
                                }
                            case 74 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder subBuilder = null;
                                    if (((bitField0_) & 256) == 256) {
                                        subBuilder = join_.toBuilder();
                                    } 
                                    join_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(join_);
                                        join_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 256;
                                    break;
                                }
                            case 82 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder subBuilder = null;
                                    if (((bitField0_) & 512) == 512) {
                                        subBuilder = state_.toBuilder();
                                    } 
                                    state_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(state_);
                                        state_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 512;
                                    break;
                                }
                            case 90 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder subBuilder = null;
                                    if (((bitField0_) & 1024) == 1024) {
                                        subBuilder = composite_.toBuilder();
                                    } 
                                    composite_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(composite_);
                                        composite_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 1024;
                                    break;
                                }
                            case 98 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder subBuilder = null;
                                    if (((bitField0_) & 2048) == 2048) {
                                        subBuilder = forEach_.toBuilder();
                                    } 
                                    forEach_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(forEach_);
                                        forEach_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 2048;
                                    break;
                                }
                            case 106 :
                                {
                                    JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder subBuilder = null;
                                    if (((bitField0_) & 4096) == 4096) {
                                        subBuilder = asyncEvent_.toBuilder();
                                    } 
                                    asyncEvent_ = input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER, extensionRegistry);
                                    if (subBuilder != null) {
                                        subBuilder.mergeFrom(asyncEvent_);
                                        asyncEvent_ = subBuilder.buildPartial();
                                    } 
                                    bitField0_ |= 4096;
                                    break;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.this);
                } catch (IOException e) {
                    throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    makeExtensionsImmutable();
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.class, JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.class);
            }

            public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent>() {
                public JBPMMessages.ProcessInstance.NodeInstanceContent parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return new JBPMMessages.ProcessInstance.NodeInstanceContent(input, extensionRegistry);
                }
            };

            @Override
            public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent> getParserForType() {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER;
            }

            public interface RuleSetNodeOrBuilder extends MessageOrBuilder {
                // repeated int64 timer_instance_id = 1;
                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                List<Long> getTimerInstanceIdList();

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                int getTimerInstanceIdCount();

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                long getTimerInstanceId(int index);

                // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;
                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                 */
                List<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry> getMapEntryList();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                 */
                JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry getMapEntry(int index);

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                 */
                int getMapEntryCount();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                 */
                List<? extends JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntryOrBuilder> getMapEntryOrBuilderList();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                 */
                JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntryOrBuilder getMapEntryOrBuilder(int index);

                // optional string rule_flow_group = 3;
                /**
                 * <code>optional string rule_flow_group = 3;</code>
                 */
                boolean hasRuleFlowGroup();

                /**
                 * <code>optional string rule_flow_group = 3;</code>
                 */
                String getRuleFlowGroup();

                /**
                 * <code>optional string rule_flow_group = 3;</code>
                 */
                ByteString getRuleFlowGroupBytes();
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode}
             */
            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode)
            public static final class RuleSetNode extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNodeOrBuilder {
                // Use RuleSetNode.newBuilder() to construct.
                private RuleSetNode(GeneratedMessage.Builder<?> builder) {
                    super(builder);
                    this.unknownFields = builder.getUnknownFields();
                }

                private RuleSetNode(boolean noInit) {
                    this.unknownFields = UnknownFieldSet.getDefaultInstance();
                }

                private static final JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode defaultInstance;

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode getDefaultInstance() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.defaultInstance;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.defaultInstance;
                }

                private final UnknownFieldSet unknownFields;

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.this.unknownFields;
                }

                private RuleSetNode(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    initFields();
                    int mutable_bitField0_ = 0;
                    UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0 :
                                    done = true;
                                    break;
                                default :
                                    {
                                        if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                            done = true;
                                        } 
                                        break;
                                    }
                                case 8 :
                                    {
                                        if (!((mutable_bitField0_ & 1) == 1)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 1;
                                        } 
                                        timerInstanceId_.add(input.readInt64());
                                        break;
                                    }
                                case 10 :
                                    {
                                        int length = input.readRawVarint32();
                                        int limit = input.pushLimit(length);
                                        if ((!((mutable_bitField0_ & 1) == 1)) && ((input.getBytesUntilLimit()) > 0)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 1;
                                        } 
                                        while ((input.getBytesUntilLimit()) > 0) {
                                            timerInstanceId_.add(input.readInt64());
                                        }
                                        input.popLimit(limit);
                                        break;
                                    }
                                case 18 :
                                    {
                                        if (!((mutable_bitField0_ & 2) == 2)) {
                                            mapEntry_ = new ArrayList<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry>();
                                            mutable_bitField0_ |= 2;
                                        } 
                                        mapEntry_.add(input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER, extensionRegistry));
                                        break;
                                    }
                                case 26 :
                                    {
                                        bitField0_ |= 1;
                                        ruleFlowGroup_ = input.readBytes();
                                        break;
                                    }
                            }
                        }
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.this);
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.this);
                    } finally {
                        if ((mutable_bitField0_ & 1) == 1) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                        } 
                        if ((mutable_bitField0_ & 2) == 2) {
                            mapEntry_ = Collections.unmodifiableList(mapEntry_);
                        } 
                        this.unknownFields = unknownFields.build();
                        makeExtensionsImmutable();
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.class);
                }

                public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode>() {
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode(input, extensionRegistry);
                    }
                };

                @Override
                public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode> getParserForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER;
                }

                public interface TextMapEntryOrBuilder extends MessageOrBuilder {
                    // optional string name = 1;
                    /**
                     * <code>optional string name = 1;</code>
                     */
                    boolean hasName();

                    /**
                     * <code>optional string name = 1;</code>
                     */
                    String getName();

                    /**
                     * <code>optional string name = 1;</code>
                     */
                    ByteString getNameBytes();

                    // optional string value = 2;
                    /**
                     * <code>optional string value = 2;</code>
                     */
                    boolean hasValue();

                    /**
                     * <code>optional string value = 2;</code>
                     */
                    String getValue();

                    /**
                     * <code>optional string value = 2;</code>
                     */
                    ByteString getValueBytes();
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry}
                 */
                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry)
                public static final class TextMapEntry extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntryOrBuilder {
                    // Use TextMapEntry.newBuilder() to construct.
                    private TextMapEntry(GeneratedMessage.Builder<?> builder) {
                        super(builder);
                        this.unknownFields = builder.getUnknownFields();
                    }

                    private TextMapEntry(boolean noInit) {
                        this.unknownFields = UnknownFieldSet.getDefaultInstance();
                    }

                    private static final JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry defaultInstance;

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry getDefaultInstance() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.defaultInstance;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.defaultInstance;
                    }

                    private final UnknownFieldSet unknownFields;

                    @Override
                    public final UnknownFieldSet getUnknownFields() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.this.unknownFields;
                    }

                    private TextMapEntry(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        initFields();
                        int mutable_bitField0_ = 0;
                        UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                        try {
                            boolean done = false;
                            while (!done) {
                                int tag = input.readTag();
                                switch (tag) {
                                    case 0 :
                                        done = true;
                                        break;
                                    default :
                                        {
                                            if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                                done = true;
                                            } 
                                            break;
                                        }
                                    case 10 :
                                        {
                                            bitField0_ |= 1;
                                            name_ = input.readBytes();
                                            break;
                                        }
                                    case 18 :
                                        {
                                            bitField0_ |= 2;
                                            value_ = input.readBytes();
                                            break;
                                        }
                                }
                            }
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.this);
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.this);
                        } finally {
                            this.unknownFields = unknownFields.build();
                            makeExtensionsImmutable();
                        }
                    }

                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_TextMapEntry_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_TextMapEntry_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.class, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.class);
                    }

                    public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry>() {
                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                            return new JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry(input, extensionRegistry);
                        }
                    };

                    @Override
                    public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry> getParserForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER;
                    }

                    private int bitField0_;

                    // optional string name = 1;
                    public static final int NAME_FIELD_NUMBER = 1;

                    private Object name_;

                    /**
                     * <code>optional string name = 1;</code>
                     */
                    public boolean hasName() {
                        return ((bitField0_) & 1) == 1;
                    }

                    /**
                     * <code>optional string name = 1;</code>
                     */
                    public String getName() {
                        Object ref = name_;
                        if (ref instanceof String) {
                            return ((String) (ref));
                        } else {
                            ByteString bs = ((ByteString) (ref));
                            String s = bs.toStringUtf8();
                            if (bs.isValidUtf8()) {
                                name_ = s;
                            } 
                            return s;
                        }
                    }

                    /**
                     * <code>optional string name = 1;</code>
                     */
                    public ByteString getNameBytes() {
                        Object ref = name_;
                        if (ref instanceof String) {
                            ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                            name_ = b;
                            return b;
                        } else {
                            return ((ByteString) (ref));
                        }
                    }

                    // optional string value = 2;
                    public static final int VALUE_FIELD_NUMBER = 2;

                    private Object value_;

                    /**
                     * <code>optional string value = 2;</code>
                     */
                    public boolean hasValue() {
                        return ((bitField0_) & 2) == 2;
                    }

                    /**
                     * <code>optional string value = 2;</code>
                     */
                    public String getValue() {
                        Object ref = value_;
                        if (ref instanceof String) {
                            return ((String) (ref));
                        } else {
                            ByteString bs = ((ByteString) (ref));
                            String s = bs.toStringUtf8();
                            if (bs.isValidUtf8()) {
                                value_ = s;
                            } 
                            return s;
                        }
                    }

                    /**
                     * <code>optional string value = 2;</code>
                     */
                    public ByteString getValueBytes() {
                        Object ref = value_;
                        if (ref instanceof String) {
                            ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                            value_ = b;
                            return b;
                        } else {
                            return ((ByteString) (ref));
                        }
                    }

                    private void initFields() {
                        name_ = "";
                        value_ = "";
                    }

                    private byte memoizedIsInitialized = -1;

                    public final boolean isInitialized() {
                        byte isInitialized = memoizedIsInitialized;
                        if (isInitialized != (-1))
                            return isInitialized == 1;
                        
                        memoizedIsInitialized = 1;
                        return true;
                    }

                    public void writeTo(CodedOutputStream output) throws IOException {
                        getSerializedSize();
                        if (((bitField0_) & 1) == 1) {
                            output.writeBytes(1, getNameBytes());
                        } 
                        if (((bitField0_) & 2) == 2) {
                            output.writeBytes(2, getValueBytes());
                        } 
                        getUnknownFields().writeTo(output);
                    }

                    private int memoizedSerializedSize = -1;

                    public int getSerializedSize() {
                        int size = memoizedSerializedSize;
                        if (size != (-1))
                            return size;
                        
                        size = 0;
                        if (((bitField0_) & 1) == 1) {
                            size += CodedOutputStream.computeBytesSize(1, getNameBytes());
                        } 
                        if (((bitField0_) & 2) == 2) {
                            size += CodedOutputStream.computeBytesSize(2, getValueBytes());
                        } 
                        size += getUnknownFields().getSerializedSize();
                        memoizedSerializedSize = size;
                        return size;
                    }

                    private static final long serialVersionUID = 0L;

                    @Override
                    protected Object writeReplace() throws ObjectStreamException {
                        return super.writeReplace();
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry parseFrom(ByteString data) throws InvalidProtocolBufferException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER.parseFrom(data);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER.parseFrom(data, extensionRegistry);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry parseFrom(byte[] data) throws InvalidProtocolBufferException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER.parseFrom(data);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER.parseFrom(data, extensionRegistry);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry parseFrom(InputStream input) throws IOException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER.parseFrom(input);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER.parseFrom(input, extensionRegistry);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry parseDelimitedFrom(InputStream input) throws IOException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER.parseDelimitedFrom(input);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER.parseDelimitedFrom(input, extensionRegistry);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry parseFrom(CodedInputStream input) throws IOException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER.parseFrom(input);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER.parseFrom(input, extensionRegistry);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder newBuilder() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.create();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder newBuilderForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.newBuilder();
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry prototype) {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.newBuilder().mergeFrom(prototype);
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder toBuilder() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.this);
                    }

                    @Override
                    protected JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder(parent);
                        return builder;
                    }

                    /**
                     * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry}
                     */
                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry)
                    public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntryOrBuilder {
                        public static final Descriptors.Descriptor getDescriptor() {
                            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_TextMapEntry_descriptor;
                        }

                        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_TextMapEntry_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.class, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.class);
                        }

                        // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.newBuilder()
                        private Builder() {
                            maybeForceBuilderInitialization();
                        }

                        private Builder(GeneratedMessage.BuilderParent parent) {
                            super(parent);
                            maybeForceBuilderInitialization();
                        }

                        private void maybeForceBuilderInitialization() {
                            if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                            } 
                        }

                        private static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder create() {
                            return new JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder();
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder clear() {
                            super.clear();
                            name_ = "";
                            bitField0_ = (bitField0_) & (~1);
                            value_ = "";
                            bitField0_ = (bitField0_) & (~2);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this;
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder clone() {
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.create().mergeFrom(buildPartial());
                        }

                        public Descriptors.Descriptor getDescriptorForType() {
                            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_TextMapEntry_descriptor;
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry getDefaultInstanceForType() {
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.getDefaultInstance();
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry build() {
                            JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry result = buildPartial();
                            if (!(result.isInitialized())) {
                                throw AbstractMessage.Builder.newUninitializedMessageException(result);
                            } 
                            return result;
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry buildPartial() {
                            JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry result = new JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this);
                            int from_bitField0_ = bitField0_;
                            int to_bitField0_ = 0;
                            if ((from_bitField0_ & 1) == 1) {
                                to_bitField0_ |= 1;
                            } 
                            result.name_ = name_;
                            if ((from_bitField0_ & 2) == 2) {
                                to_bitField0_ |= 2;
                            } 
                            result.value_ = value_;
                            result.bitField0_ = to_bitField0_;
                            onBuilt();
                            return result;
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder mergeFrom(Message other) {
                            if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry) {
                                return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry) (other)));
                            } else {
                                super.mergeFrom(other);
                                return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this;
                            }
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry other) {
                            if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.getDefaultInstance()))
                                return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this;
                            
                            if (other.hasName()) {
                                bitField0_ |= 1;
                                name_ = other.name_;
                                onChanged();
                            } 
                            if (other.hasValue()) {
                                bitField0_ |= 2;
                                value_ = other.value_;
                                onChanged();
                            } 
                            JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this.mergeUnknownFields(other.getUnknownFields());
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this;
                        }

                        public final boolean isInitialized() {
                            return true;
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                            JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry parsedMessage = null;
                            try {
                                parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.PARSER.parsePartialFrom(input, extensionRegistry);
                            } catch (InvalidProtocolBufferException e) {
                                parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry) (e.getUnfinishedMessage()));
                                throw e;
                            } finally {
                                if (parsedMessage != null) {
                                    mergeFrom(parsedMessage);
                                } 
                            }
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this;
                        }

                        private int bitField0_;

                        // optional string name = 1;
                        private Object name_ = "";

                        /**
                         * <code>optional string name = 1;</code>
                         */
                        public boolean hasName() {
                            return ((bitField0_) & 1) == 1;
                        }

                        /**
                         * <code>optional string name = 1;</code>
                         */
                        public String getName() {
                            Object ref = name_;
                            if (!(ref instanceof String)) {
                                String s = ((ByteString) (ref)).toStringUtf8();
                                name_ = s;
                                return s;
                            } else {
                                return ((String) (ref));
                            }
                        }

                        /**
                         * <code>optional string name = 1;</code>
                         */
                        public ByteString getNameBytes() {
                            Object ref = name_;
                            if (ref instanceof String) {
                                ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                                name_ = b;
                                return b;
                            } else {
                                return ((ByteString) (ref));
                            }
                        }

                        /**
                         * <code>optional string name = 1;</code>
                         */
                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder setName(String value) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            bitField0_ |= 1;
                            name_ = value;
                            onChanged();
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this;
                        }

                        /**
                         * <code>optional string name = 1;</code>
                         */
                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder clearName() {
                            bitField0_ = (bitField0_) & (~1);
                            name_ = JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.getDefaultInstance().getName();
                            onChanged();
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this;
                        }

                        /**
                         * <code>optional string name = 1;</code>
                         */
                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder setNameBytes(ByteString value) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            bitField0_ |= 1;
                            name_ = value;
                            onChanged();
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this;
                        }

                        // optional string value = 2;
                        private Object value_ = "";

                        /**
                         * <code>optional string value = 2;</code>
                         */
                        public boolean hasValue() {
                            return ((bitField0_) & 2) == 2;
                        }

                        /**
                         * <code>optional string value = 2;</code>
                         */
                        public String getValue() {
                            Object ref = value_;
                            if (!(ref instanceof String)) {
                                String s = ((ByteString) (ref)).toStringUtf8();
                                value_ = s;
                                return s;
                            } else {
                                return ((String) (ref));
                            }
                        }

                        /**
                         * <code>optional string value = 2;</code>
                         */
                        public ByteString getValueBytes() {
                            Object ref = value_;
                            if (ref instanceof String) {
                                ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                                value_ = b;
                                return b;
                            } else {
                                return ((ByteString) (ref));
                            }
                        }

                        /**
                         * <code>optional string value = 2;</code>
                         */
                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder setValue(String value) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            bitField0_ |= 2;
                            value_ = value;
                            onChanged();
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this;
                        }

                        /**
                         * <code>optional string value = 2;</code>
                         */
                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder clearValue() {
                            bitField0_ = (bitField0_) & (~2);
                            value_ = JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.getDefaultInstance().getValue();
                            onChanged();
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this;
                        }

                        /**
                         * <code>optional string value = 2;</code>
                         */
                        public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder setValueBytes(ByteString value) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            bitField0_ |= 2;
                            value_ = value;
                            onChanged();
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder.this;
                        }

                        // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry)
                    }

                    static {
                        defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry(true);
                        JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.defaultInstance.initFields();
                    }

                    // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry)
                }

                private int bitField0_;

                // repeated int64 timer_instance_id = 1;
                public static final int TIMER_INSTANCE_ID_FIELD_NUMBER = 1;

                private List<Long> timerInstanceId_;

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                public List<Long> getTimerInstanceIdList() {
                    return timerInstanceId_;
                }

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                public int getTimerInstanceIdCount() {
                    return timerInstanceId_.size();
                }

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                public long getTimerInstanceId(int index) {
                    return timerInstanceId_.get(index);
                }

                // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;
                public static final int MAPENTRY_FIELD_NUMBER = 2;

                private List<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry> mapEntry_;

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                 */
                public List<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry> getMapEntryList() {
                    return mapEntry_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                 */
                public List<? extends JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntryOrBuilder> getMapEntryOrBuilderList() {
                    return mapEntry_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                 */
                public int getMapEntryCount() {
                    return mapEntry_.size();
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry getMapEntry(int index) {
                    return mapEntry_.get(index);
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntryOrBuilder getMapEntryOrBuilder(int index) {
                    return mapEntry_.get(index);
                }

                // optional string rule_flow_group = 3;
                public static final int RULE_FLOW_GROUP_FIELD_NUMBER = 3;

                private Object ruleFlowGroup_;

                /**
                 * <code>optional string rule_flow_group = 3;</code>
                 */
                public boolean hasRuleFlowGroup() {
                    return ((bitField0_) & 1) == 1;
                }

                /**
                 * <code>optional string rule_flow_group = 3;</code>
                 */
                public String getRuleFlowGroup() {
                    Object ref = ruleFlowGroup_;
                    if (ref instanceof String) {
                        return ((String) (ref));
                    } else {
                        ByteString bs = ((ByteString) (ref));
                        String s = bs.toStringUtf8();
                        if (bs.isValidUtf8()) {
                            ruleFlowGroup_ = s;
                        } 
                        return s;
                    }
                }

                /**
                 * <code>optional string rule_flow_group = 3;</code>
                 */
                public ByteString getRuleFlowGroupBytes() {
                    Object ref = ruleFlowGroup_;
                    if (ref instanceof String) {
                        ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                        ruleFlowGroup_ = b;
                        return b;
                    } else {
                        return ((ByteString) (ref));
                    }
                }

                private void initFields() {
                    timerInstanceId_ = Collections.emptyList();
                    mapEntry_ = Collections.emptyList();
                    ruleFlowGroup_ = "";
                }

                private byte memoizedIsInitialized = -1;

                public final boolean isInitialized() {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized != (-1))
                        return isInitialized == 1;
                    
                    memoizedIsInitialized = 1;
                    return true;
                }

                public void writeTo(CodedOutputStream output) throws IOException {
                    getSerializedSize();
                    for (int i = 0; i < (timerInstanceId_.size()); i++) {
                        output.writeInt64(1, timerInstanceId_.get(i));
                    }
                    for (int i = 0; i < (mapEntry_.size()); i++) {
                        output.writeMessage(2, mapEntry_.get(i));
                    }
                    if (((bitField0_) & 1) == 1) {
                        output.writeBytes(3, getRuleFlowGroupBytes());
                    } 
                    getUnknownFields().writeTo(output);
                }

                private int memoizedSerializedSize = -1;

                public int getSerializedSize() {
                    int size = memoizedSerializedSize;
                    if (size != (-1))
                        return size;
                    
                    size = 0;
                    {
                        int dataSize = 0;
                        for (int i = 0; i < (timerInstanceId_.size()); i++) {
                            dataSize += CodedOutputStream.computeInt64SizeNoTag(timerInstanceId_.get(i));
                        }
                        size += dataSize;
                        size += 1 * (getTimerInstanceIdList().size());
                    }
                    for (int i = 0; i < (mapEntry_.size()); i++) {
                        size += CodedOutputStream.computeMessageSize(2, mapEntry_.get(i));
                    }
                    if (((bitField0_) & 1) == 1) {
                        size += CodedOutputStream.computeBytesSize(3, getRuleFlowGroupBytes());
                    } 
                    size += getUnknownFields().getSerializedSize();
                    memoizedSerializedSize = size;
                    return size;
                }

                private static final long serialVersionUID = 0L;

                @Override
                protected Object writeReplace() throws ObjectStreamException {
                    return super.writeReplace();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode parseFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode parseDelimitedFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER.parseDelimitedFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER.parseDelimitedFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode parseFrom(CodedInputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder newBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.create();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder newBuilderForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.newBuilder();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode prototype) {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.newBuilder().mergeFrom(prototype);
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder toBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.this);
                }

                @Override
                protected JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                    JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder(parent);
                    return builder;
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode}
                 */
                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode)
                public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNodeOrBuilder {
                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.class);
                    }

                    // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.newBuilder()
                    private Builder() {
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessage.BuilderParent parent) {
                        super(parent);
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                            getMapEntryFieldBuilder();
                        } 
                    }

                    private static JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder create() {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder clear() {
                        super.clear();
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~1);
                        if ((mapEntryBuilder_) == null) {
                            mapEntry_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~2);
                        } else {
                            mapEntryBuilder_.clear();
                        }
                        ruleFlowGroup_ = "";
                        bitField0_ = (bitField0_) & (~4);
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder clone() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.create().mergeFrom(buildPartial());
                    }

                    public Descriptors.Descriptor getDescriptorForType() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_descriptor;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.getDefaultInstance();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode build() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode result = buildPartial();
                        if (!(result.isInitialized())) {
                            throw AbstractMessage.Builder.newUninitializedMessageException(result);
                        } 
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode buildPartial() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode result = new JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this);
                        int from_bitField0_ = bitField0_;
                        int to_bitField0_ = 0;
                        if (((bitField0_) & 1) == 1) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                            bitField0_ = (bitField0_) & (~1);
                        } 
                        result.timerInstanceId_ = timerInstanceId_;
                        if ((mapEntryBuilder_) == null) {
                            if (((bitField0_) & 2) == 2) {
                                mapEntry_ = Collections.unmodifiableList(mapEntry_);
                                bitField0_ = (bitField0_) & (~2);
                            } 
                            result.mapEntry_ = mapEntry_;
                        } else {
                            result.mapEntry_ = mapEntryBuilder_.build();
                        }
                        if ((from_bitField0_ & 4) == 4) {
                            to_bitField0_ |= 1;
                        } 
                        result.ruleFlowGroup_ = ruleFlowGroup_;
                        result.bitField0_ = to_bitField0_;
                        onBuilt();
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder mergeFrom(Message other) {
                        if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode) {
                            return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode) (other)));
                        } else {
                            super.mergeFrom(other);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                        }
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode other) {
                        if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.getDefaultInstance()))
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                        
                        if (!(other.timerInstanceId_.isEmpty())) {
                            if (timerInstanceId_.isEmpty()) {
                                timerInstanceId_ = other.timerInstanceId_;
                                bitField0_ = (bitField0_) & (~1);
                            } else {
                                ensureTimerInstanceIdIsMutable();
                                timerInstanceId_.addAll(other.timerInstanceId_);
                            }
                            onChanged();
                        } 
                        if ((mapEntryBuilder_) == null) {
                            if (!(other.mapEntry_.isEmpty())) {
                                if (mapEntry_.isEmpty()) {
                                    mapEntry_ = other.mapEntry_;
                                    bitField0_ = (bitField0_) & (~2);
                                } else {
                                    ensureMapEntryIsMutable();
                                    mapEntry_.addAll(other.mapEntry_);
                                }
                                onChanged();
                            } 
                        } else {
                            if (!(other.mapEntry_.isEmpty())) {
                                if (mapEntryBuilder_.isEmpty()) {
                                    mapEntryBuilder_.dispose();
                                    mapEntryBuilder_ = null;
                                    mapEntry_ = other.mapEntry_;
                                    bitField0_ = (bitField0_) & (~2);
                                    mapEntryBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getMapEntryFieldBuilder() : null;
                                } else {
                                    mapEntryBuilder_.addAllMessages(other.mapEntry_);
                                }
                            } 
                        }
                        if (other.hasRuleFlowGroup()) {
                            bitField0_ |= 4;
                            ruleFlowGroup_ = other.ruleFlowGroup_;
                            onChanged();
                        } 
                        JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this.mergeUnknownFields(other.getUnknownFields());
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    public final boolean isInitialized() {
                        return true;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode parsedMessage = null;
                        try {
                            parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.PARSER.parsePartialFrom(input, extensionRegistry);
                        } catch (InvalidProtocolBufferException e) {
                            parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode) (e.getUnfinishedMessage()));
                            throw e;
                        } finally {
                            if (parsedMessage != null) {
                                mergeFrom(parsedMessage);
                            } 
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    private int bitField0_;

                    // repeated int64 timer_instance_id = 1;
                    private List<Long> timerInstanceId_ = Collections.emptyList();

                    private void ensureTimerInstanceIdIsMutable() {
                        if (!(((bitField0_) & 1) == 1)) {
                            timerInstanceId_ = new ArrayList<Long>(timerInstanceId_);
                            bitField0_ |= 1;
                        } 
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public List<Long> getTimerInstanceIdList() {
                        return Collections.unmodifiableList(timerInstanceId_);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public int getTimerInstanceIdCount() {
                        return timerInstanceId_.size();
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public long getTimerInstanceId(int index) {
                        return timerInstanceId_.get(index);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder setTimerInstanceId(int index, long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.set(index, value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder addTimerInstanceId(long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.add(value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder addAllTimerInstanceId(Iterable<? extends Long> values) {
                        ensureTimerInstanceIdIsMutable();
                        super.addAll(values, timerInstanceId_);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder clearTimerInstanceId() {
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~1);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;
                    private List<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry> mapEntry_ = Collections.emptyList();

                    private void ensureMapEntryIsMutable() {
                        if (!(((bitField0_) & 2) == 2)) {
                            mapEntry_ = new ArrayList<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry>(mapEntry_);
                            bitField0_ |= 2;
                        } 
                    }

                    private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntryOrBuilder> mapEntryBuilder_;

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public List<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry> getMapEntryList() {
                        if ((mapEntryBuilder_) == null) {
                            return Collections.unmodifiableList(mapEntry_);
                        } else {
                            return mapEntryBuilder_.getMessageList();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public int getMapEntryCount() {
                        if ((mapEntryBuilder_) == null) {
                            return mapEntry_.size();
                        } else {
                            return mapEntryBuilder_.getCount();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry getMapEntry(int index) {
                        if ((mapEntryBuilder_) == null) {
                            return mapEntry_.get(index);
                        } else {
                            return mapEntryBuilder_.getMessage(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder setMapEntry(int index, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry value) {
                        if ((mapEntryBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureMapEntryIsMutable();
                            mapEntry_.set(index, value);
                            onChanged();
                        } else {
                            mapEntryBuilder_.setMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder setMapEntry(int index, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder builderForValue) {
                        if ((mapEntryBuilder_) == null) {
                            ensureMapEntryIsMutable();
                            mapEntry_.set(index, builderForValue.build());
                            onChanged();
                        } else {
                            mapEntryBuilder_.setMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder addMapEntry(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry value) {
                        if ((mapEntryBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureMapEntryIsMutable();
                            mapEntry_.add(value);
                            onChanged();
                        } else {
                            mapEntryBuilder_.addMessage(value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder addMapEntry(int index, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry value) {
                        if ((mapEntryBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureMapEntryIsMutable();
                            mapEntry_.add(index, value);
                            onChanged();
                        } else {
                            mapEntryBuilder_.addMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder addMapEntry(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder builderForValue) {
                        if ((mapEntryBuilder_) == null) {
                            ensureMapEntryIsMutable();
                            mapEntry_.add(builderForValue.build());
                            onChanged();
                        } else {
                            mapEntryBuilder_.addMessage(builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder addMapEntry(int index, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder builderForValue) {
                        if ((mapEntryBuilder_) == null) {
                            ensureMapEntryIsMutable();
                            mapEntry_.add(index, builderForValue.build());
                            onChanged();
                        } else {
                            mapEntryBuilder_.addMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder addAllMapEntry(Iterable<? extends JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry> values) {
                        if ((mapEntryBuilder_) == null) {
                            ensureMapEntryIsMutable();
                            super.addAll(values, mapEntry_);
                            onChanged();
                        } else {
                            mapEntryBuilder_.addAllMessages(values);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder clearMapEntry() {
                        if ((mapEntryBuilder_) == null) {
                            mapEntry_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~2);
                            onChanged();
                        } else {
                            mapEntryBuilder_.clear();
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder removeMapEntry(int index) {
                        if ((mapEntryBuilder_) == null) {
                            ensureMapEntryIsMutable();
                            mapEntry_.remove(index);
                            onChanged();
                        } else {
                            mapEntryBuilder_.remove(index);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder getMapEntryBuilder(int index) {
                        return getMapEntryFieldBuilder().getBuilder(index);
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntryOrBuilder getMapEntryOrBuilder(int index) {
                        if ((mapEntryBuilder_) == null) {
                            return mapEntry_.get(index);
                        } else {
                            return mapEntryBuilder_.getMessageOrBuilder(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public List<? extends JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntryOrBuilder> getMapEntryOrBuilderList() {
                        if ((mapEntryBuilder_) != null) {
                            return mapEntryBuilder_.getMessageOrBuilderList();
                        } else {
                            return Collections.unmodifiableList(mapEntry_);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder addMapEntryBuilder() {
                        return getMapEntryFieldBuilder().addBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder addMapEntryBuilder(int index) {
                        return getMapEntryFieldBuilder().addBuilder(index, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry mapEntry = 2;</code>
                     */
                    public List<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder> getMapEntryBuilderList() {
                        return getMapEntryFieldBuilder().getBuilderList();
                    }

                    private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntryOrBuilder> getMapEntryFieldBuilder() {
                        if ((mapEntryBuilder_) == null) {
                            mapEntryBuilder_ = new RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntry.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.TextMapEntryOrBuilder>(mapEntry_, (((bitField0_) & 2) == 2), getParentForChildren(), isClean());
                            mapEntry_ = null;
                        } 
                        return mapEntryBuilder_;
                    }

                    // optional string rule_flow_group = 3;
                    private Object ruleFlowGroup_ = "";

                    /**
                     * <code>optional string rule_flow_group = 3;</code>
                     */
                    public boolean hasRuleFlowGroup() {
                        return ((bitField0_) & 4) == 4;
                    }

                    /**
                     * <code>optional string rule_flow_group = 3;</code>
                     */
                    public String getRuleFlowGroup() {
                        Object ref = ruleFlowGroup_;
                        if (!(ref instanceof String)) {
                            String s = ((ByteString) (ref)).toStringUtf8();
                            ruleFlowGroup_ = s;
                            return s;
                        } else {
                            return ((String) (ref));
                        }
                    }

                    /**
                     * <code>optional string rule_flow_group = 3;</code>
                     */
                    public ByteString getRuleFlowGroupBytes() {
                        Object ref = ruleFlowGroup_;
                        if (ref instanceof String) {
                            ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                            ruleFlowGroup_ = b;
                            return b;
                        } else {
                            return ((ByteString) (ref));
                        }
                    }

                    /**
                     * <code>optional string rule_flow_group = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder setRuleFlowGroup(String value) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        bitField0_ |= 4;
                        ruleFlowGroup_ = value;
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>optional string rule_flow_group = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder clearRuleFlowGroup() {
                        bitField0_ = (bitField0_) & (~4);
                        ruleFlowGroup_ = JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.getDefaultInstance().getRuleFlowGroup();
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    /**
                     * <code>optional string rule_flow_group = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder setRuleFlowGroupBytes(ByteString value) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        bitField0_ |= 4;
                        ruleFlowGroup_ = value;
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder.this;
                    }

                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode)
                }

                static {
                    defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode(true);
                    JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.defaultInstance.initFields();
                }

                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode)
            }

            public interface HumanTaskNodeOrBuilder extends MessageOrBuilder {
                // optional int64 work_item_id = 1;
                /**
                 * <code>optional int64 work_item_id = 1;</code>
                 */
                boolean hasWorkItemId();

                /**
                 * <code>optional int64 work_item_id = 1;</code>
                 */
                long getWorkItemId();

                // repeated int64 timer_instance_id = 2;
                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                List<Long> getTimerInstanceIdList();

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                int getTimerInstanceIdCount();

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                long getTimerInstanceId(int index);
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode}
             */
            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode)
            public static final class HumanTaskNode extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNodeOrBuilder {
                // Use HumanTaskNode.newBuilder() to construct.
                private HumanTaskNode(GeneratedMessage.Builder<?> builder) {
                    super(builder);
                    this.unknownFields = builder.getUnknownFields();
                }

                private HumanTaskNode(boolean noInit) {
                    this.unknownFields = UnknownFieldSet.getDefaultInstance();
                }

                private static final JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode defaultInstance;

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode getDefaultInstance() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.defaultInstance;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.defaultInstance;
                }

                private final UnknownFieldSet unknownFields;

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.this.unknownFields;
                }

                private HumanTaskNode(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    initFields();
                    int mutable_bitField0_ = 0;
                    UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0 :
                                    done = true;
                                    break;
                                default :
                                    {
                                        if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                            done = true;
                                        } 
                                        break;
                                    }
                                case 8 :
                                    {
                                        bitField0_ |= 1;
                                        workItemId_ = input.readInt64();
                                        break;
                                    }
                                case 16 :
                                    {
                                        if (!((mutable_bitField0_ & 2) == 2)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 2;
                                        } 
                                        timerInstanceId_.add(input.readInt64());
                                        break;
                                    }
                                case 18 :
                                    {
                                        int length = input.readRawVarint32();
                                        int limit = input.pushLimit(length);
                                        if ((!((mutable_bitField0_ & 2) == 2)) && ((input.getBytesUntilLimit()) > 0)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 2;
                                        } 
                                        while ((input.getBytesUntilLimit()) > 0) {
                                            timerInstanceId_.add(input.readInt64());
                                        }
                                        input.popLimit(limit);
                                        break;
                                    }
                            }
                        }
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.this);
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.this);
                    } finally {
                        if ((mutable_bitField0_ & 2) == 2) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                        } 
                        this.unknownFields = unknownFields.build();
                        makeExtensionsImmutable();
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_HumanTaskNode_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_HumanTaskNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.class);
                }

                public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode>() {
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode(input, extensionRegistry);
                    }
                };

                @Override
                public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode> getParserForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER;
                }

                private int bitField0_;

                // optional int64 work_item_id = 1;
                public static final int WORK_ITEM_ID_FIELD_NUMBER = 1;

                private long workItemId_;

                /**
                 * <code>optional int64 work_item_id = 1;</code>
                 */
                public boolean hasWorkItemId() {
                    return ((bitField0_) & 1) == 1;
                }

                /**
                 * <code>optional int64 work_item_id = 1;</code>
                 */
                public long getWorkItemId() {
                    return workItemId_;
                }

                // repeated int64 timer_instance_id = 2;
                public static final int TIMER_INSTANCE_ID_FIELD_NUMBER = 2;

                private List<Long> timerInstanceId_;

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                public List<Long> getTimerInstanceIdList() {
                    return timerInstanceId_;
                }

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                public int getTimerInstanceIdCount() {
                    return timerInstanceId_.size();
                }

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                public long getTimerInstanceId(int index) {
                    return timerInstanceId_.get(index);
                }

                private void initFields() {
                    workItemId_ = 0L;
                    timerInstanceId_ = Collections.emptyList();
                }

                private byte memoizedIsInitialized = -1;

                public final boolean isInitialized() {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized != (-1))
                        return isInitialized == 1;
                    
                    memoizedIsInitialized = 1;
                    return true;
                }

                public void writeTo(CodedOutputStream output) throws IOException {
                    getSerializedSize();
                    if (((bitField0_) & 1) == 1) {
                        output.writeInt64(1, workItemId_);
                    } 
                    for (int i = 0; i < (timerInstanceId_.size()); i++) {
                        output.writeInt64(2, timerInstanceId_.get(i));
                    }
                    getUnknownFields().writeTo(output);
                }

                private int memoizedSerializedSize = -1;

                public int getSerializedSize() {
                    int size = memoizedSerializedSize;
                    if (size != (-1))
                        return size;
                    
                    size = 0;
                    if (((bitField0_) & 1) == 1) {
                        size += CodedOutputStream.computeInt64Size(1, workItemId_);
                    } 
                    {
                        int dataSize = 0;
                        for (int i = 0; i < (timerInstanceId_.size()); i++) {
                            dataSize += CodedOutputStream.computeInt64SizeNoTag(timerInstanceId_.get(i));
                        }
                        size += dataSize;
                        size += 1 * (getTimerInstanceIdList().size());
                    }
                    size += getUnknownFields().getSerializedSize();
                    memoizedSerializedSize = size;
                    return size;
                }

                private static final long serialVersionUID = 0L;

                @Override
                protected Object writeReplace() throws ObjectStreamException {
                    return super.writeReplace();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode parseFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode parseDelimitedFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER.parseDelimitedFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER.parseDelimitedFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode parseFrom(CodedInputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder newBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.create();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder newBuilderForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.newBuilder();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode prototype) {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.newBuilder().mergeFrom(prototype);
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder toBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.this);
                }

                @Override
                protected JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                    JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder(parent);
                    return builder;
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode}
                 */
                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode)
                public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNodeOrBuilder {
                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_HumanTaskNode_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_HumanTaskNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.class);
                    }

                    // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.newBuilder()
                    private Builder() {
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessage.BuilderParent parent) {
                        super(parent);
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                        } 
                    }

                    private static JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder create() {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder clear() {
                        super.clear();
                        workItemId_ = 0L;
                        bitField0_ = (bitField0_) & (~1);
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~2);
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder clone() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.create().mergeFrom(buildPartial());
                    }

                    public Descriptors.Descriptor getDescriptorForType() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_HumanTaskNode_descriptor;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.getDefaultInstance();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode build() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode result = buildPartial();
                        if (!(result.isInitialized())) {
                            throw AbstractMessage.Builder.newUninitializedMessageException(result);
                        } 
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode buildPartial() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode result = new JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode(JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this);
                        int from_bitField0_ = bitField0_;
                        int to_bitField0_ = 0;
                        if ((from_bitField0_ & 1) == 1) {
                            to_bitField0_ |= 1;
                        } 
                        result.workItemId_ = workItemId_;
                        if (((bitField0_) & 2) == 2) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                            bitField0_ = (bitField0_) & (~2);
                        } 
                        result.timerInstanceId_ = timerInstanceId_;
                        result.bitField0_ = to_bitField0_;
                        onBuilt();
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder mergeFrom(Message other) {
                        if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode) {
                            return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode) (other)));
                        } else {
                            super.mergeFrom(other);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this;
                        }
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode other) {
                        if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.getDefaultInstance()))
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this;
                        
                        if (other.hasWorkItemId()) {
                            setWorkItemId(other.getWorkItemId());
                        } 
                        if (!(other.timerInstanceId_.isEmpty())) {
                            if (timerInstanceId_.isEmpty()) {
                                timerInstanceId_ = other.timerInstanceId_;
                                bitField0_ = (bitField0_) & (~2);
                            } else {
                                ensureTimerInstanceIdIsMutable();
                                timerInstanceId_.addAll(other.timerInstanceId_);
                            }
                            onChanged();
                        } 
                        JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this.mergeUnknownFields(other.getUnknownFields());
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this;
                    }

                    public final boolean isInitialized() {
                        return true;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode parsedMessage = null;
                        try {
                            parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.PARSER.parsePartialFrom(input, extensionRegistry);
                        } catch (InvalidProtocolBufferException e) {
                            parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode) (e.getUnfinishedMessage()));
                            throw e;
                        } finally {
                            if (parsedMessage != null) {
                                mergeFrom(parsedMessage);
                            } 
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this;
                    }

                    private int bitField0_;

                    // optional int64 work_item_id = 1;
                    private long workItemId_;

                    /**
                     * <code>optional int64 work_item_id = 1;</code>
                     */
                    public boolean hasWorkItemId() {
                        return ((bitField0_) & 1) == 1;
                    }

                    /**
                     * <code>optional int64 work_item_id = 1;</code>
                     */
                    public long getWorkItemId() {
                        return workItemId_;
                    }

                    /**
                     * <code>optional int64 work_item_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder setWorkItemId(long value) {
                        bitField0_ |= 1;
                        workItemId_ = value;
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this;
                    }

                    /**
                     * <code>optional int64 work_item_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder clearWorkItemId() {
                        bitField0_ = (bitField0_) & (~1);
                        workItemId_ = 0L;
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this;
                    }

                    // repeated int64 timer_instance_id = 2;
                    private List<Long> timerInstanceId_ = Collections.emptyList();

                    private void ensureTimerInstanceIdIsMutable() {
                        if (!(((bitField0_) & 2) == 2)) {
                            timerInstanceId_ = new ArrayList<Long>(timerInstanceId_);
                            bitField0_ |= 2;
                        } 
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public List<Long> getTimerInstanceIdList() {
                        return Collections.unmodifiableList(timerInstanceId_);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public int getTimerInstanceIdCount() {
                        return timerInstanceId_.size();
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public long getTimerInstanceId(int index) {
                        return timerInstanceId_.get(index);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder setTimerInstanceId(int index, long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.set(index, value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder addTimerInstanceId(long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.add(value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder addAllTimerInstanceId(Iterable<? extends Long> values) {
                        ensureTimerInstanceIdIsMutable();
                        super.addAll(values, timerInstanceId_);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder clearTimerInstanceId() {
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~2);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder.this;
                    }

                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode)
                }

                static {
                    defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode(true);
                    JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.defaultInstance.initFields();
                }

                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode)
            }

            public interface WorkItemNodeOrBuilder extends MessageOrBuilder {
                // optional int64 work_item_id = 1;
                /**
                 * <code>optional int64 work_item_id = 1;</code>
                 */
                boolean hasWorkItemId();

                /**
                 * <code>optional int64 work_item_id = 1;</code>
                 */
                long getWorkItemId();

                // repeated int64 timer_instance_id = 2;
                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                List<Long> getTimerInstanceIdList();

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                int getTimerInstanceIdCount();

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                long getTimerInstanceId(int index);
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode}
             */
            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode)
            public static final class WorkItemNode extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNodeOrBuilder {
                // Use WorkItemNode.newBuilder() to construct.
                private WorkItemNode(GeneratedMessage.Builder<?> builder) {
                    super(builder);
                    this.unknownFields = builder.getUnknownFields();
                }

                private WorkItemNode(boolean noInit) {
                    this.unknownFields = UnknownFieldSet.getDefaultInstance();
                }

                private static final JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode defaultInstance;

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode getDefaultInstance() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.defaultInstance;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.defaultInstance;
                }

                private final UnknownFieldSet unknownFields;

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.this.unknownFields;
                }

                private WorkItemNode(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    initFields();
                    int mutable_bitField0_ = 0;
                    UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0 :
                                    done = true;
                                    break;
                                default :
                                    {
                                        if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                            done = true;
                                        } 
                                        break;
                                    }
                                case 8 :
                                    {
                                        bitField0_ |= 1;
                                        workItemId_ = input.readInt64();
                                        break;
                                    }
                                case 16 :
                                    {
                                        if (!((mutable_bitField0_ & 2) == 2)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 2;
                                        } 
                                        timerInstanceId_.add(input.readInt64());
                                        break;
                                    }
                                case 18 :
                                    {
                                        int length = input.readRawVarint32();
                                        int limit = input.pushLimit(length);
                                        if ((!((mutable_bitField0_ & 2) == 2)) && ((input.getBytesUntilLimit()) > 0)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 2;
                                        } 
                                        while ((input.getBytesUntilLimit()) > 0) {
                                            timerInstanceId_.add(input.readInt64());
                                        }
                                        input.popLimit(limit);
                                        break;
                                    }
                            }
                        }
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.this);
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.this);
                    } finally {
                        if ((mutable_bitField0_ & 2) == 2) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                        } 
                        this.unknownFields = unknownFields.build();
                        makeExtensionsImmutable();
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_WorkItemNode_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_WorkItemNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.class);
                }

                public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode>() {
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode(input, extensionRegistry);
                    }
                };

                @Override
                public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode> getParserForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER;
                }

                private int bitField0_;

                // optional int64 work_item_id = 1;
                public static final int WORK_ITEM_ID_FIELD_NUMBER = 1;

                private long workItemId_;

                /**
                 * <code>optional int64 work_item_id = 1;</code>
                 */
                public boolean hasWorkItemId() {
                    return ((bitField0_) & 1) == 1;
                }

                /**
                 * <code>optional int64 work_item_id = 1;</code>
                 */
                public long getWorkItemId() {
                    return workItemId_;
                }

                // repeated int64 timer_instance_id = 2;
                public static final int TIMER_INSTANCE_ID_FIELD_NUMBER = 2;

                private List<Long> timerInstanceId_;

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                public List<Long> getTimerInstanceIdList() {
                    return timerInstanceId_;
                }

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                public int getTimerInstanceIdCount() {
                    return timerInstanceId_.size();
                }

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                public long getTimerInstanceId(int index) {
                    return timerInstanceId_.get(index);
                }

                private void initFields() {
                    workItemId_ = 0L;
                    timerInstanceId_ = Collections.emptyList();
                }

                private byte memoizedIsInitialized = -1;

                public final boolean isInitialized() {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized != (-1))
                        return isInitialized == 1;
                    
                    memoizedIsInitialized = 1;
                    return true;
                }

                public void writeTo(CodedOutputStream output) throws IOException {
                    getSerializedSize();
                    if (((bitField0_) & 1) == 1) {
                        output.writeInt64(1, workItemId_);
                    } 
                    for (int i = 0; i < (timerInstanceId_.size()); i++) {
                        output.writeInt64(2, timerInstanceId_.get(i));
                    }
                    getUnknownFields().writeTo(output);
                }

                private int memoizedSerializedSize = -1;

                public int getSerializedSize() {
                    int size = memoizedSerializedSize;
                    if (size != (-1))
                        return size;
                    
                    size = 0;
                    if (((bitField0_) & 1) == 1) {
                        size += CodedOutputStream.computeInt64Size(1, workItemId_);
                    } 
                    {
                        int dataSize = 0;
                        for (int i = 0; i < (timerInstanceId_.size()); i++) {
                            dataSize += CodedOutputStream.computeInt64SizeNoTag(timerInstanceId_.get(i));
                        }
                        size += dataSize;
                        size += 1 * (getTimerInstanceIdList().size());
                    }
                    size += getUnknownFields().getSerializedSize();
                    memoizedSerializedSize = size;
                    return size;
                }

                private static final long serialVersionUID = 0L;

                @Override
                protected Object writeReplace() throws ObjectStreamException {
                    return super.writeReplace();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode parseFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode parseDelimitedFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER.parseDelimitedFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER.parseDelimitedFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode parseFrom(CodedInputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder newBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.create();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder newBuilderForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.newBuilder();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode prototype) {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.newBuilder().mergeFrom(prototype);
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder toBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.this);
                }

                @Override
                protected JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                    JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder(parent);
                    return builder;
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode}
                 */
                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode)
                public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNodeOrBuilder {
                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_WorkItemNode_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_WorkItemNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.class);
                    }

                    // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.newBuilder()
                    private Builder() {
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessage.BuilderParent parent) {
                        super(parent);
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                        } 
                    }

                    private static JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder create() {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder clear() {
                        super.clear();
                        workItemId_ = 0L;
                        bitField0_ = (bitField0_) & (~1);
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~2);
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder clone() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.create().mergeFrom(buildPartial());
                    }

                    public Descriptors.Descriptor getDescriptorForType() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_WorkItemNode_descriptor;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.getDefaultInstance();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode build() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode result = buildPartial();
                        if (!(result.isInitialized())) {
                            throw AbstractMessage.Builder.newUninitializedMessageException(result);
                        } 
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode buildPartial() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode result = new JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode(JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this);
                        int from_bitField0_ = bitField0_;
                        int to_bitField0_ = 0;
                        if ((from_bitField0_ & 1) == 1) {
                            to_bitField0_ |= 1;
                        } 
                        result.workItemId_ = workItemId_;
                        if (((bitField0_) & 2) == 2) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                            bitField0_ = (bitField0_) & (~2);
                        } 
                        result.timerInstanceId_ = timerInstanceId_;
                        result.bitField0_ = to_bitField0_;
                        onBuilt();
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder mergeFrom(Message other) {
                        if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode) {
                            return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode) (other)));
                        } else {
                            super.mergeFrom(other);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this;
                        }
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode other) {
                        if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.getDefaultInstance()))
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this;
                        
                        if (other.hasWorkItemId()) {
                            setWorkItemId(other.getWorkItemId());
                        } 
                        if (!(other.timerInstanceId_.isEmpty())) {
                            if (timerInstanceId_.isEmpty()) {
                                timerInstanceId_ = other.timerInstanceId_;
                                bitField0_ = (bitField0_) & (~2);
                            } else {
                                ensureTimerInstanceIdIsMutable();
                                timerInstanceId_.addAll(other.timerInstanceId_);
                            }
                            onChanged();
                        } 
                        JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this.mergeUnknownFields(other.getUnknownFields());
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this;
                    }

                    public final boolean isInitialized() {
                        return true;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode parsedMessage = null;
                        try {
                            parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.PARSER.parsePartialFrom(input, extensionRegistry);
                        } catch (InvalidProtocolBufferException e) {
                            parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode) (e.getUnfinishedMessage()));
                            throw e;
                        } finally {
                            if (parsedMessage != null) {
                                mergeFrom(parsedMessage);
                            } 
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this;
                    }

                    private int bitField0_;

                    // optional int64 work_item_id = 1;
                    private long workItemId_;

                    /**
                     * <code>optional int64 work_item_id = 1;</code>
                     */
                    public boolean hasWorkItemId() {
                        return ((bitField0_) & 1) == 1;
                    }

                    /**
                     * <code>optional int64 work_item_id = 1;</code>
                     */
                    public long getWorkItemId() {
                        return workItemId_;
                    }

                    /**
                     * <code>optional int64 work_item_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder setWorkItemId(long value) {
                        bitField0_ |= 1;
                        workItemId_ = value;
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this;
                    }

                    /**
                     * <code>optional int64 work_item_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder clearWorkItemId() {
                        bitField0_ = (bitField0_) & (~1);
                        workItemId_ = 0L;
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this;
                    }

                    // repeated int64 timer_instance_id = 2;
                    private List<Long> timerInstanceId_ = Collections.emptyList();

                    private void ensureTimerInstanceIdIsMutable() {
                        if (!(((bitField0_) & 2) == 2)) {
                            timerInstanceId_ = new ArrayList<Long>(timerInstanceId_);
                            bitField0_ |= 2;
                        } 
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public List<Long> getTimerInstanceIdList() {
                        return Collections.unmodifiableList(timerInstanceId_);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public int getTimerInstanceIdCount() {
                        return timerInstanceId_.size();
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public long getTimerInstanceId(int index) {
                        return timerInstanceId_.get(index);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder setTimerInstanceId(int index, long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.set(index, value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder addTimerInstanceId(long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.add(value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder addAllTimerInstanceId(Iterable<? extends Long> values) {
                        ensureTimerInstanceIdIsMutable();
                        super.addAll(values, timerInstanceId_);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder clearTimerInstanceId() {
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~2);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder.this;
                    }

                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode)
                }

                static {
                    defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode(true);
                    JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.defaultInstance.initFields();
                }

                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode)
            }

            public interface SubProcessNodeOrBuilder extends MessageOrBuilder {
                // optional int64 process_instance_id = 1;
                /**
                 * <code>optional int64 process_instance_id = 1;</code>
                 */
                boolean hasProcessInstanceId();

                /**
                 * <code>optional int64 process_instance_id = 1;</code>
                 */
                long getProcessInstanceId();

                // repeated int64 timer_instance_id = 2;
                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                List<Long> getTimerInstanceIdList();

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                int getTimerInstanceIdCount();

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                long getTimerInstanceId(int index);
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode}
             */
            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode)
            public static final class SubProcessNode extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNodeOrBuilder {
                // Use SubProcessNode.newBuilder() to construct.
                private SubProcessNode(GeneratedMessage.Builder<?> builder) {
                    super(builder);
                    this.unknownFields = builder.getUnknownFields();
                }

                private SubProcessNode(boolean noInit) {
                    this.unknownFields = UnknownFieldSet.getDefaultInstance();
                }

                private static final JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode defaultInstance;

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode getDefaultInstance() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.defaultInstance;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.defaultInstance;
                }

                private final UnknownFieldSet unknownFields;

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.this.unknownFields;
                }

                private SubProcessNode(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    initFields();
                    int mutable_bitField0_ = 0;
                    UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0 :
                                    done = true;
                                    break;
                                default :
                                    {
                                        if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                            done = true;
                                        } 
                                        break;
                                    }
                                case 8 :
                                    {
                                        bitField0_ |= 1;
                                        processInstanceId_ = input.readInt64();
                                        break;
                                    }
                                case 16 :
                                    {
                                        if (!((mutable_bitField0_ & 2) == 2)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 2;
                                        } 
                                        timerInstanceId_.add(input.readInt64());
                                        break;
                                    }
                                case 18 :
                                    {
                                        int length = input.readRawVarint32();
                                        int limit = input.pushLimit(length);
                                        if ((!((mutable_bitField0_ & 2) == 2)) && ((input.getBytesUntilLimit()) > 0)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 2;
                                        } 
                                        while ((input.getBytesUntilLimit()) > 0) {
                                            timerInstanceId_.add(input.readInt64());
                                        }
                                        input.popLimit(limit);
                                        break;
                                    }
                            }
                        }
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.this);
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.this);
                    } finally {
                        if ((mutable_bitField0_ & 2) == 2) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                        } 
                        this.unknownFields = unknownFields.build();
                        makeExtensionsImmutable();
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_SubProcessNode_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_SubProcessNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.class);
                }

                public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode>() {
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode(input, extensionRegistry);
                    }
                };

                @Override
                public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode> getParserForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER;
                }

                private int bitField0_;

                // optional int64 process_instance_id = 1;
                public static final int PROCESS_INSTANCE_ID_FIELD_NUMBER = 1;

                private long processInstanceId_;

                /**
                 * <code>optional int64 process_instance_id = 1;</code>
                 */
                public boolean hasProcessInstanceId() {
                    return ((bitField0_) & 1) == 1;
                }

                /**
                 * <code>optional int64 process_instance_id = 1;</code>
                 */
                public long getProcessInstanceId() {
                    return processInstanceId_;
                }

                // repeated int64 timer_instance_id = 2;
                public static final int TIMER_INSTANCE_ID_FIELD_NUMBER = 2;

                private List<Long> timerInstanceId_;

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                public List<Long> getTimerInstanceIdList() {
                    return timerInstanceId_;
                }

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                public int getTimerInstanceIdCount() {
                    return timerInstanceId_.size();
                }

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                public long getTimerInstanceId(int index) {
                    return timerInstanceId_.get(index);
                }

                private void initFields() {
                    processInstanceId_ = 0L;
                    timerInstanceId_ = Collections.emptyList();
                }

                private byte memoizedIsInitialized = -1;

                public final boolean isInitialized() {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized != (-1))
                        return isInitialized == 1;
                    
                    memoizedIsInitialized = 1;
                    return true;
                }

                public void writeTo(CodedOutputStream output) throws IOException {
                    getSerializedSize();
                    if (((bitField0_) & 1) == 1) {
                        output.writeInt64(1, processInstanceId_);
                    } 
                    for (int i = 0; i < (timerInstanceId_.size()); i++) {
                        output.writeInt64(2, timerInstanceId_.get(i));
                    }
                    getUnknownFields().writeTo(output);
                }

                private int memoizedSerializedSize = -1;

                public int getSerializedSize() {
                    int size = memoizedSerializedSize;
                    if (size != (-1))
                        return size;
                    
                    size = 0;
                    if (((bitField0_) & 1) == 1) {
                        size += CodedOutputStream.computeInt64Size(1, processInstanceId_);
                    } 
                    {
                        int dataSize = 0;
                        for (int i = 0; i < (timerInstanceId_.size()); i++) {
                            dataSize += CodedOutputStream.computeInt64SizeNoTag(timerInstanceId_.get(i));
                        }
                        size += dataSize;
                        size += 1 * (getTimerInstanceIdList().size());
                    }
                    size += getUnknownFields().getSerializedSize();
                    memoizedSerializedSize = size;
                    return size;
                }

                private static final long serialVersionUID = 0L;

                @Override
                protected Object writeReplace() throws ObjectStreamException {
                    return super.writeReplace();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode parseFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode parseDelimitedFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER.parseDelimitedFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER.parseDelimitedFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode parseFrom(CodedInputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder newBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.create();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder newBuilderForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.newBuilder();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode prototype) {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.newBuilder().mergeFrom(prototype);
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder toBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.this);
                }

                @Override
                protected JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                    JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder(parent);
                    return builder;
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode}
                 */
                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode)
                public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNodeOrBuilder {
                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_SubProcessNode_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_SubProcessNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.class);
                    }

                    // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.newBuilder()
                    private Builder() {
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessage.BuilderParent parent) {
                        super(parent);
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                        } 
                    }

                    private static JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder create() {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder clear() {
                        super.clear();
                        processInstanceId_ = 0L;
                        bitField0_ = (bitField0_) & (~1);
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~2);
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder clone() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.create().mergeFrom(buildPartial());
                    }

                    public Descriptors.Descriptor getDescriptorForType() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_SubProcessNode_descriptor;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.getDefaultInstance();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode build() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode result = buildPartial();
                        if (!(result.isInitialized())) {
                            throw AbstractMessage.Builder.newUninitializedMessageException(result);
                        } 
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode buildPartial() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode result = new JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode(JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this);
                        int from_bitField0_ = bitField0_;
                        int to_bitField0_ = 0;
                        if ((from_bitField0_ & 1) == 1) {
                            to_bitField0_ |= 1;
                        } 
                        result.processInstanceId_ = processInstanceId_;
                        if (((bitField0_) & 2) == 2) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                            bitField0_ = (bitField0_) & (~2);
                        } 
                        result.timerInstanceId_ = timerInstanceId_;
                        result.bitField0_ = to_bitField0_;
                        onBuilt();
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder mergeFrom(Message other) {
                        if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode) {
                            return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode) (other)));
                        } else {
                            super.mergeFrom(other);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this;
                        }
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode other) {
                        if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.getDefaultInstance()))
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this;
                        
                        if (other.hasProcessInstanceId()) {
                            setProcessInstanceId(other.getProcessInstanceId());
                        } 
                        if (!(other.timerInstanceId_.isEmpty())) {
                            if (timerInstanceId_.isEmpty()) {
                                timerInstanceId_ = other.timerInstanceId_;
                                bitField0_ = (bitField0_) & (~2);
                            } else {
                                ensureTimerInstanceIdIsMutable();
                                timerInstanceId_.addAll(other.timerInstanceId_);
                            }
                            onChanged();
                        } 
                        JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this.mergeUnknownFields(other.getUnknownFields());
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this;
                    }

                    public final boolean isInitialized() {
                        return true;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode parsedMessage = null;
                        try {
                            parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.PARSER.parsePartialFrom(input, extensionRegistry);
                        } catch (InvalidProtocolBufferException e) {
                            parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode) (e.getUnfinishedMessage()));
                            throw e;
                        } finally {
                            if (parsedMessage != null) {
                                mergeFrom(parsedMessage);
                            } 
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this;
                    }

                    private int bitField0_;

                    // optional int64 process_instance_id = 1;
                    private long processInstanceId_;

                    /**
                     * <code>optional int64 process_instance_id = 1;</code>
                     */
                    public boolean hasProcessInstanceId() {
                        return ((bitField0_) & 1) == 1;
                    }

                    /**
                     * <code>optional int64 process_instance_id = 1;</code>
                     */
                    public long getProcessInstanceId() {
                        return processInstanceId_;
                    }

                    /**
                     * <code>optional int64 process_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder setProcessInstanceId(long value) {
                        bitField0_ |= 1;
                        processInstanceId_ = value;
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this;
                    }

                    /**
                     * <code>optional int64 process_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder clearProcessInstanceId() {
                        bitField0_ = (bitField0_) & (~1);
                        processInstanceId_ = 0L;
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this;
                    }

                    // repeated int64 timer_instance_id = 2;
                    private List<Long> timerInstanceId_ = Collections.emptyList();

                    private void ensureTimerInstanceIdIsMutable() {
                        if (!(((bitField0_) & 2) == 2)) {
                            timerInstanceId_ = new ArrayList<Long>(timerInstanceId_);
                            bitField0_ |= 2;
                        } 
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public List<Long> getTimerInstanceIdList() {
                        return Collections.unmodifiableList(timerInstanceId_);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public int getTimerInstanceIdCount() {
                        return timerInstanceId_.size();
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public long getTimerInstanceId(int index) {
                        return timerInstanceId_.get(index);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder setTimerInstanceId(int index, long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.set(index, value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder addTimerInstanceId(long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.add(value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder addAllTimerInstanceId(Iterable<? extends Long> values) {
                        ensureTimerInstanceIdIsMutable();
                        super.addAll(values, timerInstanceId_);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder clearTimerInstanceId() {
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~2);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder.this;
                    }

                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode)
                }

                static {
                    defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode(true);
                    JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.defaultInstance.initFields();
                }

                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode)
            }

            public interface MilestoneNodeOrBuilder extends MessageOrBuilder {
                // repeated int64 timer_instance_id = 1;
                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                List<Long> getTimerInstanceIdList();

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                int getTimerInstanceIdCount();

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                long getTimerInstanceId(int index);
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode}
             */
            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode)
            public static final class MilestoneNode extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNodeOrBuilder {
                // Use MilestoneNode.newBuilder() to construct.
                private MilestoneNode(GeneratedMessage.Builder<?> builder) {
                    super(builder);
                    this.unknownFields = builder.getUnknownFields();
                }

                private MilestoneNode(boolean noInit) {
                    this.unknownFields = UnknownFieldSet.getDefaultInstance();
                }

                private static final JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode defaultInstance;

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode getDefaultInstance() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.defaultInstance;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.defaultInstance;
                }

                private final UnknownFieldSet unknownFields;

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.this.unknownFields;
                }

                private MilestoneNode(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    initFields();
                    int mutable_bitField0_ = 0;
                    UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0 :
                                    done = true;
                                    break;
                                default :
                                    {
                                        if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                            done = true;
                                        } 
                                        break;
                                    }
                                case 8 :
                                    {
                                        if (!((mutable_bitField0_ & 1) == 1)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 1;
                                        } 
                                        timerInstanceId_.add(input.readInt64());
                                        break;
                                    }
                                case 10 :
                                    {
                                        int length = input.readRawVarint32();
                                        int limit = input.pushLimit(length);
                                        if ((!((mutable_bitField0_ & 1) == 1)) && ((input.getBytesUntilLimit()) > 0)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 1;
                                        } 
                                        while ((input.getBytesUntilLimit()) > 0) {
                                            timerInstanceId_.add(input.readInt64());
                                        }
                                        input.popLimit(limit);
                                        break;
                                    }
                            }
                        }
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.this);
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.this);
                    } finally {
                        if ((mutable_bitField0_ & 1) == 1) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                        } 
                        this.unknownFields = unknownFields.build();
                        makeExtensionsImmutable();
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_MilestoneNode_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_MilestoneNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.class);
                }

                public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode>() {
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode(input, extensionRegistry);
                    }
                };

                @Override
                public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode> getParserForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER;
                }

                // repeated int64 timer_instance_id = 1;
                public static final int TIMER_INSTANCE_ID_FIELD_NUMBER = 1;

                private List<Long> timerInstanceId_;

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                public List<Long> getTimerInstanceIdList() {
                    return timerInstanceId_;
                }

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                public int getTimerInstanceIdCount() {
                    return timerInstanceId_.size();
                }

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                public long getTimerInstanceId(int index) {
                    return timerInstanceId_.get(index);
                }

                private void initFields() {
                    timerInstanceId_ = Collections.emptyList();
                }

                private byte memoizedIsInitialized = -1;

                public final boolean isInitialized() {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized != (-1))
                        return isInitialized == 1;
                    
                    memoizedIsInitialized = 1;
                    return true;
                }

                public void writeTo(CodedOutputStream output) throws IOException {
                    getSerializedSize();
                    for (int i = 0; i < (timerInstanceId_.size()); i++) {
                        output.writeInt64(1, timerInstanceId_.get(i));
                    }
                    getUnknownFields().writeTo(output);
                }

                private int memoizedSerializedSize = -1;

                public int getSerializedSize() {
                    int size = memoizedSerializedSize;
                    if (size != (-1))
                        return size;
                    
                    size = 0;
                    {
                        int dataSize = 0;
                        for (int i = 0; i < (timerInstanceId_.size()); i++) {
                            dataSize += CodedOutputStream.computeInt64SizeNoTag(timerInstanceId_.get(i));
                        }
                        size += dataSize;
                        size += 1 * (getTimerInstanceIdList().size());
                    }
                    size += getUnknownFields().getSerializedSize();
                    memoizedSerializedSize = size;
                    return size;
                }

                private static final long serialVersionUID = 0L;

                @Override
                protected Object writeReplace() throws ObjectStreamException {
                    return super.writeReplace();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode parseFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode parseDelimitedFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER.parseDelimitedFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER.parseDelimitedFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode parseFrom(CodedInputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder newBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.create();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder newBuilderForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.newBuilder();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode prototype) {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.newBuilder().mergeFrom(prototype);
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder toBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.this);
                }

                @Override
                protected JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                    JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder(parent);
                    return builder;
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode}
                 */
                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode)
                public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNodeOrBuilder {
                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_MilestoneNode_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_MilestoneNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.class);
                    }

                    // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.newBuilder()
                    private Builder() {
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessage.BuilderParent parent) {
                        super(parent);
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                        } 
                    }

                    private static JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder create() {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder clear() {
                        super.clear();
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~1);
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.this;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder clone() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.create().mergeFrom(buildPartial());
                    }

                    public Descriptors.Descriptor getDescriptorForType() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_MilestoneNode_descriptor;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.getDefaultInstance();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode build() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode result = buildPartial();
                        if (!(result.isInitialized())) {
                            throw AbstractMessage.Builder.newUninitializedMessageException(result);
                        } 
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode buildPartial() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode result = new JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode(JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.this);
                        int from_bitField0_ = bitField0_;
                        if (((bitField0_) & 1) == 1) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                            bitField0_ = (bitField0_) & (~1);
                        } 
                        result.timerInstanceId_ = timerInstanceId_;
                        onBuilt();
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder mergeFrom(Message other) {
                        if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode) {
                            return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode) (other)));
                        } else {
                            super.mergeFrom(other);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.this;
                        }
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode other) {
                        if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.getDefaultInstance()))
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.this;
                        
                        if (!(other.timerInstanceId_.isEmpty())) {
                            if (timerInstanceId_.isEmpty()) {
                                timerInstanceId_ = other.timerInstanceId_;
                                bitField0_ = (bitField0_) & (~1);
                            } else {
                                ensureTimerInstanceIdIsMutable();
                                timerInstanceId_.addAll(other.timerInstanceId_);
                            }
                            onChanged();
                        } 
                        JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.this.mergeUnknownFields(other.getUnknownFields());
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.this;
                    }

                    public final boolean isInitialized() {
                        return true;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode parsedMessage = null;
                        try {
                            parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.PARSER.parsePartialFrom(input, extensionRegistry);
                        } catch (InvalidProtocolBufferException e) {
                            parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode) (e.getUnfinishedMessage()));
                            throw e;
                        } finally {
                            if (parsedMessage != null) {
                                mergeFrom(parsedMessage);
                            } 
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.this;
                    }

                    private int bitField0_;

                    // repeated int64 timer_instance_id = 1;
                    private List<Long> timerInstanceId_ = Collections.emptyList();

                    private void ensureTimerInstanceIdIsMutable() {
                        if (!(((bitField0_) & 1) == 1)) {
                            timerInstanceId_ = new ArrayList<Long>(timerInstanceId_);
                            bitField0_ |= 1;
                        } 
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public List<Long> getTimerInstanceIdList() {
                        return Collections.unmodifiableList(timerInstanceId_);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public int getTimerInstanceIdCount() {
                        return timerInstanceId_.size();
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public long getTimerInstanceId(int index) {
                        return timerInstanceId_.get(index);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder setTimerInstanceId(int index, long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.set(index, value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder addTimerInstanceId(long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.add(value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder addAllTimerInstanceId(Iterable<? extends Long> values) {
                        ensureTimerInstanceIdIsMutable();
                        super.addAll(values, timerInstanceId_);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder clearTimerInstanceId() {
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~1);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder.this;
                    }

                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode)
                }

                static {
                    defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode(true);
                    JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.defaultInstance.initFields();
                }

                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode)
            }

            public interface EventNodeOrBuilder extends MessageOrBuilder {            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode}
             */
            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode)
            public static final class EventNode extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.EventNodeOrBuilder {
                // Use EventNode.newBuilder() to construct.
                private EventNode(GeneratedMessage.Builder<?> builder) {
                    super(builder);
                    this.unknownFields = builder.getUnknownFields();
                }

                private EventNode(boolean noInit) {
                    this.unknownFields = UnknownFieldSet.getDefaultInstance();
                }

                private static final JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode defaultInstance;

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode getDefaultInstance() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.defaultInstance;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.defaultInstance;
                }

                private final UnknownFieldSet unknownFields;

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.this.unknownFields;
                }

                private EventNode(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    initFields();
                    UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0 :
                                    done = true;
                                    break;
                                default :
                                    {
                                        if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                            done = true;
                                        } 
                                        break;
                                    }
                            }
                        }
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.this);
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.this);
                    } finally {
                        this.unknownFields = unknownFields.build();
                        makeExtensionsImmutable();
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_EventNode_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_EventNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder.class);
                }

                public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode>() {
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode(input, extensionRegistry);
                    }
                };

                @Override
                public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode> getParserForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER;
                }

                private void initFields() {
                }

                private byte memoizedIsInitialized = -1;

                public final boolean isInitialized() {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized != (-1))
                        return isInitialized == 1;
                    
                    memoizedIsInitialized = 1;
                    return true;
                }

                public void writeTo(CodedOutputStream output) throws IOException {
                    getSerializedSize();
                    getUnknownFields().writeTo(output);
                }

                private int memoizedSerializedSize = -1;

                public int getSerializedSize() {
                    int size = memoizedSerializedSize;
                    if (size != (-1))
                        return size;
                    
                    size = 0;
                    size += getUnknownFields().getSerializedSize();
                    memoizedSerializedSize = size;
                    return size;
                }

                private static final long serialVersionUID = 0L;

                @Override
                protected Object writeReplace() throws ObjectStreamException {
                    return super.writeReplace();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode parseFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode parseDelimitedFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER.parseDelimitedFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER.parseDelimitedFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode parseFrom(CodedInputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder newBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder.create();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder newBuilderForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.newBuilder();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode prototype) {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.newBuilder().mergeFrom(prototype);
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder toBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.this);
                }

                @Override
                protected JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                    JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder(parent);
                    return builder;
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode}
                 */
                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode)
                public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.EventNodeOrBuilder {
                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_EventNode_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_EventNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder.class);
                    }

                    // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.newBuilder()
                    private Builder() {
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessage.BuilderParent parent) {
                        super(parent);
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                        } 
                    }

                    private static JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder create() {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder clear() {
                        super.clear();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder.this;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder clone() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder.create().mergeFrom(buildPartial());
                    }

                    public Descriptors.Descriptor getDescriptorForType() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_EventNode_descriptor;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.getDefaultInstance();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode build() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode result = buildPartial();
                        if (!(result.isInitialized())) {
                            throw AbstractMessage.Builder.newUninitializedMessageException(result);
                        } 
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode buildPartial() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode result = new JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode(JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder.this);
                        onBuilt();
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder mergeFrom(Message other) {
                        if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode) {
                            return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode) (other)));
                        } else {
                            super.mergeFrom(other);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder.this;
                        }
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode other) {
                        if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.getDefaultInstance()))
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder.this;
                        
                        JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder.this.mergeUnknownFields(other.getUnknownFields());
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder.this;
                    }

                    public final boolean isInitialized() {
                        return true;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode parsedMessage = null;
                        try {
                            parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.PARSER.parsePartialFrom(input, extensionRegistry);
                        } catch (InvalidProtocolBufferException e) {
                            parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode) (e.getUnfinishedMessage()));
                            throw e;
                        } finally {
                            if (parsedMessage != null) {
                                mergeFrom(parsedMessage);
                            } 
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder.this;
                    }

                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode)
                }

                static {
                    defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode(true);
                    JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.defaultInstance.initFields();
                }

                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode)
            }

            public interface TimerNodeOrBuilder extends MessageOrBuilder {
                // optional int64 timer_id = 1;
                /**
                 * <code>optional int64 timer_id = 1;</code>
                 */
                boolean hasTimerId();

                /**
                 * <code>optional int64 timer_id = 1;</code>
                 */
                long getTimerId();
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode}
             */
            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode)
            public static final class TimerNode extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNodeOrBuilder {
                // Use TimerNode.newBuilder() to construct.
                private TimerNode(GeneratedMessage.Builder<?> builder) {
                    super(builder);
                    this.unknownFields = builder.getUnknownFields();
                }

                private TimerNode(boolean noInit) {
                    this.unknownFields = UnknownFieldSet.getDefaultInstance();
                }

                private static final JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode defaultInstance;

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode getDefaultInstance() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.defaultInstance;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.defaultInstance;
                }

                private final UnknownFieldSet unknownFields;

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.this.unknownFields;
                }

                private TimerNode(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    initFields();
                    int mutable_bitField0_ = 0;
                    UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0 :
                                    done = true;
                                    break;
                                default :
                                    {
                                        if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                            done = true;
                                        } 
                                        break;
                                    }
                                case 8 :
                                    {
                                        bitField0_ |= 1;
                                        timerId_ = input.readInt64();
                                        break;
                                    }
                            }
                        }
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.this);
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.this);
                    } finally {
                        this.unknownFields = unknownFields.build();
                        makeExtensionsImmutable();
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_TimerNode_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_TimerNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.class);
                }

                public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode>() {
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode(input, extensionRegistry);
                    }
                };

                @Override
                public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode> getParserForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER;
                }

                private int bitField0_;

                // optional int64 timer_id = 1;
                public static final int TIMER_ID_FIELD_NUMBER = 1;

                private long timerId_;

                /**
                 * <code>optional int64 timer_id = 1;</code>
                 */
                public boolean hasTimerId() {
                    return ((bitField0_) & 1) == 1;
                }

                /**
                 * <code>optional int64 timer_id = 1;</code>
                 */
                public long getTimerId() {
                    return timerId_;
                }

                private void initFields() {
                    timerId_ = 0L;
                }

                private byte memoizedIsInitialized = -1;

                public final boolean isInitialized() {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized != (-1))
                        return isInitialized == 1;
                    
                    memoizedIsInitialized = 1;
                    return true;
                }

                public void writeTo(CodedOutputStream output) throws IOException {
                    getSerializedSize();
                    if (((bitField0_) & 1) == 1) {
                        output.writeInt64(1, timerId_);
                    } 
                    getUnknownFields().writeTo(output);
                }

                private int memoizedSerializedSize = -1;

                public int getSerializedSize() {
                    int size = memoizedSerializedSize;
                    if (size != (-1))
                        return size;
                    
                    size = 0;
                    if (((bitField0_) & 1) == 1) {
                        size += CodedOutputStream.computeInt64Size(1, timerId_);
                    } 
                    size += getUnknownFields().getSerializedSize();
                    memoizedSerializedSize = size;
                    return size;
                }

                private static final long serialVersionUID = 0L;

                @Override
                protected Object writeReplace() throws ObjectStreamException {
                    return super.writeReplace();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode parseFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode parseDelimitedFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER.parseDelimitedFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER.parseDelimitedFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode parseFrom(CodedInputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder newBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.create();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder newBuilderForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.newBuilder();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode prototype) {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.newBuilder().mergeFrom(prototype);
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder toBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.this);
                }

                @Override
                protected JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                    JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder(parent);
                    return builder;
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode}
                 */
                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode)
                public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNodeOrBuilder {
                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_TimerNode_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_TimerNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.class);
                    }

                    // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.newBuilder()
                    private Builder() {
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessage.BuilderParent parent) {
                        super(parent);
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                        } 
                    }

                    private static JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder create() {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder clear() {
                        super.clear();
                        timerId_ = 0L;
                        bitField0_ = (bitField0_) & (~1);
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.this;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder clone() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.create().mergeFrom(buildPartial());
                    }

                    public Descriptors.Descriptor getDescriptorForType() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_TimerNode_descriptor;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.getDefaultInstance();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode build() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode result = buildPartial();
                        if (!(result.isInitialized())) {
                            throw AbstractMessage.Builder.newUninitializedMessageException(result);
                        } 
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode buildPartial() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode result = new JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode(JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.this);
                        int from_bitField0_ = bitField0_;
                        int to_bitField0_ = 0;
                        if ((from_bitField0_ & 1) == 1) {
                            to_bitField0_ |= 1;
                        } 
                        result.timerId_ = timerId_;
                        result.bitField0_ = to_bitField0_;
                        onBuilt();
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder mergeFrom(Message other) {
                        if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode) {
                            return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode) (other)));
                        } else {
                            super.mergeFrom(other);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.this;
                        }
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode other) {
                        if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.getDefaultInstance()))
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.this;
                        
                        if (other.hasTimerId()) {
                            setTimerId(other.getTimerId());
                        } 
                        JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.this.mergeUnknownFields(other.getUnknownFields());
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.this;
                    }

                    public final boolean isInitialized() {
                        return true;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode parsedMessage = null;
                        try {
                            parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.PARSER.parsePartialFrom(input, extensionRegistry);
                        } catch (InvalidProtocolBufferException e) {
                            parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode) (e.getUnfinishedMessage()));
                            throw e;
                        } finally {
                            if (parsedMessage != null) {
                                mergeFrom(parsedMessage);
                            } 
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.this;
                    }

                    private int bitField0_;

                    // optional int64 timer_id = 1;
                    private long timerId_;

                    /**
                     * <code>optional int64 timer_id = 1;</code>
                     */
                    public boolean hasTimerId() {
                        return ((bitField0_) & 1) == 1;
                    }

                    /**
                     * <code>optional int64 timer_id = 1;</code>
                     */
                    public long getTimerId() {
                        return timerId_;
                    }

                    /**
                     * <code>optional int64 timer_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder setTimerId(long value) {
                        bitField0_ |= 1;
                        timerId_ = value;
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.this;
                    }

                    /**
                     * <code>optional int64 timer_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder clearTimerId() {
                        bitField0_ = (bitField0_) & (~1);
                        timerId_ = 0L;
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder.this;
                    }

                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode)
                }

                static {
                    defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode(true);
                    JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.defaultInstance.initFields();
                }

                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode)
            }

            public interface JoinNodeOrBuilder extends MessageOrBuilder {
                // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;
                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                 */
                List<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger> getTriggerList();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                 */
                JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger getTrigger(int index);

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                 */
                int getTriggerCount();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                 */
                List<? extends JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTriggerOrBuilder> getTriggerOrBuilderList();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                 */
                JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTriggerOrBuilder getTriggerOrBuilder(int index);
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode}
             */
            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode)
            public static final class JoinNode extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNodeOrBuilder {
                // Use JoinNode.newBuilder() to construct.
                private JoinNode(GeneratedMessage.Builder<?> builder) {
                    super(builder);
                    this.unknownFields = builder.getUnknownFields();
                }

                private JoinNode(boolean noInit) {
                    this.unknownFields = UnknownFieldSet.getDefaultInstance();
                }

                private static final JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode defaultInstance;

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode getDefaultInstance() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.defaultInstance;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.defaultInstance;
                }

                private final UnknownFieldSet unknownFields;

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.this.unknownFields;
                }

                private JoinNode(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    initFields();
                    int mutable_bitField0_ = 0;
                    UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0 :
                                    done = true;
                                    break;
                                default :
                                    {
                                        if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                            done = true;
                                        } 
                                        break;
                                    }
                                case 10 :
                                    {
                                        if (!((mutable_bitField0_ & 1) == 1)) {
                                            trigger_ = new ArrayList<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger>();
                                            mutable_bitField0_ |= 1;
                                        } 
                                        trigger_.add(input.readMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER, extensionRegistry));
                                        break;
                                    }
                            }
                        }
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.this);
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.this);
                    } finally {
                        if ((mutable_bitField0_ & 1) == 1) {
                            trigger_ = Collections.unmodifiableList(trigger_);
                        } 
                        this.unknownFields = unknownFields.build();
                        makeExtensionsImmutable();
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.class);
                }

                public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode>() {
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode(input, extensionRegistry);
                    }
                };

                @Override
                public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode> getParserForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER;
                }

                public interface JoinTriggerOrBuilder extends MessageOrBuilder {
                    // optional int64 node_id = 1;
                    /**
                     * <code>optional int64 node_id = 1;</code>
                     */
                    boolean hasNodeId();

                    /**
                     * <code>optional int64 node_id = 1;</code>
                     */
                    long getNodeId();

                    // optional int32 counter = 2;
                    /**
                     * <code>optional int32 counter = 2;</code>
                     */
                    boolean hasCounter();

                    /**
                     * <code>optional int32 counter = 2;</code>
                     */
                    int getCounter();
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger}
                 */
                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger)
                public static final class JoinTrigger extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTriggerOrBuilder {
                    // Use JoinTrigger.newBuilder() to construct.
                    private JoinTrigger(GeneratedMessage.Builder<?> builder) {
                        super(builder);
                        this.unknownFields = builder.getUnknownFields();
                    }

                    private JoinTrigger(boolean noInit) {
                        this.unknownFields = UnknownFieldSet.getDefaultInstance();
                    }

                    private static final JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger defaultInstance;

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger getDefaultInstance() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.defaultInstance;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.defaultInstance;
                    }

                    private final UnknownFieldSet unknownFields;

                    @Override
                    public final UnknownFieldSet getUnknownFields() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.this.unknownFields;
                    }

                    private JoinTrigger(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        initFields();
                        int mutable_bitField0_ = 0;
                        UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                        try {
                            boolean done = false;
                            while (!done) {
                                int tag = input.readTag();
                                switch (tag) {
                                    case 0 :
                                        done = true;
                                        break;
                                    default :
                                        {
                                            if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                                done = true;
                                            } 
                                            break;
                                        }
                                    case 8 :
                                        {
                                            bitField0_ |= 1;
                                            nodeId_ = input.readInt64();
                                            break;
                                        }
                                    case 16 :
                                        {
                                            bitField0_ |= 2;
                                            counter_ = input.readInt32();
                                            break;
                                        }
                                }
                            }
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.this);
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.this);
                        } finally {
                            this.unknownFields = unknownFields.build();
                            makeExtensionsImmutable();
                        }
                    }

                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_JoinTrigger_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_JoinTrigger_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.class, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.class);
                    }

                    public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger>() {
                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                            return new JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger(input, extensionRegistry);
                        }
                    };

                    @Override
                    public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger> getParserForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER;
                    }

                    private int bitField0_;

                    // optional int64 node_id = 1;
                    public static final int NODE_ID_FIELD_NUMBER = 1;

                    private long nodeId_;

                    /**
                     * <code>optional int64 node_id = 1;</code>
                     */
                    public boolean hasNodeId() {
                        return ((bitField0_) & 1) == 1;
                    }

                    /**
                     * <code>optional int64 node_id = 1;</code>
                     */
                    public long getNodeId() {
                        return nodeId_;
                    }

                    // optional int32 counter = 2;
                    public static final int COUNTER_FIELD_NUMBER = 2;

                    private int counter_;

                    /**
                     * <code>optional int32 counter = 2;</code>
                     */
                    public boolean hasCounter() {
                        return ((bitField0_) & 2) == 2;
                    }

                    /**
                     * <code>optional int32 counter = 2;</code>
                     */
                    public int getCounter() {
                        return counter_;
                    }

                    private void initFields() {
                        nodeId_ = 0L;
                        counter_ = 0;
                    }

                    private byte memoizedIsInitialized = -1;

                    public final boolean isInitialized() {
                        byte isInitialized = memoizedIsInitialized;
                        if (isInitialized != (-1))
                            return isInitialized == 1;
                        
                        memoizedIsInitialized = 1;
                        return true;
                    }

                    public void writeTo(CodedOutputStream output) throws IOException {
                        getSerializedSize();
                        if (((bitField0_) & 1) == 1) {
                            output.writeInt64(1, nodeId_);
                        } 
                        if (((bitField0_) & 2) == 2) {
                            output.writeInt32(2, counter_);
                        } 
                        getUnknownFields().writeTo(output);
                    }

                    private int memoizedSerializedSize = -1;

                    public int getSerializedSize() {
                        int size = memoizedSerializedSize;
                        if (size != (-1))
                            return size;
                        
                        size = 0;
                        if (((bitField0_) & 1) == 1) {
                            size += CodedOutputStream.computeInt64Size(1, nodeId_);
                        } 
                        if (((bitField0_) & 2) == 2) {
                            size += CodedOutputStream.computeInt32Size(2, counter_);
                        } 
                        size += getUnknownFields().getSerializedSize();
                        memoizedSerializedSize = size;
                        return size;
                    }

                    private static final long serialVersionUID = 0L;

                    @Override
                    protected Object writeReplace() throws ObjectStreamException {
                        return super.writeReplace();
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger parseFrom(ByteString data) throws InvalidProtocolBufferException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER.parseFrom(data);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER.parseFrom(data, extensionRegistry);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger parseFrom(byte[] data) throws InvalidProtocolBufferException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER.parseFrom(data);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER.parseFrom(data, extensionRegistry);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger parseFrom(InputStream input) throws IOException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER.parseFrom(input);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER.parseFrom(input, extensionRegistry);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger parseDelimitedFrom(InputStream input) throws IOException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER.parseDelimitedFrom(input);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER.parseDelimitedFrom(input, extensionRegistry);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger parseFrom(CodedInputStream input) throws IOException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER.parseFrom(input);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER.parseFrom(input, extensionRegistry);
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder newBuilder() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.create();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder newBuilderForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.newBuilder();
                    }

                    public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger prototype) {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.newBuilder().mergeFrom(prototype);
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder toBuilder() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.this);
                    }

                    @Override
                    protected JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder(parent);
                        return builder;
                    }

                    /**
                     * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger}
                     */
                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger)
                    public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTriggerOrBuilder {
                        public static final Descriptors.Descriptor getDescriptor() {
                            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_JoinTrigger_descriptor;
                        }

                        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_JoinTrigger_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.class, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.class);
                        }

                        // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.newBuilder()
                        private Builder() {
                            maybeForceBuilderInitialization();
                        }

                        private Builder(GeneratedMessage.BuilderParent parent) {
                            super(parent);
                            maybeForceBuilderInitialization();
                        }

                        private void maybeForceBuilderInitialization() {
                            if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                            } 
                        }

                        private static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder create() {
                            return new JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder();
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder clear() {
                            super.clear();
                            nodeId_ = 0L;
                            bitField0_ = (bitField0_) & (~1);
                            counter_ = 0;
                            bitField0_ = (bitField0_) & (~2);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.this;
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder clone() {
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.create().mergeFrom(buildPartial());
                        }

                        public Descriptors.Descriptor getDescriptorForType() {
                            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_JoinTrigger_descriptor;
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger getDefaultInstanceForType() {
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.getDefaultInstance();
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger build() {
                            JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger result = buildPartial();
                            if (!(result.isInitialized())) {
                                throw AbstractMessage.Builder.newUninitializedMessageException(result);
                            } 
                            return result;
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger buildPartial() {
                            JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger result = new JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.this);
                            int from_bitField0_ = bitField0_;
                            int to_bitField0_ = 0;
                            if ((from_bitField0_ & 1) == 1) {
                                to_bitField0_ |= 1;
                            } 
                            result.nodeId_ = nodeId_;
                            if ((from_bitField0_ & 2) == 2) {
                                to_bitField0_ |= 2;
                            } 
                            result.counter_ = counter_;
                            result.bitField0_ = to_bitField0_;
                            onBuilt();
                            return result;
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder mergeFrom(Message other) {
                            if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger) {
                                return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger) (other)));
                            } else {
                                super.mergeFrom(other);
                                return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.this;
                            }
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger other) {
                            if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.getDefaultInstance()))
                                return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.this;
                            
                            if (other.hasNodeId()) {
                                setNodeId(other.getNodeId());
                            } 
                            if (other.hasCounter()) {
                                setCounter(other.getCounter());
                            } 
                            JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.this.mergeUnknownFields(other.getUnknownFields());
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.this;
                        }

                        public final boolean isInitialized() {
                            return true;
                        }

                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                            JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger parsedMessage = null;
                            try {
                                parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.PARSER.parsePartialFrom(input, extensionRegistry);
                            } catch (InvalidProtocolBufferException e) {
                                parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger) (e.getUnfinishedMessage()));
                                throw e;
                            } finally {
                                if (parsedMessage != null) {
                                    mergeFrom(parsedMessage);
                                } 
                            }
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.this;
                        }

                        private int bitField0_;

                        // optional int64 node_id = 1;
                        private long nodeId_;

                        /**
                         * <code>optional int64 node_id = 1;</code>
                         */
                        public boolean hasNodeId() {
                            return ((bitField0_) & 1) == 1;
                        }

                        /**
                         * <code>optional int64 node_id = 1;</code>
                         */
                        public long getNodeId() {
                            return nodeId_;
                        }

                        /**
                         * <code>optional int64 node_id = 1;</code>
                         */
                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder setNodeId(long value) {
                            bitField0_ |= 1;
                            nodeId_ = value;
                            onChanged();
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.this;
                        }

                        /**
                         * <code>optional int64 node_id = 1;</code>
                         */
                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder clearNodeId() {
                            bitField0_ = (bitField0_) & (~1);
                            nodeId_ = 0L;
                            onChanged();
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.this;
                        }

                        // optional int32 counter = 2;
                        private int counter_;

                        /**
                         * <code>optional int32 counter = 2;</code>
                         */
                        public boolean hasCounter() {
                            return ((bitField0_) & 2) == 2;
                        }

                        /**
                         * <code>optional int32 counter = 2;</code>
                         */
                        public int getCounter() {
                            return counter_;
                        }

                        /**
                         * <code>optional int32 counter = 2;</code>
                         */
                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder setCounter(int value) {
                            bitField0_ |= 2;
                            counter_ = value;
                            onChanged();
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.this;
                        }

                        /**
                         * <code>optional int32 counter = 2;</code>
                         */
                        public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder clearCounter() {
                            bitField0_ = (bitField0_) & (~2);
                            counter_ = 0;
                            onChanged();
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder.this;
                        }

                        // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger)
                    }

                    static {
                        defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger(true);
                        JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.defaultInstance.initFields();
                    }

                    // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger)
                }

                // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;
                public static final int TRIGGER_FIELD_NUMBER = 1;

                private List<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger> trigger_;

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                 */
                public List<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger> getTriggerList() {
                    return trigger_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                 */
                public List<? extends JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTriggerOrBuilder> getTriggerOrBuilderList() {
                    return trigger_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                 */
                public int getTriggerCount() {
                    return trigger_.size();
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger getTrigger(int index) {
                    return trigger_.get(index);
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTriggerOrBuilder getTriggerOrBuilder(int index) {
                    return trigger_.get(index);
                }

                private void initFields() {
                    trigger_ = Collections.emptyList();
                }

                private byte memoizedIsInitialized = -1;

                public final boolean isInitialized() {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized != (-1))
                        return isInitialized == 1;
                    
                    memoizedIsInitialized = 1;
                    return true;
                }

                public void writeTo(CodedOutputStream output) throws IOException {
                    getSerializedSize();
                    for (int i = 0; i < (trigger_.size()); i++) {
                        output.writeMessage(1, trigger_.get(i));
                    }
                    getUnknownFields().writeTo(output);
                }

                private int memoizedSerializedSize = -1;

                public int getSerializedSize() {
                    int size = memoizedSerializedSize;
                    if (size != (-1))
                        return size;
                    
                    size = 0;
                    for (int i = 0; i < (trigger_.size()); i++) {
                        size += CodedOutputStream.computeMessageSize(1, trigger_.get(i));
                    }
                    size += getUnknownFields().getSerializedSize();
                    memoizedSerializedSize = size;
                    return size;
                }

                private static final long serialVersionUID = 0L;

                @Override
                protected Object writeReplace() throws ObjectStreamException {
                    return super.writeReplace();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode parseFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode parseDelimitedFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER.parseDelimitedFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER.parseDelimitedFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode parseFrom(CodedInputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder newBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.create();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder newBuilderForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.newBuilder();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode prototype) {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.newBuilder().mergeFrom(prototype);
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder toBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.this);
                }

                @Override
                protected JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                    JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder(parent);
                    return builder;
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode}
                 */
                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode)
                public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNodeOrBuilder {
                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.class);
                    }

                    // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.newBuilder()
                    private Builder() {
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessage.BuilderParent parent) {
                        super(parent);
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                            getTriggerFieldBuilder();
                        } 
                    }

                    private static JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder create() {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder clear() {
                        super.clear();
                        if ((triggerBuilder_) == null) {
                            trigger_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~1);
                        } else {
                            triggerBuilder_.clear();
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder clone() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.create().mergeFrom(buildPartial());
                    }

                    public Descriptors.Descriptor getDescriptorForType() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_descriptor;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.getDefaultInstance();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode build() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode result = buildPartial();
                        if (!(result.isInitialized())) {
                            throw AbstractMessage.Builder.newUninitializedMessageException(result);
                        } 
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode buildPartial() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode result = new JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this);
                        int from_bitField0_ = bitField0_;
                        if ((triggerBuilder_) == null) {
                            if (((bitField0_) & 1) == 1) {
                                trigger_ = Collections.unmodifiableList(trigger_);
                                bitField0_ = (bitField0_) & (~1);
                            } 
                            result.trigger_ = trigger_;
                        } else {
                            result.trigger_ = triggerBuilder_.build();
                        }
                        onBuilt();
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder mergeFrom(Message other) {
                        if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode) {
                            return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode) (other)));
                        } else {
                            super.mergeFrom(other);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                        }
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode other) {
                        if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.getDefaultInstance()))
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                        
                        if ((triggerBuilder_) == null) {
                            if (!(other.trigger_.isEmpty())) {
                                if (trigger_.isEmpty()) {
                                    trigger_ = other.trigger_;
                                    bitField0_ = (bitField0_) & (~1);
                                } else {
                                    ensureTriggerIsMutable();
                                    trigger_.addAll(other.trigger_);
                                }
                                onChanged();
                            } 
                        } else {
                            if (!(other.trigger_.isEmpty())) {
                                if (triggerBuilder_.isEmpty()) {
                                    triggerBuilder_.dispose();
                                    triggerBuilder_ = null;
                                    trigger_ = other.trigger_;
                                    bitField0_ = (bitField0_) & (~1);
                                    triggerBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getTriggerFieldBuilder() : null;
                                } else {
                                    triggerBuilder_.addAllMessages(other.trigger_);
                                }
                            } 
                        }
                        JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this.mergeUnknownFields(other.getUnknownFields());
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                    }

                    public final boolean isInitialized() {
                        return true;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode parsedMessage = null;
                        try {
                            parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.PARSER.parsePartialFrom(input, extensionRegistry);
                        } catch (InvalidProtocolBufferException e) {
                            parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode) (e.getUnfinishedMessage()));
                            throw e;
                        } finally {
                            if (parsedMessage != null) {
                                mergeFrom(parsedMessage);
                            } 
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                    }

                    private int bitField0_;

                    // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;
                    private List<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger> trigger_ = Collections.emptyList();

                    private void ensureTriggerIsMutable() {
                        if (!(((bitField0_) & 1) == 1)) {
                            trigger_ = new ArrayList<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger>(trigger_);
                            bitField0_ |= 1;
                        } 
                    }

                    private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTriggerOrBuilder> triggerBuilder_;

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public List<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger> getTriggerList() {
                        if ((triggerBuilder_) == null) {
                            return Collections.unmodifiableList(trigger_);
                        } else {
                            return triggerBuilder_.getMessageList();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public int getTriggerCount() {
                        if ((triggerBuilder_) == null) {
                            return trigger_.size();
                        } else {
                            return triggerBuilder_.getCount();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger getTrigger(int index) {
                        if ((triggerBuilder_) == null) {
                            return trigger_.get(index);
                        } else {
                            return triggerBuilder_.getMessage(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder setTrigger(int index, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger value) {
                        if ((triggerBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureTriggerIsMutable();
                            trigger_.set(index, value);
                            onChanged();
                        } else {
                            triggerBuilder_.setMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder setTrigger(int index, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder builderForValue) {
                        if ((triggerBuilder_) == null) {
                            ensureTriggerIsMutable();
                            trigger_.set(index, builderForValue.build());
                            onChanged();
                        } else {
                            triggerBuilder_.setMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder addTrigger(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger value) {
                        if ((triggerBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureTriggerIsMutable();
                            trigger_.add(value);
                            onChanged();
                        } else {
                            triggerBuilder_.addMessage(value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder addTrigger(int index, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger value) {
                        if ((triggerBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureTriggerIsMutable();
                            trigger_.add(index, value);
                            onChanged();
                        } else {
                            triggerBuilder_.addMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder addTrigger(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder builderForValue) {
                        if ((triggerBuilder_) == null) {
                            ensureTriggerIsMutable();
                            trigger_.add(builderForValue.build());
                            onChanged();
                        } else {
                            triggerBuilder_.addMessage(builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder addTrigger(int index, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder builderForValue) {
                        if ((triggerBuilder_) == null) {
                            ensureTriggerIsMutable();
                            trigger_.add(index, builderForValue.build());
                            onChanged();
                        } else {
                            triggerBuilder_.addMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder addAllTrigger(Iterable<? extends JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger> values) {
                        if ((triggerBuilder_) == null) {
                            ensureTriggerIsMutable();
                            super.addAll(values, trigger_);
                            onChanged();
                        } else {
                            triggerBuilder_.addAllMessages(values);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder clearTrigger() {
                        if ((triggerBuilder_) == null) {
                            trigger_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~1);
                            onChanged();
                        } else {
                            triggerBuilder_.clear();
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder removeTrigger(int index) {
                        if ((triggerBuilder_) == null) {
                            ensureTriggerIsMutable();
                            trigger_.remove(index);
                            onChanged();
                        } else {
                            triggerBuilder_.remove(index);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder getTriggerBuilder(int index) {
                        return getTriggerFieldBuilder().getBuilder(index);
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTriggerOrBuilder getTriggerOrBuilder(int index) {
                        if ((triggerBuilder_) == null) {
                            return trigger_.get(index);
                        } else {
                            return triggerBuilder_.getMessageOrBuilder(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public List<? extends JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTriggerOrBuilder> getTriggerOrBuilderList() {
                        if ((triggerBuilder_) != null) {
                            return triggerBuilder_.getMessageOrBuilderList();
                        } else {
                            return Collections.unmodifiableList(trigger_);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder addTriggerBuilder() {
                        return getTriggerFieldBuilder().addBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder addTriggerBuilder(int index) {
                        return getTriggerFieldBuilder().addBuilder(index, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger trigger = 1;</code>
                     */
                    public List<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder> getTriggerBuilderList() {
                        return getTriggerFieldBuilder().getBuilderList();
                    }

                    private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTriggerOrBuilder> getTriggerFieldBuilder() {
                        if ((triggerBuilder_) == null) {
                            triggerBuilder_ = new RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTrigger.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.JoinTriggerOrBuilder>(trigger_, (((bitField0_) & 1) == 1), getParentForChildren(), isClean());
                            trigger_ = null;
                        } 
                        return triggerBuilder_;
                    }

                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode)
                }

                static {
                    defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode(true);
                    JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.defaultInstance.initFields();
                }

                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode)
            }

            public interface StateNodeOrBuilder extends MessageOrBuilder {
                // repeated int64 timer_instance_id = 1;
                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                List<Long> getTimerInstanceIdList();

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                int getTimerInstanceIdCount();

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                long getTimerInstanceId(int index);
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode}
             */
            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode)
            public static final class StateNode extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.StateNodeOrBuilder {
                // Use StateNode.newBuilder() to construct.
                private StateNode(GeneratedMessage.Builder<?> builder) {
                    super(builder);
                    this.unknownFields = builder.getUnknownFields();
                }

                private StateNode(boolean noInit) {
                    this.unknownFields = UnknownFieldSet.getDefaultInstance();
                }

                private static final JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode defaultInstance;

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode getDefaultInstance() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.defaultInstance;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.defaultInstance;
                }

                private final UnknownFieldSet unknownFields;

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.this.unknownFields;
                }

                private StateNode(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    initFields();
                    int mutable_bitField0_ = 0;
                    UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0 :
                                    done = true;
                                    break;
                                default :
                                    {
                                        if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                            done = true;
                                        } 
                                        break;
                                    }
                                case 8 :
                                    {
                                        if (!((mutable_bitField0_ & 1) == 1)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 1;
                                        } 
                                        timerInstanceId_.add(input.readInt64());
                                        break;
                                    }
                                case 10 :
                                    {
                                        int length = input.readRawVarint32();
                                        int limit = input.pushLimit(length);
                                        if ((!((mutable_bitField0_ & 1) == 1)) && ((input.getBytesUntilLimit()) > 0)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 1;
                                        } 
                                        while ((input.getBytesUntilLimit()) > 0) {
                                            timerInstanceId_.add(input.readInt64());
                                        }
                                        input.popLimit(limit);
                                        break;
                                    }
                            }
                        }
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.this);
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.this);
                    } finally {
                        if ((mutable_bitField0_ & 1) == 1) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                        } 
                        this.unknownFields = unknownFields.build();
                        makeExtensionsImmutable();
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_StateNode_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_StateNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.class);
                }

                public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode>() {
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode(input, extensionRegistry);
                    }
                };

                @Override
                public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode> getParserForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER;
                }

                // repeated int64 timer_instance_id = 1;
                public static final int TIMER_INSTANCE_ID_FIELD_NUMBER = 1;

                private List<Long> timerInstanceId_;

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                public List<Long> getTimerInstanceIdList() {
                    return timerInstanceId_;
                }

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                public int getTimerInstanceIdCount() {
                    return timerInstanceId_.size();
                }

                /**
                 * <code>repeated int64 timer_instance_id = 1;</code>
                 */
                public long getTimerInstanceId(int index) {
                    return timerInstanceId_.get(index);
                }

                private void initFields() {
                    timerInstanceId_ = Collections.emptyList();
                }

                private byte memoizedIsInitialized = -1;

                public final boolean isInitialized() {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized != (-1))
                        return isInitialized == 1;
                    
                    memoizedIsInitialized = 1;
                    return true;
                }

                public void writeTo(CodedOutputStream output) throws IOException {
                    getSerializedSize();
                    for (int i = 0; i < (timerInstanceId_.size()); i++) {
                        output.writeInt64(1, timerInstanceId_.get(i));
                    }
                    getUnknownFields().writeTo(output);
                }

                private int memoizedSerializedSize = -1;

                public int getSerializedSize() {
                    int size = memoizedSerializedSize;
                    if (size != (-1))
                        return size;
                    
                    size = 0;
                    {
                        int dataSize = 0;
                        for (int i = 0; i < (timerInstanceId_.size()); i++) {
                            dataSize += CodedOutputStream.computeInt64SizeNoTag(timerInstanceId_.get(i));
                        }
                        size += dataSize;
                        size += 1 * (getTimerInstanceIdList().size());
                    }
                    size += getUnknownFields().getSerializedSize();
                    memoizedSerializedSize = size;
                    return size;
                }

                private static final long serialVersionUID = 0L;

                @Override
                protected Object writeReplace() throws ObjectStreamException {
                    return super.writeReplace();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode parseFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode parseDelimitedFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER.parseDelimitedFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER.parseDelimitedFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode parseFrom(CodedInputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder newBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.create();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder newBuilderForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.newBuilder();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode prototype) {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.newBuilder().mergeFrom(prototype);
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder toBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.this);
                }

                @Override
                protected JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                    JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder(parent);
                    return builder;
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode}
                 */
                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode)
                public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.StateNodeOrBuilder {
                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_StateNode_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_StateNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.class);
                    }

                    // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.newBuilder()
                    private Builder() {
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessage.BuilderParent parent) {
                        super(parent);
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                        } 
                    }

                    private static JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder create() {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder clear() {
                        super.clear();
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~1);
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.this;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder clone() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.create().mergeFrom(buildPartial());
                    }

                    public Descriptors.Descriptor getDescriptorForType() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_StateNode_descriptor;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.getDefaultInstance();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode build() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode result = buildPartial();
                        if (!(result.isInitialized())) {
                            throw AbstractMessage.Builder.newUninitializedMessageException(result);
                        } 
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode buildPartial() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode result = new JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode(JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.this);
                        int from_bitField0_ = bitField0_;
                        if (((bitField0_) & 1) == 1) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                            bitField0_ = (bitField0_) & (~1);
                        } 
                        result.timerInstanceId_ = timerInstanceId_;
                        onBuilt();
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder mergeFrom(Message other) {
                        if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode) {
                            return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode) (other)));
                        } else {
                            super.mergeFrom(other);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.this;
                        }
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode other) {
                        if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.getDefaultInstance()))
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.this;
                        
                        if (!(other.timerInstanceId_.isEmpty())) {
                            if (timerInstanceId_.isEmpty()) {
                                timerInstanceId_ = other.timerInstanceId_;
                                bitField0_ = (bitField0_) & (~1);
                            } else {
                                ensureTimerInstanceIdIsMutable();
                                timerInstanceId_.addAll(other.timerInstanceId_);
                            }
                            onChanged();
                        } 
                        JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.this.mergeUnknownFields(other.getUnknownFields());
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.this;
                    }

                    public final boolean isInitialized() {
                        return true;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode parsedMessage = null;
                        try {
                            parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.PARSER.parsePartialFrom(input, extensionRegistry);
                        } catch (InvalidProtocolBufferException e) {
                            parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode) (e.getUnfinishedMessage()));
                            throw e;
                        } finally {
                            if (parsedMessage != null) {
                                mergeFrom(parsedMessage);
                            } 
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.this;
                    }

                    private int bitField0_;

                    // repeated int64 timer_instance_id = 1;
                    private List<Long> timerInstanceId_ = Collections.emptyList();

                    private void ensureTimerInstanceIdIsMutable() {
                        if (!(((bitField0_) & 1) == 1)) {
                            timerInstanceId_ = new ArrayList<Long>(timerInstanceId_);
                            bitField0_ |= 1;
                        } 
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public List<Long> getTimerInstanceIdList() {
                        return Collections.unmodifiableList(timerInstanceId_);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public int getTimerInstanceIdCount() {
                        return timerInstanceId_.size();
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public long getTimerInstanceId(int index) {
                        return timerInstanceId_.get(index);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder setTimerInstanceId(int index, long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.set(index, value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder addTimerInstanceId(long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.add(value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder addAllTimerInstanceId(Iterable<? extends Long> values) {
                        ensureTimerInstanceIdIsMutable();
                        super.addAll(values, timerInstanceId_);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder clearTimerInstanceId() {
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~1);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder.this;
                    }

                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode)
                }

                static {
                    defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode(true);
                    JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.defaultInstance.initFields();
                }

                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode)
            }

            public interface CompositeContextNodeOrBuilder extends MessageOrBuilder {
                // repeated int64 timer_instance_id = 2;
                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                List<Long> getTimerInstanceIdList();

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                int getTimerInstanceIdCount();

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                long getTimerInstanceId(int index);

                // repeated .org.jbpm.marshalling.Variable variable = 3;
                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                 */
                List<JBPMMessages.Variable> getVariableList();

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                 */
                JBPMMessages.Variable getVariable(int index);

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                 */
                int getVariableCount();

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                 */
                List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList();

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                 */
                JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index);

                // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;
                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                 */
                List<JBPMMessages.ProcessInstance.NodeInstance> getNodeInstanceList();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                 */
                JBPMMessages.ProcessInstance.NodeInstance getNodeInstance(int index);

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                 */
                int getNodeInstanceCount();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                 */
                List<? extends JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> getNodeInstanceOrBuilderList();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                 */
                JBPMMessages.ProcessInstance.NodeInstanceOrBuilder getNodeInstanceOrBuilder(int index);

                // repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;
                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                 */
                List<JBPMMessages.ProcessInstance.ExclusiveGroupInstance> getExclusiveGroupList();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                 */
                JBPMMessages.ProcessInstance.ExclusiveGroupInstance getExclusiveGroup(int index);

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                 */
                int getExclusiveGroupCount();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                 */
                List<? extends JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder> getExclusiveGroupOrBuilderList();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                 */
                JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder getExclusiveGroupOrBuilder(int index);

                // repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;
                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                 */
                List<JBPMMessages.IterationLevel> getIterationLevelsList();

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                 */
                JBPMMessages.IterationLevel getIterationLevels(int index);

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                 */
                int getIterationLevelsCount();

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                 */
                List<? extends JBPMMessages.IterationLevelOrBuilder> getIterationLevelsOrBuilderList();

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                 */
                JBPMMessages.IterationLevelOrBuilder getIterationLevelsOrBuilder(int index);
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode}
             */
            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode)
            public static final class CompositeContextNode extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNodeOrBuilder {
                // Use CompositeContextNode.newBuilder() to construct.
                private CompositeContextNode(GeneratedMessage.Builder<?> builder) {
                    super(builder);
                    this.unknownFields = builder.getUnknownFields();
                }

                private CompositeContextNode(boolean noInit) {
                    this.unknownFields = UnknownFieldSet.getDefaultInstance();
                }

                private static final JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode defaultInstance;

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode getDefaultInstance() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.defaultInstance;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.defaultInstance;
                }

                private final UnknownFieldSet unknownFields;

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.this.unknownFields;
                }

                private CompositeContextNode(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    initFields();
                    int mutable_bitField0_ = 0;
                    UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0 :
                                    done = true;
                                    break;
                                default :
                                    {
                                        if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                            done = true;
                                        } 
                                        break;
                                    }
                                case 16 :
                                    {
                                        if (!((mutable_bitField0_ & 1) == 1)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 1;
                                        } 
                                        timerInstanceId_.add(input.readInt64());
                                        break;
                                    }
                                case 18 :
                                    {
                                        int length = input.readRawVarint32();
                                        int limit = input.pushLimit(length);
                                        if ((!((mutable_bitField0_ & 1) == 1)) && ((input.getBytesUntilLimit()) > 0)) {
                                            timerInstanceId_ = new ArrayList<Long>();
                                            mutable_bitField0_ |= 1;
                                        } 
                                        while ((input.getBytesUntilLimit()) > 0) {
                                            timerInstanceId_.add(input.readInt64());
                                        }
                                        input.popLimit(limit);
                                        break;
                                    }
                                case 26 :
                                    {
                                        if (!((mutable_bitField0_ & 2) == 2)) {
                                            variable_ = new ArrayList<JBPMMessages.Variable>();
                                            mutable_bitField0_ |= 2;
                                        } 
                                        variable_.add(input.readMessage(JBPMMessages.Variable.PARSER, extensionRegistry));
                                        break;
                                    }
                                case 34 :
                                    {
                                        if (!((mutable_bitField0_ & 4) == 4)) {
                                            nodeInstance_ = new ArrayList<JBPMMessages.ProcessInstance.NodeInstance>();
                                            mutable_bitField0_ |= 4;
                                        } 
                                        nodeInstance_.add(input.readMessage(JBPMMessages.ProcessInstance.NodeInstance.PARSER, extensionRegistry));
                                        break;
                                    }
                                case 42 :
                                    {
                                        if (!((mutable_bitField0_ & 8) == 8)) {
                                            exclusiveGroup_ = new ArrayList<JBPMMessages.ProcessInstance.ExclusiveGroupInstance>();
                                            mutable_bitField0_ |= 8;
                                        } 
                                        exclusiveGroup_.add(input.readMessage(JBPMMessages.ProcessInstance.ExclusiveGroupInstance.PARSER, extensionRegistry));
                                        break;
                                    }
                                case 50 :
                                    {
                                        if (!((mutable_bitField0_ & 16) == 16)) {
                                            iterationLevels_ = new ArrayList<JBPMMessages.IterationLevel>();
                                            mutable_bitField0_ |= 16;
                                        } 
                                        iterationLevels_.add(input.readMessage(JBPMMessages.IterationLevel.PARSER, extensionRegistry));
                                        break;
                                    }
                            }
                        }
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.this);
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.this);
                    } finally {
                        if ((mutable_bitField0_ & 1) == 1) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                        } 
                        if ((mutable_bitField0_ & 2) == 2) {
                            variable_ = Collections.unmodifiableList(variable_);
                        } 
                        if ((mutable_bitField0_ & 4) == 4) {
                            nodeInstance_ = Collections.unmodifiableList(nodeInstance_);
                        } 
                        if ((mutable_bitField0_ & 8) == 8) {
                            exclusiveGroup_ = Collections.unmodifiableList(exclusiveGroup_);
                        } 
                        if ((mutable_bitField0_ & 16) == 16) {
                            iterationLevels_ = Collections.unmodifiableList(iterationLevels_);
                        } 
                        this.unknownFields = unknownFields.build();
                        makeExtensionsImmutable();
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_CompositeContextNode_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_CompositeContextNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.class);
                }

                public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode>() {
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode(input, extensionRegistry);
                    }
                };

                @Override
                public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode> getParserForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER;
                }

                // repeated int64 timer_instance_id = 2;
                public static final int TIMER_INSTANCE_ID_FIELD_NUMBER = 2;

                private List<Long> timerInstanceId_;

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                public List<Long> getTimerInstanceIdList() {
                    return timerInstanceId_;
                }

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                public int getTimerInstanceIdCount() {
                    return timerInstanceId_.size();
                }

                /**
                 * <code>repeated int64 timer_instance_id = 2;</code>
                 */
                public long getTimerInstanceId(int index) {
                    return timerInstanceId_.get(index);
                }

                // repeated .org.jbpm.marshalling.Variable variable = 3;
                public static final int VARIABLE_FIELD_NUMBER = 3;

                private List<JBPMMessages.Variable> variable_;

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                 */
                public List<JBPMMessages.Variable> getVariableList() {
                    return variable_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                 */
                public List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList() {
                    return variable_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                 */
                public int getVariableCount() {
                    return variable_.size();
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                 */
                public JBPMMessages.Variable getVariable(int index) {
                    return variable_.get(index);
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                 */
                public JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index) {
                    return variable_.get(index);
                }

                // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;
                public static final int NODE_INSTANCE_FIELD_NUMBER = 4;

                private List<JBPMMessages.ProcessInstance.NodeInstance> nodeInstance_;

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                 */
                public List<JBPMMessages.ProcessInstance.NodeInstance> getNodeInstanceList() {
                    return nodeInstance_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                 */
                public List<? extends JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> getNodeInstanceOrBuilderList() {
                    return nodeInstance_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                 */
                public int getNodeInstanceCount() {
                    return nodeInstance_.size();
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstance getNodeInstance(int index) {
                    return nodeInstance_.get(index);
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceOrBuilder getNodeInstanceOrBuilder(int index) {
                    return nodeInstance_.get(index);
                }

                // repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;
                public static final int EXCLUSIVE_GROUP_FIELD_NUMBER = 5;

                private List<JBPMMessages.ProcessInstance.ExclusiveGroupInstance> exclusiveGroup_;

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                 */
                public List<JBPMMessages.ProcessInstance.ExclusiveGroupInstance> getExclusiveGroupList() {
                    return exclusiveGroup_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                 */
                public List<? extends JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder> getExclusiveGroupOrBuilderList() {
                    return exclusiveGroup_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                 */
                public int getExclusiveGroupCount() {
                    return exclusiveGroup_.size();
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                 */
                public JBPMMessages.ProcessInstance.ExclusiveGroupInstance getExclusiveGroup(int index) {
                    return exclusiveGroup_.get(index);
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                 */
                public JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder getExclusiveGroupOrBuilder(int index) {
                    return exclusiveGroup_.get(index);
                }

                // repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;
                public static final int ITERATIONLEVELS_FIELD_NUMBER = 6;

                private List<JBPMMessages.IterationLevel> iterationLevels_;

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                 */
                public List<JBPMMessages.IterationLevel> getIterationLevelsList() {
                    return iterationLevels_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                 */
                public List<? extends JBPMMessages.IterationLevelOrBuilder> getIterationLevelsOrBuilderList() {
                    return iterationLevels_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                 */
                public int getIterationLevelsCount() {
                    return iterationLevels_.size();
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                 */
                public JBPMMessages.IterationLevel getIterationLevels(int index) {
                    return iterationLevels_.get(index);
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                 */
                public JBPMMessages.IterationLevelOrBuilder getIterationLevelsOrBuilder(int index) {
                    return iterationLevels_.get(index);
                }

                private void initFields() {
                    timerInstanceId_ = Collections.emptyList();
                    variable_ = Collections.emptyList();
                    nodeInstance_ = Collections.emptyList();
                    exclusiveGroup_ = Collections.emptyList();
                    iterationLevels_ = Collections.emptyList();
                }

                private byte memoizedIsInitialized = -1;

                public final boolean isInitialized() {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized != (-1))
                        return isInitialized == 1;
                    
                    memoizedIsInitialized = 1;
                    return true;
                }

                public void writeTo(CodedOutputStream output) throws IOException {
                    getSerializedSize();
                    for (int i = 0; i < (timerInstanceId_.size()); i++) {
                        output.writeInt64(2, timerInstanceId_.get(i));
                    }
                    for (int i = 0; i < (variable_.size()); i++) {
                        output.writeMessage(3, variable_.get(i));
                    }
                    for (int i = 0; i < (nodeInstance_.size()); i++) {
                        output.writeMessage(4, nodeInstance_.get(i));
                    }
                    for (int i = 0; i < (exclusiveGroup_.size()); i++) {
                        output.writeMessage(5, exclusiveGroup_.get(i));
                    }
                    for (int i = 0; i < (iterationLevels_.size()); i++) {
                        output.writeMessage(6, iterationLevels_.get(i));
                    }
                    getUnknownFields().writeTo(output);
                }

                private int memoizedSerializedSize = -1;

                public int getSerializedSize() {
                    int size = memoizedSerializedSize;
                    if (size != (-1))
                        return size;
                    
                    size = 0;
                    {
                        int dataSize = 0;
                        for (int i = 0; i < (timerInstanceId_.size()); i++) {
                            dataSize += CodedOutputStream.computeInt64SizeNoTag(timerInstanceId_.get(i));
                        }
                        size += dataSize;
                        size += 1 * (getTimerInstanceIdList().size());
                    }
                    for (int i = 0; i < (variable_.size()); i++) {
                        size += CodedOutputStream.computeMessageSize(3, variable_.get(i));
                    }
                    for (int i = 0; i < (nodeInstance_.size()); i++) {
                        size += CodedOutputStream.computeMessageSize(4, nodeInstance_.get(i));
                    }
                    for (int i = 0; i < (exclusiveGroup_.size()); i++) {
                        size += CodedOutputStream.computeMessageSize(5, exclusiveGroup_.get(i));
                    }
                    for (int i = 0; i < (iterationLevels_.size()); i++) {
                        size += CodedOutputStream.computeMessageSize(6, iterationLevels_.get(i));
                    }
                    size += getUnknownFields().getSerializedSize();
                    memoizedSerializedSize = size;
                    return size;
                }

                private static final long serialVersionUID = 0L;

                @Override
                protected Object writeReplace() throws ObjectStreamException {
                    return super.writeReplace();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode parseFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode parseDelimitedFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER.parseDelimitedFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER.parseDelimitedFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode parseFrom(CodedInputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder newBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.create();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder newBuilderForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.newBuilder();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode prototype) {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.newBuilder().mergeFrom(prototype);
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder toBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.this);
                }

                @Override
                protected JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                    JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder(parent);
                    return builder;
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode}
                 */
                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode)
                public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNodeOrBuilder {
                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_CompositeContextNode_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_CompositeContextNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.class);
                    }

                    // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.newBuilder()
                    private Builder() {
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessage.BuilderParent parent) {
                        super(parent);
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                            getVariableFieldBuilder();
                            getNodeInstanceFieldBuilder();
                            getExclusiveGroupFieldBuilder();
                            getIterationLevelsFieldBuilder();
                        } 
                    }

                    private static JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder create() {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder clear() {
                        super.clear();
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~1);
                        if ((variableBuilder_) == null) {
                            variable_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~2);
                        } else {
                            variableBuilder_.clear();
                        }
                        if ((nodeInstanceBuilder_) == null) {
                            nodeInstance_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~4);
                        } else {
                            nodeInstanceBuilder_.clear();
                        }
                        if ((exclusiveGroupBuilder_) == null) {
                            exclusiveGroup_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~8);
                        } else {
                            exclusiveGroupBuilder_.clear();
                        }
                        if ((iterationLevelsBuilder_) == null) {
                            iterationLevels_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~16);
                        } else {
                            iterationLevelsBuilder_.clear();
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder clone() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.create().mergeFrom(buildPartial());
                    }

                    public Descriptors.Descriptor getDescriptorForType() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_CompositeContextNode_descriptor;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.getDefaultInstance();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode build() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode result = buildPartial();
                        if (!(result.isInitialized())) {
                            throw AbstractMessage.Builder.newUninitializedMessageException(result);
                        } 
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode buildPartial() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode result = new JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode(JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this);
                        int from_bitField0_ = bitField0_;
                        if (((bitField0_) & 1) == 1) {
                            timerInstanceId_ = Collections.unmodifiableList(timerInstanceId_);
                            bitField0_ = (bitField0_) & (~1);
                        } 
                        result.timerInstanceId_ = timerInstanceId_;
                        if ((variableBuilder_) == null) {
                            if (((bitField0_) & 2) == 2) {
                                variable_ = Collections.unmodifiableList(variable_);
                                bitField0_ = (bitField0_) & (~2);
                            } 
                            result.variable_ = variable_;
                        } else {
                            result.variable_ = variableBuilder_.build();
                        }
                        if ((nodeInstanceBuilder_) == null) {
                            if (((bitField0_) & 4) == 4) {
                                nodeInstance_ = Collections.unmodifiableList(nodeInstance_);
                                bitField0_ = (bitField0_) & (~4);
                            } 
                            result.nodeInstance_ = nodeInstance_;
                        } else {
                            result.nodeInstance_ = nodeInstanceBuilder_.build();
                        }
                        if ((exclusiveGroupBuilder_) == null) {
                            if (((bitField0_) & 8) == 8) {
                                exclusiveGroup_ = Collections.unmodifiableList(exclusiveGroup_);
                                bitField0_ = (bitField0_) & (~8);
                            } 
                            result.exclusiveGroup_ = exclusiveGroup_;
                        } else {
                            result.exclusiveGroup_ = exclusiveGroupBuilder_.build();
                        }
                        if ((iterationLevelsBuilder_) == null) {
                            if (((bitField0_) & 16) == 16) {
                                iterationLevels_ = Collections.unmodifiableList(iterationLevels_);
                                bitField0_ = (bitField0_) & (~16);
                            } 
                            result.iterationLevels_ = iterationLevels_;
                        } else {
                            result.iterationLevels_ = iterationLevelsBuilder_.build();
                        }
                        onBuilt();
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder mergeFrom(Message other) {
                        if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode) {
                            return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode) (other)));
                        } else {
                            super.mergeFrom(other);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                        }
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode other) {
                        if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.getDefaultInstance()))
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                        
                        if (!(other.timerInstanceId_.isEmpty())) {
                            if (timerInstanceId_.isEmpty()) {
                                timerInstanceId_ = other.timerInstanceId_;
                                bitField0_ = (bitField0_) & (~1);
                            } else {
                                ensureTimerInstanceIdIsMutable();
                                timerInstanceId_.addAll(other.timerInstanceId_);
                            }
                            onChanged();
                        } 
                        if ((variableBuilder_) == null) {
                            if (!(other.variable_.isEmpty())) {
                                if (variable_.isEmpty()) {
                                    variable_ = other.variable_;
                                    bitField0_ = (bitField0_) & (~2);
                                } else {
                                    ensureVariableIsMutable();
                                    variable_.addAll(other.variable_);
                                }
                                onChanged();
                            } 
                        } else {
                            if (!(other.variable_.isEmpty())) {
                                if (variableBuilder_.isEmpty()) {
                                    variableBuilder_.dispose();
                                    variableBuilder_ = null;
                                    variable_ = other.variable_;
                                    bitField0_ = (bitField0_) & (~2);
                                    variableBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getVariableFieldBuilder() : null;
                                } else {
                                    variableBuilder_.addAllMessages(other.variable_);
                                }
                            } 
                        }
                        if ((nodeInstanceBuilder_) == null) {
                            if (!(other.nodeInstance_.isEmpty())) {
                                if (nodeInstance_.isEmpty()) {
                                    nodeInstance_ = other.nodeInstance_;
                                    bitField0_ = (bitField0_) & (~4);
                                } else {
                                    ensureNodeInstanceIsMutable();
                                    nodeInstance_.addAll(other.nodeInstance_);
                                }
                                onChanged();
                            } 
                        } else {
                            if (!(other.nodeInstance_.isEmpty())) {
                                if (nodeInstanceBuilder_.isEmpty()) {
                                    nodeInstanceBuilder_.dispose();
                                    nodeInstanceBuilder_ = null;
                                    nodeInstance_ = other.nodeInstance_;
                                    bitField0_ = (bitField0_) & (~4);
                                    nodeInstanceBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getNodeInstanceFieldBuilder() : null;
                                } else {
                                    nodeInstanceBuilder_.addAllMessages(other.nodeInstance_);
                                }
                            } 
                        }
                        if ((exclusiveGroupBuilder_) == null) {
                            if (!(other.exclusiveGroup_.isEmpty())) {
                                if (exclusiveGroup_.isEmpty()) {
                                    exclusiveGroup_ = other.exclusiveGroup_;
                                    bitField0_ = (bitField0_) & (~8);
                                } else {
                                    ensureExclusiveGroupIsMutable();
                                    exclusiveGroup_.addAll(other.exclusiveGroup_);
                                }
                                onChanged();
                            } 
                        } else {
                            if (!(other.exclusiveGroup_.isEmpty())) {
                                if (exclusiveGroupBuilder_.isEmpty()) {
                                    exclusiveGroupBuilder_.dispose();
                                    exclusiveGroupBuilder_ = null;
                                    exclusiveGroup_ = other.exclusiveGroup_;
                                    bitField0_ = (bitField0_) & (~8);
                                    exclusiveGroupBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getExclusiveGroupFieldBuilder() : null;
                                } else {
                                    exclusiveGroupBuilder_.addAllMessages(other.exclusiveGroup_);
                                }
                            } 
                        }
                        if ((iterationLevelsBuilder_) == null) {
                            if (!(other.iterationLevels_.isEmpty())) {
                                if (iterationLevels_.isEmpty()) {
                                    iterationLevels_ = other.iterationLevels_;
                                    bitField0_ = (bitField0_) & (~16);
                                } else {
                                    ensureIterationLevelsIsMutable();
                                    iterationLevels_.addAll(other.iterationLevels_);
                                }
                                onChanged();
                            } 
                        } else {
                            if (!(other.iterationLevels_.isEmpty())) {
                                if (iterationLevelsBuilder_.isEmpty()) {
                                    iterationLevelsBuilder_.dispose();
                                    iterationLevelsBuilder_ = null;
                                    iterationLevels_ = other.iterationLevels_;
                                    bitField0_ = (bitField0_) & (~16);
                                    iterationLevelsBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getIterationLevelsFieldBuilder() : null;
                                } else {
                                    iterationLevelsBuilder_.addAllMessages(other.iterationLevels_);
                                }
                            } 
                        }
                        JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this.mergeUnknownFields(other.getUnknownFields());
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    public final boolean isInitialized() {
                        return true;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode parsedMessage = null;
                        try {
                            parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.PARSER.parsePartialFrom(input, extensionRegistry);
                        } catch (InvalidProtocolBufferException e) {
                            parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode) (e.getUnfinishedMessage()));
                            throw e;
                        } finally {
                            if (parsedMessage != null) {
                                mergeFrom(parsedMessage);
                            } 
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    private int bitField0_;

                    // repeated int64 timer_instance_id = 2;
                    private List<Long> timerInstanceId_ = Collections.emptyList();

                    private void ensureTimerInstanceIdIsMutable() {
                        if (!(((bitField0_) & 1) == 1)) {
                            timerInstanceId_ = new ArrayList<Long>(timerInstanceId_);
                            bitField0_ |= 1;
                        } 
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public List<Long> getTimerInstanceIdList() {
                        return Collections.unmodifiableList(timerInstanceId_);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public int getTimerInstanceIdCount() {
                        return timerInstanceId_.size();
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public long getTimerInstanceId(int index) {
                        return timerInstanceId_.get(index);
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder setTimerInstanceId(int index, long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.set(index, value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addTimerInstanceId(long value) {
                        ensureTimerInstanceIdIsMutable();
                        timerInstanceId_.add(value);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addAllTimerInstanceId(Iterable<? extends Long> values) {
                        ensureTimerInstanceIdIsMutable();
                        super.addAll(values, timerInstanceId_);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated int64 timer_instance_id = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder clearTimerInstanceId() {
                        timerInstanceId_ = Collections.emptyList();
                        bitField0_ = (bitField0_) & (~1);
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    // repeated .org.jbpm.marshalling.Variable variable = 3;
                    private List<JBPMMessages.Variable> variable_ = Collections.emptyList();

                    private void ensureVariableIsMutable() {
                        if (!(((bitField0_) & 2) == 2)) {
                            variable_ = new ArrayList<JBPMMessages.Variable>(variable_);
                            bitField0_ |= 2;
                        } 
                    }

                    private RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder> variableBuilder_;

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public List<JBPMMessages.Variable> getVariableList() {
                        if ((variableBuilder_) == null) {
                            return Collections.unmodifiableList(variable_);
                        } else {
                            return variableBuilder_.getMessageList();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public int getVariableCount() {
                        if ((variableBuilder_) == null) {
                            return variable_.size();
                        } else {
                            return variableBuilder_.getCount();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.Variable getVariable(int index) {
                        if ((variableBuilder_) == null) {
                            return variable_.get(index);
                        } else {
                            return variableBuilder_.getMessage(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder setVariable(int index, JBPMMessages.Variable value) {
                        if ((variableBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureVariableIsMutable();
                            variable_.set(index, value);
                            onChanged();
                        } else {
                            variableBuilder_.setMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder setVariable(int index, JBPMMessages.Variable.Builder builderForValue) {
                        if ((variableBuilder_) == null) {
                            ensureVariableIsMutable();
                            variable_.set(index, builderForValue.build());
                            onChanged();
                        } else {
                            variableBuilder_.setMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addVariable(JBPMMessages.Variable value) {
                        if ((variableBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureVariableIsMutable();
                            variable_.add(value);
                            onChanged();
                        } else {
                            variableBuilder_.addMessage(value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addVariable(int index, JBPMMessages.Variable value) {
                        if ((variableBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureVariableIsMutable();
                            variable_.add(index, value);
                            onChanged();
                        } else {
                            variableBuilder_.addMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addVariable(JBPMMessages.Variable.Builder builderForValue) {
                        if ((variableBuilder_) == null) {
                            ensureVariableIsMutable();
                            variable_.add(builderForValue.build());
                            onChanged();
                        } else {
                            variableBuilder_.addMessage(builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addVariable(int index, JBPMMessages.Variable.Builder builderForValue) {
                        if ((variableBuilder_) == null) {
                            ensureVariableIsMutable();
                            variable_.add(index, builderForValue.build());
                            onChanged();
                        } else {
                            variableBuilder_.addMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addAllVariable(Iterable<? extends JBPMMessages.Variable> values) {
                        if ((variableBuilder_) == null) {
                            ensureVariableIsMutable();
                            super.addAll(values, variable_);
                            onChanged();
                        } else {
                            variableBuilder_.addAllMessages(values);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder clearVariable() {
                        if ((variableBuilder_) == null) {
                            variable_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~2);
                            onChanged();
                        } else {
                            variableBuilder_.clear();
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder removeVariable(int index) {
                        if ((variableBuilder_) == null) {
                            ensureVariableIsMutable();
                            variable_.remove(index);
                            onChanged();
                        } else {
                            variableBuilder_.remove(index);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.Variable.Builder getVariableBuilder(int index) {
                        return getVariableFieldBuilder().getBuilder(index);
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index) {
                        if ((variableBuilder_) == null) {
                            return variable_.get(index);
                        } else {
                            return variableBuilder_.getMessageOrBuilder(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList() {
                        if ((variableBuilder_) != null) {
                            return variableBuilder_.getMessageOrBuilderList();
                        } else {
                            return Collections.unmodifiableList(variable_);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.Variable.Builder addVariableBuilder() {
                        return getVariableFieldBuilder().addBuilder(JBPMMessages.Variable.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public JBPMMessages.Variable.Builder addVariableBuilder(int index) {
                        return getVariableFieldBuilder().addBuilder(index, JBPMMessages.Variable.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 3;</code>
                     */
                    public List<JBPMMessages.Variable.Builder> getVariableBuilderList() {
                        return getVariableFieldBuilder().getBuilderList();
                    }

                    private RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder> getVariableFieldBuilder() {
                        if ((variableBuilder_) == null) {
                            variableBuilder_ = new RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder>(variable_, (((bitField0_) & 2) == 2), getParentForChildren(), isClean());
                            variable_ = null;
                        } 
                        return variableBuilder_;
                    }

                    // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;
                    private List<JBPMMessages.ProcessInstance.NodeInstance> nodeInstance_ = Collections.emptyList();

                    private void ensureNodeInstanceIsMutable() {
                        if (!(((bitField0_) & 4) == 4)) {
                            nodeInstance_ = new ArrayList<JBPMMessages.ProcessInstance.NodeInstance>(nodeInstance_);
                            bitField0_ |= 4;
                        } 
                    }

                    private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstance, JBPMMessages.ProcessInstance.NodeInstance.Builder, JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> nodeInstanceBuilder_;

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public List<JBPMMessages.ProcessInstance.NodeInstance> getNodeInstanceList() {
                        if ((nodeInstanceBuilder_) == null) {
                            return Collections.unmodifiableList(nodeInstance_);
                        } else {
                            return nodeInstanceBuilder_.getMessageList();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public int getNodeInstanceCount() {
                        if ((nodeInstanceBuilder_) == null) {
                            return nodeInstance_.size();
                        } else {
                            return nodeInstanceBuilder_.getCount();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstance getNodeInstance(int index) {
                        if ((nodeInstanceBuilder_) == null) {
                            return nodeInstance_.get(index);
                        } else {
                            return nodeInstanceBuilder_.getMessage(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder setNodeInstance(int index, JBPMMessages.ProcessInstance.NodeInstance value) {
                        if ((nodeInstanceBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.set(index, value);
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.setMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder setNodeInstance(int index, JBPMMessages.ProcessInstance.NodeInstance.Builder builderForValue) {
                        if ((nodeInstanceBuilder_) == null) {
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.set(index, builderForValue.build());
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.setMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addNodeInstance(JBPMMessages.ProcessInstance.NodeInstance value) {
                        if ((nodeInstanceBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.add(value);
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.addMessage(value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addNodeInstance(int index, JBPMMessages.ProcessInstance.NodeInstance value) {
                        if ((nodeInstanceBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.add(index, value);
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.addMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addNodeInstance(JBPMMessages.ProcessInstance.NodeInstance.Builder builderForValue) {
                        if ((nodeInstanceBuilder_) == null) {
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.add(builderForValue.build());
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.addMessage(builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addNodeInstance(int index, JBPMMessages.ProcessInstance.NodeInstance.Builder builderForValue) {
                        if ((nodeInstanceBuilder_) == null) {
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.add(index, builderForValue.build());
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.addMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addAllNodeInstance(Iterable<? extends JBPMMessages.ProcessInstance.NodeInstance> values) {
                        if ((nodeInstanceBuilder_) == null) {
                            ensureNodeInstanceIsMutable();
                            super.addAll(values, nodeInstance_);
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.addAllMessages(values);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder clearNodeInstance() {
                        if ((nodeInstanceBuilder_) == null) {
                            nodeInstance_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~4);
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.clear();
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder removeNodeInstance(int index) {
                        if ((nodeInstanceBuilder_) == null) {
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.remove(index);
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.remove(index);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstance.Builder getNodeInstanceBuilder(int index) {
                        return getNodeInstanceFieldBuilder().getBuilder(index);
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceOrBuilder getNodeInstanceOrBuilder(int index) {
                        if ((nodeInstanceBuilder_) == null) {
                            return nodeInstance_.get(index);
                        } else {
                            return nodeInstanceBuilder_.getMessageOrBuilder(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public List<? extends JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> getNodeInstanceOrBuilderList() {
                        if ((nodeInstanceBuilder_) != null) {
                            return nodeInstanceBuilder_.getMessageOrBuilderList();
                        } else {
                            return Collections.unmodifiableList(nodeInstance_);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstance.Builder addNodeInstanceBuilder() {
                        return getNodeInstanceFieldBuilder().addBuilder(JBPMMessages.ProcessInstance.NodeInstance.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstance.Builder addNodeInstanceBuilder(int index) {
                        return getNodeInstanceFieldBuilder().addBuilder(index, JBPMMessages.ProcessInstance.NodeInstance.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 4;</code>
                     */
                    public List<JBPMMessages.ProcessInstance.NodeInstance.Builder> getNodeInstanceBuilderList() {
                        return getNodeInstanceFieldBuilder().getBuilderList();
                    }

                    private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstance, JBPMMessages.ProcessInstance.NodeInstance.Builder, JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> getNodeInstanceFieldBuilder() {
                        if ((nodeInstanceBuilder_) == null) {
                            nodeInstanceBuilder_ = new RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstance, JBPMMessages.ProcessInstance.NodeInstance.Builder, JBPMMessages.ProcessInstance.NodeInstanceOrBuilder>(nodeInstance_, (((bitField0_) & 4) == 4), getParentForChildren(), isClean());
                            nodeInstance_ = null;
                        } 
                        return nodeInstanceBuilder_;
                    }

                    // repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;
                    private List<JBPMMessages.ProcessInstance.ExclusiveGroupInstance> exclusiveGroup_ = Collections.emptyList();

                    private void ensureExclusiveGroupIsMutable() {
                        if (!(((bitField0_) & 8) == 8)) {
                            exclusiveGroup_ = new ArrayList<JBPMMessages.ProcessInstance.ExclusiveGroupInstance>(exclusiveGroup_);
                            bitField0_ |= 8;
                        } 
                    }

                    private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.ExclusiveGroupInstance, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder, JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder> exclusiveGroupBuilder_;

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public List<JBPMMessages.ProcessInstance.ExclusiveGroupInstance> getExclusiveGroupList() {
                        if ((exclusiveGroupBuilder_) == null) {
                            return Collections.unmodifiableList(exclusiveGroup_);
                        } else {
                            return exclusiveGroupBuilder_.getMessageList();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public int getExclusiveGroupCount() {
                        if ((exclusiveGroupBuilder_) == null) {
                            return exclusiveGroup_.size();
                        } else {
                            return exclusiveGroupBuilder_.getCount();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.ExclusiveGroupInstance getExclusiveGroup(int index) {
                        if ((exclusiveGroupBuilder_) == null) {
                            return exclusiveGroup_.get(index);
                        } else {
                            return exclusiveGroupBuilder_.getMessage(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder setExclusiveGroup(int index, JBPMMessages.ProcessInstance.ExclusiveGroupInstance value) {
                        if ((exclusiveGroupBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureExclusiveGroupIsMutable();
                            exclusiveGroup_.set(index, value);
                            onChanged();
                        } else {
                            exclusiveGroupBuilder_.setMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder setExclusiveGroup(int index, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder builderForValue) {
                        if ((exclusiveGroupBuilder_) == null) {
                            ensureExclusiveGroupIsMutable();
                            exclusiveGroup_.set(index, builderForValue.build());
                            onChanged();
                        } else {
                            exclusiveGroupBuilder_.setMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addExclusiveGroup(JBPMMessages.ProcessInstance.ExclusiveGroupInstance value) {
                        if ((exclusiveGroupBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureExclusiveGroupIsMutable();
                            exclusiveGroup_.add(value);
                            onChanged();
                        } else {
                            exclusiveGroupBuilder_.addMessage(value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addExclusiveGroup(int index, JBPMMessages.ProcessInstance.ExclusiveGroupInstance value) {
                        if ((exclusiveGroupBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureExclusiveGroupIsMutable();
                            exclusiveGroup_.add(index, value);
                            onChanged();
                        } else {
                            exclusiveGroupBuilder_.addMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addExclusiveGroup(JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder builderForValue) {
                        if ((exclusiveGroupBuilder_) == null) {
                            ensureExclusiveGroupIsMutable();
                            exclusiveGroup_.add(builderForValue.build());
                            onChanged();
                        } else {
                            exclusiveGroupBuilder_.addMessage(builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addExclusiveGroup(int index, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder builderForValue) {
                        if ((exclusiveGroupBuilder_) == null) {
                            ensureExclusiveGroupIsMutable();
                            exclusiveGroup_.add(index, builderForValue.build());
                            onChanged();
                        } else {
                            exclusiveGroupBuilder_.addMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addAllExclusiveGroup(Iterable<? extends JBPMMessages.ProcessInstance.ExclusiveGroupInstance> values) {
                        if ((exclusiveGroupBuilder_) == null) {
                            ensureExclusiveGroupIsMutable();
                            super.addAll(values, exclusiveGroup_);
                            onChanged();
                        } else {
                            exclusiveGroupBuilder_.addAllMessages(values);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder clearExclusiveGroup() {
                        if ((exclusiveGroupBuilder_) == null) {
                            exclusiveGroup_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~8);
                            onChanged();
                        } else {
                            exclusiveGroupBuilder_.clear();
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder removeExclusiveGroup(int index) {
                        if ((exclusiveGroupBuilder_) == null) {
                            ensureExclusiveGroupIsMutable();
                            exclusiveGroup_.remove(index);
                            onChanged();
                        } else {
                            exclusiveGroupBuilder_.remove(index);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder getExclusiveGroupBuilder(int index) {
                        return getExclusiveGroupFieldBuilder().getBuilder(index);
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder getExclusiveGroupOrBuilder(int index) {
                        if ((exclusiveGroupBuilder_) == null) {
                            return exclusiveGroup_.get(index);
                        } else {
                            return exclusiveGroupBuilder_.getMessageOrBuilder(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public List<? extends JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder> getExclusiveGroupOrBuilderList() {
                        if ((exclusiveGroupBuilder_) != null) {
                            return exclusiveGroupBuilder_.getMessageOrBuilderList();
                        } else {
                            return Collections.unmodifiableList(exclusiveGroup_);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder addExclusiveGroupBuilder() {
                        return getExclusiveGroupFieldBuilder().addBuilder(JBPMMessages.ProcessInstance.ExclusiveGroupInstance.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder addExclusiveGroupBuilder(int index) {
                        return getExclusiveGroupFieldBuilder().addBuilder(index, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 5;</code>
                     */
                    public List<JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder> getExclusiveGroupBuilderList() {
                        return getExclusiveGroupFieldBuilder().getBuilderList();
                    }

                    private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.ExclusiveGroupInstance, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder, JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder> getExclusiveGroupFieldBuilder() {
                        if ((exclusiveGroupBuilder_) == null) {
                            exclusiveGroupBuilder_ = new RepeatedFieldBuilder<JBPMMessages.ProcessInstance.ExclusiveGroupInstance, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder, JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder>(exclusiveGroup_, (((bitField0_) & 8) == 8), getParentForChildren(), isClean());
                            exclusiveGroup_ = null;
                        } 
                        return exclusiveGroupBuilder_;
                    }

                    // repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;
                    private List<JBPMMessages.IterationLevel> iterationLevels_ = Collections.emptyList();

                    private void ensureIterationLevelsIsMutable() {
                        if (!(((bitField0_) & 16) == 16)) {
                            iterationLevels_ = new ArrayList<JBPMMessages.IterationLevel>(iterationLevels_);
                            bitField0_ |= 16;
                        } 
                    }

                    private RepeatedFieldBuilder<JBPMMessages.IterationLevel, JBPMMessages.IterationLevel.Builder, JBPMMessages.IterationLevelOrBuilder> iterationLevelsBuilder_;

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public List<JBPMMessages.IterationLevel> getIterationLevelsList() {
                        if ((iterationLevelsBuilder_) == null) {
                            return Collections.unmodifiableList(iterationLevels_);
                        } else {
                            return iterationLevelsBuilder_.getMessageList();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public int getIterationLevelsCount() {
                        if ((iterationLevelsBuilder_) == null) {
                            return iterationLevels_.size();
                        } else {
                            return iterationLevelsBuilder_.getCount();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.IterationLevel getIterationLevels(int index) {
                        if ((iterationLevelsBuilder_) == null) {
                            return iterationLevels_.get(index);
                        } else {
                            return iterationLevelsBuilder_.getMessage(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder setIterationLevels(int index, JBPMMessages.IterationLevel value) {
                        if ((iterationLevelsBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.set(index, value);
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.setMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder setIterationLevels(int index, JBPMMessages.IterationLevel.Builder builderForValue) {
                        if ((iterationLevelsBuilder_) == null) {
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.set(index, builderForValue.build());
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.setMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addIterationLevels(JBPMMessages.IterationLevel value) {
                        if ((iterationLevelsBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.add(value);
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.addMessage(value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addIterationLevels(int index, JBPMMessages.IterationLevel value) {
                        if ((iterationLevelsBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.add(index, value);
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.addMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addIterationLevels(JBPMMessages.IterationLevel.Builder builderForValue) {
                        if ((iterationLevelsBuilder_) == null) {
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.add(builderForValue.build());
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.addMessage(builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addIterationLevels(int index, JBPMMessages.IterationLevel.Builder builderForValue) {
                        if ((iterationLevelsBuilder_) == null) {
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.add(index, builderForValue.build());
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.addMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder addAllIterationLevels(Iterable<? extends JBPMMessages.IterationLevel> values) {
                        if ((iterationLevelsBuilder_) == null) {
                            ensureIterationLevelsIsMutable();
                            super.addAll(values, iterationLevels_);
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.addAllMessages(values);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder clearIterationLevels() {
                        if ((iterationLevelsBuilder_) == null) {
                            iterationLevels_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~16);
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.clear();
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder removeIterationLevels(int index) {
                        if ((iterationLevelsBuilder_) == null) {
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.remove(index);
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.remove(index);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.IterationLevel.Builder getIterationLevelsBuilder(int index) {
                        return getIterationLevelsFieldBuilder().getBuilder(index);
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.IterationLevelOrBuilder getIterationLevelsOrBuilder(int index) {
                        if ((iterationLevelsBuilder_) == null) {
                            return iterationLevels_.get(index);
                        } else {
                            return iterationLevelsBuilder_.getMessageOrBuilder(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public List<? extends JBPMMessages.IterationLevelOrBuilder> getIterationLevelsOrBuilderList() {
                        if ((iterationLevelsBuilder_) != null) {
                            return iterationLevelsBuilder_.getMessageOrBuilderList();
                        } else {
                            return Collections.unmodifiableList(iterationLevels_);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.IterationLevel.Builder addIterationLevelsBuilder() {
                        return getIterationLevelsFieldBuilder().addBuilder(JBPMMessages.IterationLevel.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public JBPMMessages.IterationLevel.Builder addIterationLevelsBuilder(int index) {
                        return getIterationLevelsFieldBuilder().addBuilder(index, JBPMMessages.IterationLevel.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 6;</code>
                     */
                    public List<JBPMMessages.IterationLevel.Builder> getIterationLevelsBuilderList() {
                        return getIterationLevelsFieldBuilder().getBuilderList();
                    }

                    private RepeatedFieldBuilder<JBPMMessages.IterationLevel, JBPMMessages.IterationLevel.Builder, JBPMMessages.IterationLevelOrBuilder> getIterationLevelsFieldBuilder() {
                        if ((iterationLevelsBuilder_) == null) {
                            iterationLevelsBuilder_ = new RepeatedFieldBuilder<JBPMMessages.IterationLevel, JBPMMessages.IterationLevel.Builder, JBPMMessages.IterationLevelOrBuilder>(iterationLevels_, (((bitField0_) & 16) == 16), getParentForChildren(), isClean());
                            iterationLevels_ = null;
                        } 
                        return iterationLevelsBuilder_;
                    }

                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode)
                }

                static {
                    defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode(true);
                    JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.defaultInstance.initFields();
                }

                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode)
            }

            public interface ForEachNodeOrBuilder extends MessageOrBuilder {
                // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;
                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                 */
                List<JBPMMessages.ProcessInstance.NodeInstance> getNodeInstanceList();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                 */
                JBPMMessages.ProcessInstance.NodeInstance getNodeInstance(int index);

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                 */
                int getNodeInstanceCount();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                 */
                List<? extends JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> getNodeInstanceOrBuilderList();

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                 */
                JBPMMessages.ProcessInstance.NodeInstanceOrBuilder getNodeInstanceOrBuilder(int index);

                // repeated .org.jbpm.marshalling.Variable variable = 2;
                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                 */
                List<JBPMMessages.Variable> getVariableList();

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                 */
                JBPMMessages.Variable getVariable(int index);

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                 */
                int getVariableCount();

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                 */
                List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList();

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                 */
                JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index);

                // repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;
                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                 */
                List<JBPMMessages.IterationLevel> getIterationLevelsList();

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                 */
                JBPMMessages.IterationLevel getIterationLevels(int index);

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                 */
                int getIterationLevelsCount();

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                 */
                List<? extends JBPMMessages.IterationLevelOrBuilder> getIterationLevelsOrBuilderList();

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                 */
                JBPMMessages.IterationLevelOrBuilder getIterationLevelsOrBuilder(int index);
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode}
             */
            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode)
            public static final class ForEachNode extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNodeOrBuilder {
                // Use ForEachNode.newBuilder() to construct.
                private ForEachNode(GeneratedMessage.Builder<?> builder) {
                    super(builder);
                    this.unknownFields = builder.getUnknownFields();
                }

                private ForEachNode(boolean noInit) {
                    this.unknownFields = UnknownFieldSet.getDefaultInstance();
                }

                private static final JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode defaultInstance;

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode getDefaultInstance() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.defaultInstance;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.defaultInstance;
                }

                private final UnknownFieldSet unknownFields;

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.this.unknownFields;
                }

                private ForEachNode(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    initFields();
                    int mutable_bitField0_ = 0;
                    UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0 :
                                    done = true;
                                    break;
                                default :
                                    {
                                        if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                            done = true;
                                        } 
                                        break;
                                    }
                                case 10 :
                                    {
                                        if (!((mutable_bitField0_ & 1) == 1)) {
                                            nodeInstance_ = new ArrayList<JBPMMessages.ProcessInstance.NodeInstance>();
                                            mutable_bitField0_ |= 1;
                                        } 
                                        nodeInstance_.add(input.readMessage(JBPMMessages.ProcessInstance.NodeInstance.PARSER, extensionRegistry));
                                        break;
                                    }
                                case 18 :
                                    {
                                        if (!((mutable_bitField0_ & 2) == 2)) {
                                            variable_ = new ArrayList<JBPMMessages.Variable>();
                                            mutable_bitField0_ |= 2;
                                        } 
                                        variable_.add(input.readMessage(JBPMMessages.Variable.PARSER, extensionRegistry));
                                        break;
                                    }
                                case 26 :
                                    {
                                        if (!((mutable_bitField0_ & 4) == 4)) {
                                            iterationLevels_ = new ArrayList<JBPMMessages.IterationLevel>();
                                            mutable_bitField0_ |= 4;
                                        } 
                                        iterationLevels_.add(input.readMessage(JBPMMessages.IterationLevel.PARSER, extensionRegistry));
                                        break;
                                    }
                            }
                        }
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.this);
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.this);
                    } finally {
                        if ((mutable_bitField0_ & 1) == 1) {
                            nodeInstance_ = Collections.unmodifiableList(nodeInstance_);
                        } 
                        if ((mutable_bitField0_ & 2) == 2) {
                            variable_ = Collections.unmodifiableList(variable_);
                        } 
                        if ((mutable_bitField0_ & 4) == 4) {
                            iterationLevels_ = Collections.unmodifiableList(iterationLevels_);
                        } 
                        this.unknownFields = unknownFields.build();
                        makeExtensionsImmutable();
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_ForEachNode_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_ForEachNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.class);
                }

                public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode>() {
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode(input, extensionRegistry);
                    }
                };

                @Override
                public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode> getParserForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER;
                }

                // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;
                public static final int NODE_INSTANCE_FIELD_NUMBER = 1;

                private List<JBPMMessages.ProcessInstance.NodeInstance> nodeInstance_;

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                 */
                public List<JBPMMessages.ProcessInstance.NodeInstance> getNodeInstanceList() {
                    return nodeInstance_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                 */
                public List<? extends JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> getNodeInstanceOrBuilderList() {
                    return nodeInstance_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                 */
                public int getNodeInstanceCount() {
                    return nodeInstance_.size();
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstance getNodeInstance(int index) {
                    return nodeInstance_.get(index);
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceOrBuilder getNodeInstanceOrBuilder(int index) {
                    return nodeInstance_.get(index);
                }

                // repeated .org.jbpm.marshalling.Variable variable = 2;
                public static final int VARIABLE_FIELD_NUMBER = 2;

                private List<JBPMMessages.Variable> variable_;

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                 */
                public List<JBPMMessages.Variable> getVariableList() {
                    return variable_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                 */
                public List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList() {
                    return variable_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                 */
                public int getVariableCount() {
                    return variable_.size();
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                 */
                public JBPMMessages.Variable getVariable(int index) {
                    return variable_.get(index);
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                 */
                public JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index) {
                    return variable_.get(index);
                }

                // repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;
                public static final int ITERATIONLEVELS_FIELD_NUMBER = 3;

                private List<JBPMMessages.IterationLevel> iterationLevels_;

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                 */
                public List<JBPMMessages.IterationLevel> getIterationLevelsList() {
                    return iterationLevels_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                 */
                public List<? extends JBPMMessages.IterationLevelOrBuilder> getIterationLevelsOrBuilderList() {
                    return iterationLevels_;
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                 */
                public int getIterationLevelsCount() {
                    return iterationLevels_.size();
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                 */
                public JBPMMessages.IterationLevel getIterationLevels(int index) {
                    return iterationLevels_.get(index);
                }

                /**
                 * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                 */
                public JBPMMessages.IterationLevelOrBuilder getIterationLevelsOrBuilder(int index) {
                    return iterationLevels_.get(index);
                }

                private void initFields() {
                    nodeInstance_ = Collections.emptyList();
                    variable_ = Collections.emptyList();
                    iterationLevels_ = Collections.emptyList();
                }

                private byte memoizedIsInitialized = -1;

                public final boolean isInitialized() {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized != (-1))
                        return isInitialized == 1;
                    
                    memoizedIsInitialized = 1;
                    return true;
                }

                public void writeTo(CodedOutputStream output) throws IOException {
                    getSerializedSize();
                    for (int i = 0; i < (nodeInstance_.size()); i++) {
                        output.writeMessage(1, nodeInstance_.get(i));
                    }
                    for (int i = 0; i < (variable_.size()); i++) {
                        output.writeMessage(2, variable_.get(i));
                    }
                    for (int i = 0; i < (iterationLevels_.size()); i++) {
                        output.writeMessage(3, iterationLevels_.get(i));
                    }
                    getUnknownFields().writeTo(output);
                }

                private int memoizedSerializedSize = -1;

                public int getSerializedSize() {
                    int size = memoizedSerializedSize;
                    if (size != (-1))
                        return size;
                    
                    size = 0;
                    for (int i = 0; i < (nodeInstance_.size()); i++) {
                        size += CodedOutputStream.computeMessageSize(1, nodeInstance_.get(i));
                    }
                    for (int i = 0; i < (variable_.size()); i++) {
                        size += CodedOutputStream.computeMessageSize(2, variable_.get(i));
                    }
                    for (int i = 0; i < (iterationLevels_.size()); i++) {
                        size += CodedOutputStream.computeMessageSize(3, iterationLevels_.get(i));
                    }
                    size += getUnknownFields().getSerializedSize();
                    memoizedSerializedSize = size;
                    return size;
                }

                private static final long serialVersionUID = 0L;

                @Override
                protected Object writeReplace() throws ObjectStreamException {
                    return super.writeReplace();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode parseFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode parseDelimitedFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER.parseDelimitedFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER.parseDelimitedFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode parseFrom(CodedInputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder newBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.create();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder newBuilderForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.newBuilder();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode prototype) {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.newBuilder().mergeFrom(prototype);
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder toBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.this);
                }

                @Override
                protected JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                    JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder(parent);
                    return builder;
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode}
                 */
                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode)
                public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNodeOrBuilder {
                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_ForEachNode_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_ForEachNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.class);
                    }

                    // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.newBuilder()
                    private Builder() {
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessage.BuilderParent parent) {
                        super(parent);
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                            getNodeInstanceFieldBuilder();
                            getVariableFieldBuilder();
                            getIterationLevelsFieldBuilder();
                        } 
                    }

                    private static JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder create() {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder clear() {
                        super.clear();
                        if ((nodeInstanceBuilder_) == null) {
                            nodeInstance_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~1);
                        } else {
                            nodeInstanceBuilder_.clear();
                        }
                        if ((variableBuilder_) == null) {
                            variable_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~2);
                        } else {
                            variableBuilder_.clear();
                        }
                        if ((iterationLevelsBuilder_) == null) {
                            iterationLevels_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~4);
                        } else {
                            iterationLevelsBuilder_.clear();
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder clone() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.create().mergeFrom(buildPartial());
                    }

                    public Descriptors.Descriptor getDescriptorForType() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_ForEachNode_descriptor;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.getDefaultInstance();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode build() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode result = buildPartial();
                        if (!(result.isInitialized())) {
                            throw AbstractMessage.Builder.newUninitializedMessageException(result);
                        } 
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode buildPartial() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode result = new JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode(JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this);
                        int from_bitField0_ = bitField0_;
                        if ((nodeInstanceBuilder_) == null) {
                            if (((bitField0_) & 1) == 1) {
                                nodeInstance_ = Collections.unmodifiableList(nodeInstance_);
                                bitField0_ = (bitField0_) & (~1);
                            } 
                            result.nodeInstance_ = nodeInstance_;
                        } else {
                            result.nodeInstance_ = nodeInstanceBuilder_.build();
                        }
                        if ((variableBuilder_) == null) {
                            if (((bitField0_) & 2) == 2) {
                                variable_ = Collections.unmodifiableList(variable_);
                                bitField0_ = (bitField0_) & (~2);
                            } 
                            result.variable_ = variable_;
                        } else {
                            result.variable_ = variableBuilder_.build();
                        }
                        if ((iterationLevelsBuilder_) == null) {
                            if (((bitField0_) & 4) == 4) {
                                iterationLevels_ = Collections.unmodifiableList(iterationLevels_);
                                bitField0_ = (bitField0_) & (~4);
                            } 
                            result.iterationLevels_ = iterationLevels_;
                        } else {
                            result.iterationLevels_ = iterationLevelsBuilder_.build();
                        }
                        onBuilt();
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder mergeFrom(Message other) {
                        if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode) {
                            return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode) (other)));
                        } else {
                            super.mergeFrom(other);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                        }
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode other) {
                        if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.getDefaultInstance()))
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                        
                        if ((nodeInstanceBuilder_) == null) {
                            if (!(other.nodeInstance_.isEmpty())) {
                                if (nodeInstance_.isEmpty()) {
                                    nodeInstance_ = other.nodeInstance_;
                                    bitField0_ = (bitField0_) & (~1);
                                } else {
                                    ensureNodeInstanceIsMutable();
                                    nodeInstance_.addAll(other.nodeInstance_);
                                }
                                onChanged();
                            } 
                        } else {
                            if (!(other.nodeInstance_.isEmpty())) {
                                if (nodeInstanceBuilder_.isEmpty()) {
                                    nodeInstanceBuilder_.dispose();
                                    nodeInstanceBuilder_ = null;
                                    nodeInstance_ = other.nodeInstance_;
                                    bitField0_ = (bitField0_) & (~1);
                                    nodeInstanceBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getNodeInstanceFieldBuilder() : null;
                                } else {
                                    nodeInstanceBuilder_.addAllMessages(other.nodeInstance_);
                                }
                            } 
                        }
                        if ((variableBuilder_) == null) {
                            if (!(other.variable_.isEmpty())) {
                                if (variable_.isEmpty()) {
                                    variable_ = other.variable_;
                                    bitField0_ = (bitField0_) & (~2);
                                } else {
                                    ensureVariableIsMutable();
                                    variable_.addAll(other.variable_);
                                }
                                onChanged();
                            } 
                        } else {
                            if (!(other.variable_.isEmpty())) {
                                if (variableBuilder_.isEmpty()) {
                                    variableBuilder_.dispose();
                                    variableBuilder_ = null;
                                    variable_ = other.variable_;
                                    bitField0_ = (bitField0_) & (~2);
                                    variableBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getVariableFieldBuilder() : null;
                                } else {
                                    variableBuilder_.addAllMessages(other.variable_);
                                }
                            } 
                        }
                        if ((iterationLevelsBuilder_) == null) {
                            if (!(other.iterationLevels_.isEmpty())) {
                                if (iterationLevels_.isEmpty()) {
                                    iterationLevels_ = other.iterationLevels_;
                                    bitField0_ = (bitField0_) & (~4);
                                } else {
                                    ensureIterationLevelsIsMutable();
                                    iterationLevels_.addAll(other.iterationLevels_);
                                }
                                onChanged();
                            } 
                        } else {
                            if (!(other.iterationLevels_.isEmpty())) {
                                if (iterationLevelsBuilder_.isEmpty()) {
                                    iterationLevelsBuilder_.dispose();
                                    iterationLevelsBuilder_ = null;
                                    iterationLevels_ = other.iterationLevels_;
                                    bitField0_ = (bitField0_) & (~4);
                                    iterationLevelsBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getIterationLevelsFieldBuilder() : null;
                                } else {
                                    iterationLevelsBuilder_.addAllMessages(other.iterationLevels_);
                                }
                            } 
                        }
                        JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this.mergeUnknownFields(other.getUnknownFields());
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    public final boolean isInitialized() {
                        return true;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode parsedMessage = null;
                        try {
                            parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.PARSER.parsePartialFrom(input, extensionRegistry);
                        } catch (InvalidProtocolBufferException e) {
                            parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode) (e.getUnfinishedMessage()));
                            throw e;
                        } finally {
                            if (parsedMessage != null) {
                                mergeFrom(parsedMessage);
                            } 
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    private int bitField0_;

                    // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;
                    private List<JBPMMessages.ProcessInstance.NodeInstance> nodeInstance_ = Collections.emptyList();

                    private void ensureNodeInstanceIsMutable() {
                        if (!(((bitField0_) & 1) == 1)) {
                            nodeInstance_ = new ArrayList<JBPMMessages.ProcessInstance.NodeInstance>(nodeInstance_);
                            bitField0_ |= 1;
                        } 
                    }

                    private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstance, JBPMMessages.ProcessInstance.NodeInstance.Builder, JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> nodeInstanceBuilder_;

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public List<JBPMMessages.ProcessInstance.NodeInstance> getNodeInstanceList() {
                        if ((nodeInstanceBuilder_) == null) {
                            return Collections.unmodifiableList(nodeInstance_);
                        } else {
                            return nodeInstanceBuilder_.getMessageList();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public int getNodeInstanceCount() {
                        if ((nodeInstanceBuilder_) == null) {
                            return nodeInstance_.size();
                        } else {
                            return nodeInstanceBuilder_.getCount();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstance getNodeInstance(int index) {
                        if ((nodeInstanceBuilder_) == null) {
                            return nodeInstance_.get(index);
                        } else {
                            return nodeInstanceBuilder_.getMessage(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder setNodeInstance(int index, JBPMMessages.ProcessInstance.NodeInstance value) {
                        if ((nodeInstanceBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.set(index, value);
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.setMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder setNodeInstance(int index, JBPMMessages.ProcessInstance.NodeInstance.Builder builderForValue) {
                        if ((nodeInstanceBuilder_) == null) {
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.set(index, builderForValue.build());
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.setMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addNodeInstance(JBPMMessages.ProcessInstance.NodeInstance value) {
                        if ((nodeInstanceBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.add(value);
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.addMessage(value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addNodeInstance(int index, JBPMMessages.ProcessInstance.NodeInstance value) {
                        if ((nodeInstanceBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.add(index, value);
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.addMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addNodeInstance(JBPMMessages.ProcessInstance.NodeInstance.Builder builderForValue) {
                        if ((nodeInstanceBuilder_) == null) {
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.add(builderForValue.build());
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.addMessage(builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addNodeInstance(int index, JBPMMessages.ProcessInstance.NodeInstance.Builder builderForValue) {
                        if ((nodeInstanceBuilder_) == null) {
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.add(index, builderForValue.build());
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.addMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addAllNodeInstance(Iterable<? extends JBPMMessages.ProcessInstance.NodeInstance> values) {
                        if ((nodeInstanceBuilder_) == null) {
                            ensureNodeInstanceIsMutable();
                            super.addAll(values, nodeInstance_);
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.addAllMessages(values);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder clearNodeInstance() {
                        if ((nodeInstanceBuilder_) == null) {
                            nodeInstance_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~1);
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.clear();
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder removeNodeInstance(int index) {
                        if ((nodeInstanceBuilder_) == null) {
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.remove(index);
                            onChanged();
                        } else {
                            nodeInstanceBuilder_.remove(index);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstance.Builder getNodeInstanceBuilder(int index) {
                        return getNodeInstanceFieldBuilder().getBuilder(index);
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceOrBuilder getNodeInstanceOrBuilder(int index) {
                        if ((nodeInstanceBuilder_) == null) {
                            return nodeInstance_.get(index);
                        } else {
                            return nodeInstanceBuilder_.getMessageOrBuilder(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public List<? extends JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> getNodeInstanceOrBuilderList() {
                        if ((nodeInstanceBuilder_) != null) {
                            return nodeInstanceBuilder_.getMessageOrBuilderList();
                        } else {
                            return Collections.unmodifiableList(nodeInstance_);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstance.Builder addNodeInstanceBuilder() {
                        return getNodeInstanceFieldBuilder().addBuilder(JBPMMessages.ProcessInstance.NodeInstance.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstance.Builder addNodeInstanceBuilder(int index) {
                        return getNodeInstanceFieldBuilder().addBuilder(index, JBPMMessages.ProcessInstance.NodeInstance.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 1;</code>
                     */
                    public List<JBPMMessages.ProcessInstance.NodeInstance.Builder> getNodeInstanceBuilderList() {
                        return getNodeInstanceFieldBuilder().getBuilderList();
                    }

                    private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstance, JBPMMessages.ProcessInstance.NodeInstance.Builder, JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> getNodeInstanceFieldBuilder() {
                        if ((nodeInstanceBuilder_) == null) {
                            nodeInstanceBuilder_ = new RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstance, JBPMMessages.ProcessInstance.NodeInstance.Builder, JBPMMessages.ProcessInstance.NodeInstanceOrBuilder>(nodeInstance_, (((bitField0_) & 1) == 1), getParentForChildren(), isClean());
                            nodeInstance_ = null;
                        } 
                        return nodeInstanceBuilder_;
                    }

                    // repeated .org.jbpm.marshalling.Variable variable = 2;
                    private List<JBPMMessages.Variable> variable_ = Collections.emptyList();

                    private void ensureVariableIsMutable() {
                        if (!(((bitField0_) & 2) == 2)) {
                            variable_ = new ArrayList<JBPMMessages.Variable>(variable_);
                            bitField0_ |= 2;
                        } 
                    }

                    private RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder> variableBuilder_;

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public List<JBPMMessages.Variable> getVariableList() {
                        if ((variableBuilder_) == null) {
                            return Collections.unmodifiableList(variable_);
                        } else {
                            return variableBuilder_.getMessageList();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public int getVariableCount() {
                        if ((variableBuilder_) == null) {
                            return variable_.size();
                        } else {
                            return variableBuilder_.getCount();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.Variable getVariable(int index) {
                        if ((variableBuilder_) == null) {
                            return variable_.get(index);
                        } else {
                            return variableBuilder_.getMessage(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder setVariable(int index, JBPMMessages.Variable value) {
                        if ((variableBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureVariableIsMutable();
                            variable_.set(index, value);
                            onChanged();
                        } else {
                            variableBuilder_.setMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder setVariable(int index, JBPMMessages.Variable.Builder builderForValue) {
                        if ((variableBuilder_) == null) {
                            ensureVariableIsMutable();
                            variable_.set(index, builderForValue.build());
                            onChanged();
                        } else {
                            variableBuilder_.setMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addVariable(JBPMMessages.Variable value) {
                        if ((variableBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureVariableIsMutable();
                            variable_.add(value);
                            onChanged();
                        } else {
                            variableBuilder_.addMessage(value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addVariable(int index, JBPMMessages.Variable value) {
                        if ((variableBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureVariableIsMutable();
                            variable_.add(index, value);
                            onChanged();
                        } else {
                            variableBuilder_.addMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addVariable(JBPMMessages.Variable.Builder builderForValue) {
                        if ((variableBuilder_) == null) {
                            ensureVariableIsMutable();
                            variable_.add(builderForValue.build());
                            onChanged();
                        } else {
                            variableBuilder_.addMessage(builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addVariable(int index, JBPMMessages.Variable.Builder builderForValue) {
                        if ((variableBuilder_) == null) {
                            ensureVariableIsMutable();
                            variable_.add(index, builderForValue.build());
                            onChanged();
                        } else {
                            variableBuilder_.addMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addAllVariable(Iterable<? extends JBPMMessages.Variable> values) {
                        if ((variableBuilder_) == null) {
                            ensureVariableIsMutable();
                            super.addAll(values, variable_);
                            onChanged();
                        } else {
                            variableBuilder_.addAllMessages(values);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder clearVariable() {
                        if ((variableBuilder_) == null) {
                            variable_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~2);
                            onChanged();
                        } else {
                            variableBuilder_.clear();
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder removeVariable(int index) {
                        if ((variableBuilder_) == null) {
                            ensureVariableIsMutable();
                            variable_.remove(index);
                            onChanged();
                        } else {
                            variableBuilder_.remove(index);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.Variable.Builder getVariableBuilder(int index) {
                        return getVariableFieldBuilder().getBuilder(index);
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index) {
                        if ((variableBuilder_) == null) {
                            return variable_.get(index);
                        } else {
                            return variableBuilder_.getMessageOrBuilder(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList() {
                        if ((variableBuilder_) != null) {
                            return variableBuilder_.getMessageOrBuilderList();
                        } else {
                            return Collections.unmodifiableList(variable_);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.Variable.Builder addVariableBuilder() {
                        return getVariableFieldBuilder().addBuilder(JBPMMessages.Variable.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public JBPMMessages.Variable.Builder addVariableBuilder(int index) {
                        return getVariableFieldBuilder().addBuilder(index, JBPMMessages.Variable.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.Variable variable = 2;</code>
                     */
                    public List<JBPMMessages.Variable.Builder> getVariableBuilderList() {
                        return getVariableFieldBuilder().getBuilderList();
                    }

                    private RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder> getVariableFieldBuilder() {
                        if ((variableBuilder_) == null) {
                            variableBuilder_ = new RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder>(variable_, (((bitField0_) & 2) == 2), getParentForChildren(), isClean());
                            variable_ = null;
                        } 
                        return variableBuilder_;
                    }

                    // repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;
                    private List<JBPMMessages.IterationLevel> iterationLevels_ = Collections.emptyList();

                    private void ensureIterationLevelsIsMutable() {
                        if (!(((bitField0_) & 4) == 4)) {
                            iterationLevels_ = new ArrayList<JBPMMessages.IterationLevel>(iterationLevels_);
                            bitField0_ |= 4;
                        } 
                    }

                    private RepeatedFieldBuilder<JBPMMessages.IterationLevel, JBPMMessages.IterationLevel.Builder, JBPMMessages.IterationLevelOrBuilder> iterationLevelsBuilder_;

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public List<JBPMMessages.IterationLevel> getIterationLevelsList() {
                        if ((iterationLevelsBuilder_) == null) {
                            return Collections.unmodifiableList(iterationLevels_);
                        } else {
                            return iterationLevelsBuilder_.getMessageList();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public int getIterationLevelsCount() {
                        if ((iterationLevelsBuilder_) == null) {
                            return iterationLevels_.size();
                        } else {
                            return iterationLevelsBuilder_.getCount();
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.IterationLevel getIterationLevels(int index) {
                        if ((iterationLevelsBuilder_) == null) {
                            return iterationLevels_.get(index);
                        } else {
                            return iterationLevelsBuilder_.getMessage(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder setIterationLevels(int index, JBPMMessages.IterationLevel value) {
                        if ((iterationLevelsBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.set(index, value);
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.setMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder setIterationLevels(int index, JBPMMessages.IterationLevel.Builder builderForValue) {
                        if ((iterationLevelsBuilder_) == null) {
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.set(index, builderForValue.build());
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.setMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addIterationLevels(JBPMMessages.IterationLevel value) {
                        if ((iterationLevelsBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.add(value);
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.addMessage(value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addIterationLevels(int index, JBPMMessages.IterationLevel value) {
                        if ((iterationLevelsBuilder_) == null) {
                            if (value == null) {
                                throw new NullPointerException();
                            } 
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.add(index, value);
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.addMessage(index, value);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addIterationLevels(JBPMMessages.IterationLevel.Builder builderForValue) {
                        if ((iterationLevelsBuilder_) == null) {
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.add(builderForValue.build());
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.addMessage(builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addIterationLevels(int index, JBPMMessages.IterationLevel.Builder builderForValue) {
                        if ((iterationLevelsBuilder_) == null) {
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.add(index, builderForValue.build());
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.addMessage(index, builderForValue.build());
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder addAllIterationLevels(Iterable<? extends JBPMMessages.IterationLevel> values) {
                        if ((iterationLevelsBuilder_) == null) {
                            ensureIterationLevelsIsMutable();
                            super.addAll(values, iterationLevels_);
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.addAllMessages(values);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder clearIterationLevels() {
                        if ((iterationLevelsBuilder_) == null) {
                            iterationLevels_ = Collections.emptyList();
                            bitField0_ = (bitField0_) & (~4);
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.clear();
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder removeIterationLevels(int index) {
                        if ((iterationLevelsBuilder_) == null) {
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.remove(index);
                            onChanged();
                        } else {
                            iterationLevelsBuilder_.remove(index);
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder.this;
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.IterationLevel.Builder getIterationLevelsBuilder(int index) {
                        return getIterationLevelsFieldBuilder().getBuilder(index);
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.IterationLevelOrBuilder getIterationLevelsOrBuilder(int index) {
                        if ((iterationLevelsBuilder_) == null) {
                            return iterationLevels_.get(index);
                        } else {
                            return iterationLevelsBuilder_.getMessageOrBuilder(index);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public List<? extends JBPMMessages.IterationLevelOrBuilder> getIterationLevelsOrBuilderList() {
                        if ((iterationLevelsBuilder_) != null) {
                            return iterationLevelsBuilder_.getMessageOrBuilderList();
                        } else {
                            return Collections.unmodifiableList(iterationLevels_);
                        }
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.IterationLevel.Builder addIterationLevelsBuilder() {
                        return getIterationLevelsFieldBuilder().addBuilder(JBPMMessages.IterationLevel.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public JBPMMessages.IterationLevel.Builder addIterationLevelsBuilder(int index) {
                        return getIterationLevelsFieldBuilder().addBuilder(index, JBPMMessages.IterationLevel.getDefaultInstance());
                    }

                    /**
                     * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 3;</code>
                     */
                    public List<JBPMMessages.IterationLevel.Builder> getIterationLevelsBuilderList() {
                        return getIterationLevelsFieldBuilder().getBuilderList();
                    }

                    private RepeatedFieldBuilder<JBPMMessages.IterationLevel, JBPMMessages.IterationLevel.Builder, JBPMMessages.IterationLevelOrBuilder> getIterationLevelsFieldBuilder() {
                        if ((iterationLevelsBuilder_) == null) {
                            iterationLevelsBuilder_ = new RepeatedFieldBuilder<JBPMMessages.IterationLevel, JBPMMessages.IterationLevel.Builder, JBPMMessages.IterationLevelOrBuilder>(iterationLevels_, (((bitField0_) & 4) == 4), getParentForChildren(), isClean());
                            iterationLevels_ = null;
                        } 
                        return iterationLevelsBuilder_;
                    }

                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode)
                }

                static {
                    defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode(true);
                    JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.defaultInstance.initFields();
                }

                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode)
            }

            public interface AsyncEventNodeOrBuilder extends MessageOrBuilder {
                // optional string event_type = 1;
                /**
                 * <code>optional string event_type = 1;</code>
                 */
                boolean hasEventType();

                /**
                 * <code>optional string event_type = 1;</code>
                 */
                String getEventType();

                /**
                 * <code>optional string event_type = 1;</code>
                 */
                ByteString getEventTypeBytes();
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode}
             */
            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode)
            public static final class AsyncEventNode extends GeneratedMessage implements JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNodeOrBuilder {
                // Use AsyncEventNode.newBuilder() to construct.
                private AsyncEventNode(GeneratedMessage.Builder<?> builder) {
                    super(builder);
                    this.unknownFields = builder.getUnknownFields();
                }

                private AsyncEventNode(boolean noInit) {
                    this.unknownFields = UnknownFieldSet.getDefaultInstance();
                }

                private static final JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode defaultInstance;

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode getDefaultInstance() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.defaultInstance;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.defaultInstance;
                }

                private final UnknownFieldSet unknownFields;

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.this.unknownFields;
                }

                private AsyncEventNode(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    initFields();
                    int mutable_bitField0_ = 0;
                    UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                    try {
                        boolean done = false;
                        while (!done) {
                            int tag = input.readTag();
                            switch (tag) {
                                case 0 :
                                    done = true;
                                    break;
                                default :
                                    {
                                        if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                            done = true;
                                        } 
                                        break;
                                    }
                                case 10 :
                                    {
                                        bitField0_ |= 1;
                                        eventType_ = input.readBytes();
                                        break;
                                    }
                            }
                        }
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.this);
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.this);
                    } finally {
                        this.unknownFields = unknownFields.build();
                        makeExtensionsImmutable();
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_AsyncEventNode_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_AsyncEventNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.class);
                }

                public static Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode> PARSER = new AbstractParser<JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode>() {
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode(input, extensionRegistry);
                    }
                };

                @Override
                public Parser<JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode> getParserForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER;
                }

                private int bitField0_;

                // optional string event_type = 1;
                public static final int EVENT_TYPE_FIELD_NUMBER = 1;

                private Object eventType_;

                /**
                 * <code>optional string event_type = 1;</code>
                 */
                public boolean hasEventType() {
                    return ((bitField0_) & 1) == 1;
                }

                /**
                 * <code>optional string event_type = 1;</code>
                 */
                public String getEventType() {
                    Object ref = eventType_;
                    if (ref instanceof String) {
                        return ((String) (ref));
                    } else {
                        ByteString bs = ((ByteString) (ref));
                        String s = bs.toStringUtf8();
                        if (bs.isValidUtf8()) {
                            eventType_ = s;
                        } 
                        return s;
                    }
                }

                /**
                 * <code>optional string event_type = 1;</code>
                 */
                public ByteString getEventTypeBytes() {
                    Object ref = eventType_;
                    if (ref instanceof String) {
                        ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                        eventType_ = b;
                        return b;
                    } else {
                        return ((ByteString) (ref));
                    }
                }

                private void initFields() {
                    eventType_ = "";
                }

                private byte memoizedIsInitialized = -1;

                public final boolean isInitialized() {
                    byte isInitialized = memoizedIsInitialized;
                    if (isInitialized != (-1))
                        return isInitialized == 1;
                    
                    memoizedIsInitialized = 1;
                    return true;
                }

                public void writeTo(CodedOutputStream output) throws IOException {
                    getSerializedSize();
                    if (((bitField0_) & 1) == 1) {
                        output.writeBytes(1, getEventTypeBytes());
                    } 
                    getUnknownFields().writeTo(output);
                }

                private int memoizedSerializedSize = -1;

                public int getSerializedSize() {
                    int size = memoizedSerializedSize;
                    if (size != (-1))
                        return size;
                    
                    size = 0;
                    if (((bitField0_) & 1) == 1) {
                        size += CodedOutputStream.computeBytesSize(1, getEventTypeBytes());
                    } 
                    size += getUnknownFields().getSerializedSize();
                    memoizedSerializedSize = size;
                    return size;
                }

                private static final long serialVersionUID = 0L;

                @Override
                protected Object writeReplace() throws ObjectStreamException {
                    return super.writeReplace();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER.parseFrom(data);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER.parseFrom(data, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode parseFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode parseDelimitedFrom(InputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER.parseDelimitedFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER.parseDelimitedFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode parseFrom(CodedInputStream input) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER.parseFrom(input);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER.parseFrom(input, extensionRegistry);
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder newBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.create();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder newBuilderForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.newBuilder();
                }

                public static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode prototype) {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.newBuilder().mergeFrom(prototype);
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder toBuilder() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.this);
                }

                @Override
                protected JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                    JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder(parent);
                    return builder;
                }

                /**
                 * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode}
                 */
                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode)
                public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNodeOrBuilder {
                    public static final Descriptors.Descriptor getDescriptor() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_AsyncEventNode_descriptor;
                    }

                    protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_AsyncEventNode_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.class, JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.class);
                    }

                    // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.newBuilder()
                    private Builder() {
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessage.BuilderParent parent) {
                        super(parent);
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                        } 
                    }

                    private static JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder create() {
                        return new JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder clear() {
                        super.clear();
                        eventType_ = "";
                        bitField0_ = (bitField0_) & (~1);
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.this;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder clone() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.create().mergeFrom(buildPartial());
                    }

                    public Descriptors.Descriptor getDescriptorForType() {
                        return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_AsyncEventNode_descriptor;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode getDefaultInstanceForType() {
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.getDefaultInstance();
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode build() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode result = buildPartial();
                        if (!(result.isInitialized())) {
                            throw AbstractMessage.Builder.newUninitializedMessageException(result);
                        } 
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode buildPartial() {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode result = new JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode(JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.this);
                        int from_bitField0_ = bitField0_;
                        int to_bitField0_ = 0;
                        if ((from_bitField0_ & 1) == 1) {
                            to_bitField0_ |= 1;
                        } 
                        result.eventType_ = eventType_;
                        result.bitField0_ = to_bitField0_;
                        onBuilt();
                        return result;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder mergeFrom(Message other) {
                        if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode) {
                            return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode) (other)));
                        } else {
                            super.mergeFrom(other);
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.this;
                        }
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode other) {
                        if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.getDefaultInstance()))
                            return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.this;
                        
                        if (other.hasEventType()) {
                            bitField0_ |= 1;
                            eventType_ = other.eventType_;
                            onChanged();
                        } 
                        JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.this.mergeUnknownFields(other.getUnknownFields());
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.this;
                    }

                    public final boolean isInitialized() {
                        return true;
                    }

                    public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                        JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode parsedMessage = null;
                        try {
                            parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.PARSER.parsePartialFrom(input, extensionRegistry);
                        } catch (InvalidProtocolBufferException e) {
                            parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode) (e.getUnfinishedMessage()));
                            throw e;
                        } finally {
                            if (parsedMessage != null) {
                                mergeFrom(parsedMessage);
                            } 
                        }
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.this;
                    }

                    private int bitField0_;

                    // optional string event_type = 1;
                    private Object eventType_ = "";

                    /**
                     * <code>optional string event_type = 1;</code>
                     */
                    public boolean hasEventType() {
                        return ((bitField0_) & 1) == 1;
                    }

                    /**
                     * <code>optional string event_type = 1;</code>
                     */
                    public String getEventType() {
                        Object ref = eventType_;
                        if (!(ref instanceof String)) {
                            String s = ((ByteString) (ref)).toStringUtf8();
                            eventType_ = s;
                            return s;
                        } else {
                            return ((String) (ref));
                        }
                    }

                    /**
                     * <code>optional string event_type = 1;</code>
                     */
                    public ByteString getEventTypeBytes() {
                        Object ref = eventType_;
                        if (ref instanceof String) {
                            ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                            eventType_ = b;
                            return b;
                        } else {
                            return ((ByteString) (ref));
                        }
                    }

                    /**
                     * <code>optional string event_type = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder setEventType(String value) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        bitField0_ |= 1;
                        eventType_ = value;
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.this;
                    }

                    /**
                     * <code>optional string event_type = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder clearEventType() {
                        bitField0_ = (bitField0_) & (~1);
                        eventType_ = JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.getDefaultInstance().getEventType();
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.this;
                    }

                    /**
                     * <code>optional string event_type = 1;</code>
                     */
                    public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder setEventTypeBytes(ByteString value) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        bitField0_ |= 1;
                        eventType_ = value;
                        onChanged();
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder.this;
                    }

                    // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode)
                }

                static {
                    defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode(true);
                    JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.defaultInstance.initFields();
                }

                // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode)
            }

            private int bitField0_;

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceType type = 1;
            public static final int TYPE_FIELD_NUMBER = 1;

            private JBPMMessages.ProcessInstance.NodeInstanceType type_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceType type = 1;</code>
             */
            public boolean hasType() {
                return ((bitField0_) & 1) == 1;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceType type = 1;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceType getType() {
                return type_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;
            public static final int RULE_SET_FIELD_NUMBER = 2;

            private JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode ruleSet_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
             */
            public boolean hasRuleSet() {
                return ((bitField0_) & 2) == 2;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode getRuleSet() {
                return ruleSet_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNodeOrBuilder getRuleSetOrBuilder() {
                return ruleSet_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;
            public static final int HUMAN_TASK_FIELD_NUMBER = 3;

            private JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode humanTask_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
             */
            public boolean hasHumanTask() {
                return ((bitField0_) & 4) == 4;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode getHumanTask() {
                return humanTask_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNodeOrBuilder getHumanTaskOrBuilder() {
                return humanTask_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;
            public static final int WORK_ITEM_FIELD_NUMBER = 4;

            private JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode workItem_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
             */
            public boolean hasWorkItem() {
                return ((bitField0_) & 8) == 8;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode getWorkItem() {
                return workItem_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNodeOrBuilder getWorkItemOrBuilder() {
                return workItem_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;
            public static final int SUB_PROCESS_FIELD_NUMBER = 5;

            private JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode subProcess_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
             */
            public boolean hasSubProcess() {
                return ((bitField0_) & 16) == 16;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode getSubProcess() {
                return subProcess_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNodeOrBuilder getSubProcessOrBuilder() {
                return subProcess_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;
            public static final int MILESTONE_FIELD_NUMBER = 6;

            private JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode milestone_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
             */
            public boolean hasMilestone() {
                return ((bitField0_) & 32) == 32;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode getMilestone() {
                return milestone_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNodeOrBuilder getMilestoneOrBuilder() {
                return milestone_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;
            public static final int EVENT_FIELD_NUMBER = 7;

            private JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode event_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
             */
            public boolean hasEvent() {
                return ((bitField0_) & 64) == 64;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode getEvent() {
                return event_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNodeOrBuilder getEventOrBuilder() {
                return event_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;
            public static final int TIMER_FIELD_NUMBER = 8;

            private JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode timer_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
             */
            public boolean hasTimer() {
                return ((bitField0_) & 128) == 128;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode getTimer() {
                return timer_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNodeOrBuilder getTimerOrBuilder() {
                return timer_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;
            public static final int JOIN_FIELD_NUMBER = 9;

            private JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode join_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
             */
            public boolean hasJoin() {
                return ((bitField0_) & 256) == 256;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode getJoin() {
                return join_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNodeOrBuilder getJoinOrBuilder() {
                return join_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;
            public static final int STATE_FIELD_NUMBER = 10;

            private JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode state_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
             */
            public boolean hasState() {
                return ((bitField0_) & 512) == 512;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode getState() {
                return state_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNodeOrBuilder getStateOrBuilder() {
                return state_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;
            public static final int COMPOSITE_FIELD_NUMBER = 11;

            private JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode composite_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
             */
            public boolean hasComposite() {
                return ((bitField0_) & 1024) == 1024;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode getComposite() {
                return composite_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNodeOrBuilder getCompositeOrBuilder() {
                return composite_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;
            public static final int FOR_EACH_FIELD_NUMBER = 12;

            private JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode forEach_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
             */
            public boolean hasForEach() {
                return ((bitField0_) & 2048) == 2048;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode getForEach() {
                return forEach_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNodeOrBuilder getForEachOrBuilder() {
                return forEach_;
            }

            // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;
            public static final int ASYNC_EVENT_FIELD_NUMBER = 13;

            private JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode asyncEvent_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
             */
            public boolean hasAsyncEvent() {
                return ((bitField0_) & 4096) == 4096;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode getAsyncEvent() {
                return asyncEvent_;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNodeOrBuilder getAsyncEventOrBuilder() {
                return asyncEvent_;
            }

            private void initFields() {
                type_ = JBPMMessages.ProcessInstance.NodeInstanceType.RULE_SET_NODE;
                ruleSet_ = JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.getDefaultInstance();
                humanTask_ = JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.getDefaultInstance();
                workItem_ = JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.getDefaultInstance();
                subProcess_ = JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.getDefaultInstance();
                milestone_ = JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.getDefaultInstance();
                event_ = JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.getDefaultInstance();
                timer_ = JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.getDefaultInstance();
                join_ = JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.getDefaultInstance();
                state_ = JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.getDefaultInstance();
                composite_ = JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.getDefaultInstance();
                forEach_ = JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.getDefaultInstance();
                asyncEvent_ = JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.getDefaultInstance();
            }

            private byte memoizedIsInitialized = -1;

            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized != (-1))
                    return isInitialized == 1;
                
                memoizedIsInitialized = 1;
                return true;
            }

            public void writeTo(CodedOutputStream output) throws IOException {
                getSerializedSize();
                if (((bitField0_) & 1) == 1) {
                    output.writeEnum(1, type_.getNumber());
                } 
                if (((bitField0_) & 2) == 2) {
                    output.writeMessage(2, ruleSet_);
                } 
                if (((bitField0_) & 4) == 4) {
                    output.writeMessage(3, humanTask_);
                } 
                if (((bitField0_) & 8) == 8) {
                    output.writeMessage(4, workItem_);
                } 
                if (((bitField0_) & 16) == 16) {
                    output.writeMessage(5, subProcess_);
                } 
                if (((bitField0_) & 32) == 32) {
                    output.writeMessage(6, milestone_);
                } 
                if (((bitField0_) & 64) == 64) {
                    output.writeMessage(7, event_);
                } 
                if (((bitField0_) & 128) == 128) {
                    output.writeMessage(8, timer_);
                } 
                if (((bitField0_) & 256) == 256) {
                    output.writeMessage(9, join_);
                } 
                if (((bitField0_) & 512) == 512) {
                    output.writeMessage(10, state_);
                } 
                if (((bitField0_) & 1024) == 1024) {
                    output.writeMessage(11, composite_);
                } 
                if (((bitField0_) & 2048) == 2048) {
                    output.writeMessage(12, forEach_);
                } 
                if (((bitField0_) & 4096) == 4096) {
                    output.writeMessage(13, asyncEvent_);
                } 
                getUnknownFields().writeTo(output);
            }

            private int memoizedSerializedSize = -1;

            public int getSerializedSize() {
                int size = memoizedSerializedSize;
                if (size != (-1))
                    return size;
                
                size = 0;
                if (((bitField0_) & 1) == 1) {
                    size += CodedOutputStream.computeEnumSize(1, type_.getNumber());
                } 
                if (((bitField0_) & 2) == 2) {
                    size += CodedOutputStream.computeMessageSize(2, ruleSet_);
                } 
                if (((bitField0_) & 4) == 4) {
                    size += CodedOutputStream.computeMessageSize(3, humanTask_);
                } 
                if (((bitField0_) & 8) == 8) {
                    size += CodedOutputStream.computeMessageSize(4, workItem_);
                } 
                if (((bitField0_) & 16) == 16) {
                    size += CodedOutputStream.computeMessageSize(5, subProcess_);
                } 
                if (((bitField0_) & 32) == 32) {
                    size += CodedOutputStream.computeMessageSize(6, milestone_);
                } 
                if (((bitField0_) & 64) == 64) {
                    size += CodedOutputStream.computeMessageSize(7, event_);
                } 
                if (((bitField0_) & 128) == 128) {
                    size += CodedOutputStream.computeMessageSize(8, timer_);
                } 
                if (((bitField0_) & 256) == 256) {
                    size += CodedOutputStream.computeMessageSize(9, join_);
                } 
                if (((bitField0_) & 512) == 512) {
                    size += CodedOutputStream.computeMessageSize(10, state_);
                } 
                if (((bitField0_) & 1024) == 1024) {
                    size += CodedOutputStream.computeMessageSize(11, composite_);
                } 
                if (((bitField0_) & 2048) == 2048) {
                    size += CodedOutputStream.computeMessageSize(12, forEach_);
                } 
                if (((bitField0_) & 4096) == 4096) {
                    size += CodedOutputStream.computeMessageSize(13, asyncEvent_);
                } 
                size += getUnknownFields().getSerializedSize();
                memoizedSerializedSize = size;
                return size;
            }

            private static final long serialVersionUID = 0L;

            @Override
            protected Object writeReplace() throws ObjectStreamException {
                return super.writeReplace();
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceContent parseFrom(ByteString data) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER.parseFrom(data);
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceContent parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER.parseFrom(data, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceContent parseFrom(byte[] data) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER.parseFrom(data);
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceContent parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER.parseFrom(data, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceContent parseFrom(InputStream input) throws IOException {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER.parseFrom(input);
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceContent parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER.parseFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceContent parseDelimitedFrom(InputStream input) throws IOException {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER.parseDelimitedFrom(input);
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceContent parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER.parseDelimitedFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceContent parseFrom(CodedInputStream input) throws IOException {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER.parseFrom(input);
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceContent parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER.parseFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceContent.Builder newBuilder() {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.create();
            }

            public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder newBuilderForType() {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.newBuilder();
            }

            public static JBPMMessages.ProcessInstance.NodeInstanceContent.Builder newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent prototype) {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.newBuilder().mergeFrom(prototype);
            }

            public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder toBuilder() {
                return JBPMMessages.ProcessInstance.NodeInstanceContent.newBuilder(JBPMMessages.ProcessInstance.NodeInstanceContent.this);
            }

            @Override
            protected JBPMMessages.ProcessInstance.NodeInstanceContent.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                JBPMMessages.ProcessInstance.NodeInstanceContent.Builder builder = new JBPMMessages.ProcessInstance.NodeInstanceContent.Builder(parent);
                return builder;
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessInstance.NodeInstanceContent}
             */
            // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent)
            public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.NodeInstanceContent.Builder> implements JBPMMessages.ProcessInstance.NodeInstanceContentOrBuilder {
                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.NodeInstanceContent.class, JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.class);
                }

                // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.NodeInstanceContent.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessage.BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                        getRuleSetFieldBuilder();
                        getHumanTaskFieldBuilder();
                        getWorkItemFieldBuilder();
                        getSubProcessFieldBuilder();
                        getMilestoneFieldBuilder();
                        getEventFieldBuilder();
                        getTimerFieldBuilder();
                        getJoinFieldBuilder();
                        getStateFieldBuilder();
                        getCompositeFieldBuilder();
                        getForEachFieldBuilder();
                        getAsyncEventFieldBuilder();
                    } 
                }

                private static JBPMMessages.ProcessInstance.NodeInstanceContent.Builder create() {
                    return new JBPMMessages.ProcessInstance.NodeInstanceContent.Builder();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clear() {
                    super.clear();
                    type_ = JBPMMessages.ProcessInstance.NodeInstanceType.RULE_SET_NODE;
                    bitField0_ = (bitField0_) & (~1);
                    if ((ruleSetBuilder_) == null) {
                        ruleSet_ = JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.getDefaultInstance();
                    } else {
                        ruleSetBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~2);
                    if ((humanTaskBuilder_) == null) {
                        humanTask_ = JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.getDefaultInstance();
                    } else {
                        humanTaskBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~4);
                    if ((workItemBuilder_) == null) {
                        workItem_ = JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.getDefaultInstance();
                    } else {
                        workItemBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~8);
                    if ((subProcessBuilder_) == null) {
                        subProcess_ = JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.getDefaultInstance();
                    } else {
                        subProcessBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~16);
                    if ((milestoneBuilder_) == null) {
                        milestone_ = JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.getDefaultInstance();
                    } else {
                        milestoneBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~32);
                    if ((eventBuilder_) == null) {
                        event_ = JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.getDefaultInstance();
                    } else {
                        eventBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~64);
                    if ((timerBuilder_) == null) {
                        timer_ = JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.getDefaultInstance();
                    } else {
                        timerBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~128);
                    if ((joinBuilder_) == null) {
                        join_ = JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.getDefaultInstance();
                    } else {
                        joinBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~256);
                    if ((stateBuilder_) == null) {
                        state_ = JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.getDefaultInstance();
                    } else {
                        stateBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~512);
                    if ((compositeBuilder_) == null) {
                        composite_ = JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.getDefaultInstance();
                    } else {
                        compositeBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~1024);
                    if ((forEachBuilder_) == null) {
                        forEach_ = JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.getDefaultInstance();
                    } else {
                        forEachBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~2048);
                    if ((asyncEventBuilder_) == null) {
                        asyncEvent_ = JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.getDefaultInstance();
                    } else {
                        asyncEventBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~4096);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clone() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.create().mergeFrom(buildPartial());
                }

                public Descriptors.Descriptor getDescriptorForType() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent getDefaultInstanceForType() {
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.getDefaultInstance();
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent build() {
                    JBPMMessages.ProcessInstance.NodeInstanceContent result = buildPartial();
                    if (!(result.isInitialized())) {
                        throw AbstractMessage.Builder.newUninitializedMessageException(result);
                    } 
                    return result;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent buildPartial() {
                    JBPMMessages.ProcessInstance.NodeInstanceContent result = new JBPMMessages.ProcessInstance.NodeInstanceContent(JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this);
                    int from_bitField0_ = bitField0_;
                    int to_bitField0_ = 0;
                    if ((from_bitField0_ & 1) == 1) {
                        to_bitField0_ |= 1;
                    } 
                    result.type_ = type_;
                    if ((from_bitField0_ & 2) == 2) {
                        to_bitField0_ |= 2;
                    } 
                    if ((ruleSetBuilder_) == null) {
                        result.ruleSet_ = ruleSet_;
                    } else {
                        result.ruleSet_ = ruleSetBuilder_.build();
                    }
                    if ((from_bitField0_ & 4) == 4) {
                        to_bitField0_ |= 4;
                    } 
                    if ((humanTaskBuilder_) == null) {
                        result.humanTask_ = humanTask_;
                    } else {
                        result.humanTask_ = humanTaskBuilder_.build();
                    }
                    if ((from_bitField0_ & 8) == 8) {
                        to_bitField0_ |= 8;
                    } 
                    if ((workItemBuilder_) == null) {
                        result.workItem_ = workItem_;
                    } else {
                        result.workItem_ = workItemBuilder_.build();
                    }
                    if ((from_bitField0_ & 16) == 16) {
                        to_bitField0_ |= 16;
                    } 
                    if ((subProcessBuilder_) == null) {
                        result.subProcess_ = subProcess_;
                    } else {
                        result.subProcess_ = subProcessBuilder_.build();
                    }
                    if ((from_bitField0_ & 32) == 32) {
                        to_bitField0_ |= 32;
                    } 
                    if ((milestoneBuilder_) == null) {
                        result.milestone_ = milestone_;
                    } else {
                        result.milestone_ = milestoneBuilder_.build();
                    }
                    if ((from_bitField0_ & 64) == 64) {
                        to_bitField0_ |= 64;
                    } 
                    if ((eventBuilder_) == null) {
                        result.event_ = event_;
                    } else {
                        result.event_ = eventBuilder_.build();
                    }
                    if ((from_bitField0_ & 128) == 128) {
                        to_bitField0_ |= 128;
                    } 
                    if ((timerBuilder_) == null) {
                        result.timer_ = timer_;
                    } else {
                        result.timer_ = timerBuilder_.build();
                    }
                    if ((from_bitField0_ & 256) == 256) {
                        to_bitField0_ |= 256;
                    } 
                    if ((joinBuilder_) == null) {
                        result.join_ = join_;
                    } else {
                        result.join_ = joinBuilder_.build();
                    }
                    if ((from_bitField0_ & 512) == 512) {
                        to_bitField0_ |= 512;
                    } 
                    if ((stateBuilder_) == null) {
                        result.state_ = state_;
                    } else {
                        result.state_ = stateBuilder_.build();
                    }
                    if ((from_bitField0_ & 1024) == 1024) {
                        to_bitField0_ |= 1024;
                    } 
                    if ((compositeBuilder_) == null) {
                        result.composite_ = composite_;
                    } else {
                        result.composite_ = compositeBuilder_.build();
                    }
                    if ((from_bitField0_ & 2048) == 2048) {
                        to_bitField0_ |= 2048;
                    } 
                    if ((forEachBuilder_) == null) {
                        result.forEach_ = forEach_;
                    } else {
                        result.forEach_ = forEachBuilder_.build();
                    }
                    if ((from_bitField0_ & 4096) == 4096) {
                        to_bitField0_ |= 4096;
                    } 
                    if ((asyncEventBuilder_) == null) {
                        result.asyncEvent_ = asyncEvent_;
                    } else {
                        result.asyncEvent_ = asyncEventBuilder_.build();
                    }
                    result.bitField0_ = to_bitField0_;
                    onBuilt();
                    return result;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeFrom(Message other) {
                    if (other instanceof JBPMMessages.ProcessInstance.NodeInstanceContent) {
                        return mergeFrom(((JBPMMessages.ProcessInstance.NodeInstanceContent) (other)));
                    } else {
                        super.mergeFrom(other);
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                    }
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeFrom(JBPMMessages.ProcessInstance.NodeInstanceContent other) {
                    if (other == (JBPMMessages.ProcessInstance.NodeInstanceContent.getDefaultInstance()))
                        return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                    
                    if (other.hasType()) {
                        setType(other.getType());
                    } 
                    if (other.hasRuleSet()) {
                        mergeRuleSet(other.getRuleSet());
                    } 
                    if (other.hasHumanTask()) {
                        mergeHumanTask(other.getHumanTask());
                    } 
                    if (other.hasWorkItem()) {
                        mergeWorkItem(other.getWorkItem());
                    } 
                    if (other.hasSubProcess()) {
                        mergeSubProcess(other.getSubProcess());
                    } 
                    if (other.hasMilestone()) {
                        mergeMilestone(other.getMilestone());
                    } 
                    if (other.hasEvent()) {
                        mergeEvent(other.getEvent());
                    } 
                    if (other.hasTimer()) {
                        mergeTimer(other.getTimer());
                    } 
                    if (other.hasJoin()) {
                        mergeJoin(other.getJoin());
                    } 
                    if (other.hasState()) {
                        mergeState(other.getState());
                    } 
                    if (other.hasComposite()) {
                        mergeComposite(other.getComposite());
                    } 
                    if (other.hasForEach()) {
                        mergeForEach(other.getForEach());
                    } 
                    if (other.hasAsyncEvent()) {
                        mergeAsyncEvent(other.getAsyncEvent());
                    } 
                    JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this.mergeUnknownFields(other.getUnknownFields());
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                public final boolean isInitialized() {
                    return true;
                }

                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    JBPMMessages.ProcessInstance.NodeInstanceContent parsedMessage = null;
                    try {
                        parsedMessage = JBPMMessages.ProcessInstance.NodeInstanceContent.PARSER.parsePartialFrom(input, extensionRegistry);
                    } catch (InvalidProtocolBufferException e) {
                        parsedMessage = ((JBPMMessages.ProcessInstance.NodeInstanceContent) (e.getUnfinishedMessage()));
                        throw e;
                    } finally {
                        if (parsedMessage != null) {
                            mergeFrom(parsedMessage);
                        } 
                    }
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                private int bitField0_;

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceType type = 1;
                private JBPMMessages.ProcessInstance.NodeInstanceType type_ = JBPMMessages.ProcessInstance.NodeInstanceType.RULE_SET_NODE;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceType type = 1;</code>
                 */
                public boolean hasType() {
                    return ((bitField0_) & 1) == 1;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceType type = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceType getType() {
                    return type_;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceType type = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setType(JBPMMessages.ProcessInstance.NodeInstanceType value) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    bitField0_ |= 1;
                    type_ = value;
                    onChanged();
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceType type = 1;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearType() {
                    bitField0_ = (bitField0_) & (~1);
                    type_ = JBPMMessages.ProcessInstance.NodeInstanceType.RULE_SET_NODE;
                    onChanged();
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;
                private JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode ruleSet_ = JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNodeOrBuilder> ruleSetBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
                 */
                public boolean hasRuleSet() {
                    return ((bitField0_) & 2) == 2;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode getRuleSet() {
                    if ((ruleSetBuilder_) == null) {
                        return ruleSet_;
                    } else {
                        return ruleSetBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setRuleSet(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode value) {
                    if ((ruleSetBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        ruleSet_ = value;
                        onChanged();
                    } else {
                        ruleSetBuilder_.setMessage(value);
                    }
                    bitField0_ |= 2;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setRuleSet(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder builderForValue) {
                    if ((ruleSetBuilder_) == null) {
                        ruleSet_ = builderForValue.build();
                        onChanged();
                    } else {
                        ruleSetBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 2;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeRuleSet(JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode value) {
                    if ((ruleSetBuilder_) == null) {
                        if ((((bitField0_) & 2) == 2) && ((ruleSet_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.getDefaultInstance()))) {
                            ruleSet_ = JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.newBuilder(ruleSet_).mergeFrom(value).buildPartial();
                        } else {
                            ruleSet_ = value;
                        }
                        onChanged();
                    } else {
                        ruleSetBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 2;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearRuleSet() {
                    if ((ruleSetBuilder_) == null) {
                        ruleSet_ = JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.getDefaultInstance();
                        onChanged();
                    } else {
                        ruleSetBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~2);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder getRuleSetBuilder() {
                    bitField0_ |= 2;
                    onChanged();
                    return getRuleSetFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNodeOrBuilder getRuleSetOrBuilder() {
                    if ((ruleSetBuilder_) != null) {
                        return ruleSetBuilder_.getMessageOrBuilder();
                    } else {
                        return ruleSet_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.RuleSetNode rule_set = 2;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNodeOrBuilder> getRuleSetFieldBuilder() {
                    if ((ruleSetBuilder_) == null) {
                        ruleSetBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.RuleSetNodeOrBuilder>(ruleSet_, getParentForChildren(), isClean());
                        ruleSet_ = null;
                    } 
                    return ruleSetBuilder_;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;
                private JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode humanTask_ = JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode, JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNodeOrBuilder> humanTaskBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
                 */
                public boolean hasHumanTask() {
                    return ((bitField0_) & 4) == 4;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode getHumanTask() {
                    if ((humanTaskBuilder_) == null) {
                        return humanTask_;
                    } else {
                        return humanTaskBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setHumanTask(JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode value) {
                    if ((humanTaskBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        humanTask_ = value;
                        onChanged();
                    } else {
                        humanTaskBuilder_.setMessage(value);
                    }
                    bitField0_ |= 4;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setHumanTask(JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder builderForValue) {
                    if ((humanTaskBuilder_) == null) {
                        humanTask_ = builderForValue.build();
                        onChanged();
                    } else {
                        humanTaskBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 4;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeHumanTask(JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode value) {
                    if ((humanTaskBuilder_) == null) {
                        if ((((bitField0_) & 4) == 4) && ((humanTask_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.getDefaultInstance()))) {
                            humanTask_ = JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.newBuilder(humanTask_).mergeFrom(value).buildPartial();
                        } else {
                            humanTask_ = value;
                        }
                        onChanged();
                    } else {
                        humanTaskBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 4;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearHumanTask() {
                    if ((humanTaskBuilder_) == null) {
                        humanTask_ = JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.getDefaultInstance();
                        onChanged();
                    } else {
                        humanTaskBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~4);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder getHumanTaskBuilder() {
                    bitField0_ |= 4;
                    onChanged();
                    return getHumanTaskFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNodeOrBuilder getHumanTaskOrBuilder() {
                    if ((humanTaskBuilder_) != null) {
                        return humanTaskBuilder_.getMessageOrBuilder();
                    } else {
                        return humanTask_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.HumanTaskNode human_task = 3;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode, JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNodeOrBuilder> getHumanTaskFieldBuilder() {
                    if ((humanTaskBuilder_) == null) {
                        humanTaskBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode, JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.HumanTaskNodeOrBuilder>(humanTask_, getParentForChildren(), isClean());
                        humanTask_ = null;
                    } 
                    return humanTaskBuilder_;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;
                private JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode workItem_ = JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode, JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNodeOrBuilder> workItemBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
                 */
                public boolean hasWorkItem() {
                    return ((bitField0_) & 8) == 8;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode getWorkItem() {
                    if ((workItemBuilder_) == null) {
                        return workItem_;
                    } else {
                        return workItemBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setWorkItem(JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode value) {
                    if ((workItemBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        workItem_ = value;
                        onChanged();
                    } else {
                        workItemBuilder_.setMessage(value);
                    }
                    bitField0_ |= 8;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setWorkItem(JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder builderForValue) {
                    if ((workItemBuilder_) == null) {
                        workItem_ = builderForValue.build();
                        onChanged();
                    } else {
                        workItemBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 8;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeWorkItem(JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode value) {
                    if ((workItemBuilder_) == null) {
                        if ((((bitField0_) & 8) == 8) && ((workItem_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.getDefaultInstance()))) {
                            workItem_ = JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.newBuilder(workItem_).mergeFrom(value).buildPartial();
                        } else {
                            workItem_ = value;
                        }
                        onChanged();
                    } else {
                        workItemBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 8;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearWorkItem() {
                    if ((workItemBuilder_) == null) {
                        workItem_ = JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.getDefaultInstance();
                        onChanged();
                    } else {
                        workItemBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~8);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder getWorkItemBuilder() {
                    bitField0_ |= 8;
                    onChanged();
                    return getWorkItemFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNodeOrBuilder getWorkItemOrBuilder() {
                    if ((workItemBuilder_) != null) {
                        return workItemBuilder_.getMessageOrBuilder();
                    } else {
                        return workItem_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.WorkItemNode work_item = 4;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode, JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNodeOrBuilder> getWorkItemFieldBuilder() {
                    if ((workItemBuilder_) == null) {
                        workItemBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode, JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.WorkItemNodeOrBuilder>(workItem_, getParentForChildren(), isClean());
                        workItem_ = null;
                    } 
                    return workItemBuilder_;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;
                private JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode subProcess_ = JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode, JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNodeOrBuilder> subProcessBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
                 */
                public boolean hasSubProcess() {
                    return ((bitField0_) & 16) == 16;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode getSubProcess() {
                    if ((subProcessBuilder_) == null) {
                        return subProcess_;
                    } else {
                        return subProcessBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setSubProcess(JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode value) {
                    if ((subProcessBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        subProcess_ = value;
                        onChanged();
                    } else {
                        subProcessBuilder_.setMessage(value);
                    }
                    bitField0_ |= 16;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setSubProcess(JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder builderForValue) {
                    if ((subProcessBuilder_) == null) {
                        subProcess_ = builderForValue.build();
                        onChanged();
                    } else {
                        subProcessBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 16;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeSubProcess(JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode value) {
                    if ((subProcessBuilder_) == null) {
                        if ((((bitField0_) & 16) == 16) && ((subProcess_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.getDefaultInstance()))) {
                            subProcess_ = JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.newBuilder(subProcess_).mergeFrom(value).buildPartial();
                        } else {
                            subProcess_ = value;
                        }
                        onChanged();
                    } else {
                        subProcessBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 16;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearSubProcess() {
                    if ((subProcessBuilder_) == null) {
                        subProcess_ = JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.getDefaultInstance();
                        onChanged();
                    } else {
                        subProcessBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~16);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder getSubProcessBuilder() {
                    bitField0_ |= 16;
                    onChanged();
                    return getSubProcessFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNodeOrBuilder getSubProcessOrBuilder() {
                    if ((subProcessBuilder_) != null) {
                        return subProcessBuilder_.getMessageOrBuilder();
                    } else {
                        return subProcess_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.SubProcessNode sub_process = 5;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode, JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNodeOrBuilder> getSubProcessFieldBuilder() {
                    if ((subProcessBuilder_) == null) {
                        subProcessBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode, JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.SubProcessNodeOrBuilder>(subProcess_, getParentForChildren(), isClean());
                        subProcess_ = null;
                    } 
                    return subProcessBuilder_;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;
                private JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode milestone_ = JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode, JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNodeOrBuilder> milestoneBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
                 */
                public boolean hasMilestone() {
                    return ((bitField0_) & 32) == 32;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode getMilestone() {
                    if ((milestoneBuilder_) == null) {
                        return milestone_;
                    } else {
                        return milestoneBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setMilestone(JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode value) {
                    if ((milestoneBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        milestone_ = value;
                        onChanged();
                    } else {
                        milestoneBuilder_.setMessage(value);
                    }
                    bitField0_ |= 32;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setMilestone(JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder builderForValue) {
                    if ((milestoneBuilder_) == null) {
                        milestone_ = builderForValue.build();
                        onChanged();
                    } else {
                        milestoneBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 32;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeMilestone(JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode value) {
                    if ((milestoneBuilder_) == null) {
                        if ((((bitField0_) & 32) == 32) && ((milestone_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.getDefaultInstance()))) {
                            milestone_ = JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.newBuilder(milestone_).mergeFrom(value).buildPartial();
                        } else {
                            milestone_ = value;
                        }
                        onChanged();
                    } else {
                        milestoneBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 32;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearMilestone() {
                    if ((milestoneBuilder_) == null) {
                        milestone_ = JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.getDefaultInstance();
                        onChanged();
                    } else {
                        milestoneBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~32);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder getMilestoneBuilder() {
                    bitField0_ |= 32;
                    onChanged();
                    return getMilestoneFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNodeOrBuilder getMilestoneOrBuilder() {
                    if ((milestoneBuilder_) != null) {
                        return milestoneBuilder_.getMessageOrBuilder();
                    } else {
                        return milestone_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.MilestoneNode milestone = 6;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode, JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNodeOrBuilder> getMilestoneFieldBuilder() {
                    if ((milestoneBuilder_) == null) {
                        milestoneBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode, JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.MilestoneNodeOrBuilder>(milestone_, getParentForChildren(), isClean());
                        milestone_ = null;
                    } 
                    return milestoneBuilder_;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;
                private JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode event_ = JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode, JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.EventNodeOrBuilder> eventBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
                 */
                public boolean hasEvent() {
                    return ((bitField0_) & 64) == 64;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode getEvent() {
                    if ((eventBuilder_) == null) {
                        return event_;
                    } else {
                        return eventBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setEvent(JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode value) {
                    if ((eventBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        event_ = value;
                        onChanged();
                    } else {
                        eventBuilder_.setMessage(value);
                    }
                    bitField0_ |= 64;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setEvent(JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder builderForValue) {
                    if ((eventBuilder_) == null) {
                        event_ = builderForValue.build();
                        onChanged();
                    } else {
                        eventBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 64;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeEvent(JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode value) {
                    if ((eventBuilder_) == null) {
                        if ((((bitField0_) & 64) == 64) && ((event_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.getDefaultInstance()))) {
                            event_ = JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.newBuilder(event_).mergeFrom(value).buildPartial();
                        } else {
                            event_ = value;
                        }
                        onChanged();
                    } else {
                        eventBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 64;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearEvent() {
                    if ((eventBuilder_) == null) {
                        event_ = JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.getDefaultInstance();
                        onChanged();
                    } else {
                        eventBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~64);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder getEventBuilder() {
                    bitField0_ |= 64;
                    onChanged();
                    return getEventFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.EventNodeOrBuilder getEventOrBuilder() {
                    if ((eventBuilder_) != null) {
                        return eventBuilder_.getMessageOrBuilder();
                    } else {
                        return event_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.EventNode event = 7;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode, JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.EventNodeOrBuilder> getEventFieldBuilder() {
                    if ((eventBuilder_) == null) {
                        eventBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode, JBPMMessages.ProcessInstance.NodeInstanceContent.EventNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.EventNodeOrBuilder>(event_, getParentForChildren(), isClean());
                        event_ = null;
                    } 
                    return eventBuilder_;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;
                private JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode timer_ = JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode, JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNodeOrBuilder> timerBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
                 */
                public boolean hasTimer() {
                    return ((bitField0_) & 128) == 128;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode getTimer() {
                    if ((timerBuilder_) == null) {
                        return timer_;
                    } else {
                        return timerBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setTimer(JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode value) {
                    if ((timerBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        timer_ = value;
                        onChanged();
                    } else {
                        timerBuilder_.setMessage(value);
                    }
                    bitField0_ |= 128;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setTimer(JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder builderForValue) {
                    if ((timerBuilder_) == null) {
                        timer_ = builderForValue.build();
                        onChanged();
                    } else {
                        timerBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 128;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeTimer(JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode value) {
                    if ((timerBuilder_) == null) {
                        if ((((bitField0_) & 128) == 128) && ((timer_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.getDefaultInstance()))) {
                            timer_ = JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.newBuilder(timer_).mergeFrom(value).buildPartial();
                        } else {
                            timer_ = value;
                        }
                        onChanged();
                    } else {
                        timerBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 128;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearTimer() {
                    if ((timerBuilder_) == null) {
                        timer_ = JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.getDefaultInstance();
                        onChanged();
                    } else {
                        timerBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~128);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder getTimerBuilder() {
                    bitField0_ |= 128;
                    onChanged();
                    return getTimerFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNodeOrBuilder getTimerOrBuilder() {
                    if ((timerBuilder_) != null) {
                        return timerBuilder_.getMessageOrBuilder();
                    } else {
                        return timer_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.TimerNode timer = 8;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode, JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNodeOrBuilder> getTimerFieldBuilder() {
                    if ((timerBuilder_) == null) {
                        timerBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode, JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.TimerNodeOrBuilder>(timer_, getParentForChildren(), isClean());
                        timer_ = null;
                    } 
                    return timerBuilder_;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;
                private JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode join_ = JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNodeOrBuilder> joinBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
                 */
                public boolean hasJoin() {
                    return ((bitField0_) & 256) == 256;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode getJoin() {
                    if ((joinBuilder_) == null) {
                        return join_;
                    } else {
                        return joinBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setJoin(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode value) {
                    if ((joinBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        join_ = value;
                        onChanged();
                    } else {
                        joinBuilder_.setMessage(value);
                    }
                    bitField0_ |= 256;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setJoin(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder builderForValue) {
                    if ((joinBuilder_) == null) {
                        join_ = builderForValue.build();
                        onChanged();
                    } else {
                        joinBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 256;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeJoin(JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode value) {
                    if ((joinBuilder_) == null) {
                        if ((((bitField0_) & 256) == 256) && ((join_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.getDefaultInstance()))) {
                            join_ = JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.newBuilder(join_).mergeFrom(value).buildPartial();
                        } else {
                            join_ = value;
                        }
                        onChanged();
                    } else {
                        joinBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 256;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearJoin() {
                    if ((joinBuilder_) == null) {
                        join_ = JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.getDefaultInstance();
                        onChanged();
                    } else {
                        joinBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~256);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder getJoinBuilder() {
                    bitField0_ |= 256;
                    onChanged();
                    return getJoinFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNodeOrBuilder getJoinOrBuilder() {
                    if ((joinBuilder_) != null) {
                        return joinBuilder_.getMessageOrBuilder();
                    } else {
                        return join_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.JoinNode join = 9;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNodeOrBuilder> getJoinFieldBuilder() {
                    if ((joinBuilder_) == null) {
                        joinBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.JoinNodeOrBuilder>(join_, getParentForChildren(), isClean());
                        join_ = null;
                    } 
                    return joinBuilder_;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;
                private JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode state_ = JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode, JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.StateNodeOrBuilder> stateBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
                 */
                public boolean hasState() {
                    return ((bitField0_) & 512) == 512;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode getState() {
                    if ((stateBuilder_) == null) {
                        return state_;
                    } else {
                        return stateBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setState(JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode value) {
                    if ((stateBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        state_ = value;
                        onChanged();
                    } else {
                        stateBuilder_.setMessage(value);
                    }
                    bitField0_ |= 512;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setState(JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder builderForValue) {
                    if ((stateBuilder_) == null) {
                        state_ = builderForValue.build();
                        onChanged();
                    } else {
                        stateBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 512;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeState(JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode value) {
                    if ((stateBuilder_) == null) {
                        if ((((bitField0_) & 512) == 512) && ((state_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.getDefaultInstance()))) {
                            state_ = JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.newBuilder(state_).mergeFrom(value).buildPartial();
                        } else {
                            state_ = value;
                        }
                        onChanged();
                    } else {
                        stateBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 512;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearState() {
                    if ((stateBuilder_) == null) {
                        state_ = JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.getDefaultInstance();
                        onChanged();
                    } else {
                        stateBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~512);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder getStateBuilder() {
                    bitField0_ |= 512;
                    onChanged();
                    return getStateFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.StateNodeOrBuilder getStateOrBuilder() {
                    if ((stateBuilder_) != null) {
                        return stateBuilder_.getMessageOrBuilder();
                    } else {
                        return state_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.StateNode state = 10;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode, JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.StateNodeOrBuilder> getStateFieldBuilder() {
                    if ((stateBuilder_) == null) {
                        stateBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode, JBPMMessages.ProcessInstance.NodeInstanceContent.StateNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.StateNodeOrBuilder>(state_, getParentForChildren(), isClean());
                        state_ = null;
                    } 
                    return stateBuilder_;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;
                private JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode composite_ = JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode, JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNodeOrBuilder> compositeBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
                 */
                public boolean hasComposite() {
                    return ((bitField0_) & 1024) == 1024;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode getComposite() {
                    if ((compositeBuilder_) == null) {
                        return composite_;
                    } else {
                        return compositeBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setComposite(JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode value) {
                    if ((compositeBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        composite_ = value;
                        onChanged();
                    } else {
                        compositeBuilder_.setMessage(value);
                    }
                    bitField0_ |= 1024;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setComposite(JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder builderForValue) {
                    if ((compositeBuilder_) == null) {
                        composite_ = builderForValue.build();
                        onChanged();
                    } else {
                        compositeBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 1024;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeComposite(JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode value) {
                    if ((compositeBuilder_) == null) {
                        if ((((bitField0_) & 1024) == 1024) && ((composite_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.getDefaultInstance()))) {
                            composite_ = JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.newBuilder(composite_).mergeFrom(value).buildPartial();
                        } else {
                            composite_ = value;
                        }
                        onChanged();
                    } else {
                        compositeBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 1024;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearComposite() {
                    if ((compositeBuilder_) == null) {
                        composite_ = JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.getDefaultInstance();
                        onChanged();
                    } else {
                        compositeBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~1024);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder getCompositeBuilder() {
                    bitField0_ |= 1024;
                    onChanged();
                    return getCompositeFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNodeOrBuilder getCompositeOrBuilder() {
                    if ((compositeBuilder_) != null) {
                        return compositeBuilder_.getMessageOrBuilder();
                    } else {
                        return composite_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.CompositeContextNode composite = 11;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode, JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNodeOrBuilder> getCompositeFieldBuilder() {
                    if ((compositeBuilder_) == null) {
                        compositeBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode, JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.CompositeContextNodeOrBuilder>(composite_, getParentForChildren(), isClean());
                        composite_ = null;
                    } 
                    return compositeBuilder_;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;
                private JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode forEach_ = JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode, JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNodeOrBuilder> forEachBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
                 */
                public boolean hasForEach() {
                    return ((bitField0_) & 2048) == 2048;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode getForEach() {
                    if ((forEachBuilder_) == null) {
                        return forEach_;
                    } else {
                        return forEachBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setForEach(JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode value) {
                    if ((forEachBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        forEach_ = value;
                        onChanged();
                    } else {
                        forEachBuilder_.setMessage(value);
                    }
                    bitField0_ |= 2048;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setForEach(JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder builderForValue) {
                    if ((forEachBuilder_) == null) {
                        forEach_ = builderForValue.build();
                        onChanged();
                    } else {
                        forEachBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 2048;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeForEach(JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode value) {
                    if ((forEachBuilder_) == null) {
                        if ((((bitField0_) & 2048) == 2048) && ((forEach_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.getDefaultInstance()))) {
                            forEach_ = JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.newBuilder(forEach_).mergeFrom(value).buildPartial();
                        } else {
                            forEach_ = value;
                        }
                        onChanged();
                    } else {
                        forEachBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 2048;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearForEach() {
                    if ((forEachBuilder_) == null) {
                        forEach_ = JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.getDefaultInstance();
                        onChanged();
                    } else {
                        forEachBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~2048);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder getForEachBuilder() {
                    bitField0_ |= 2048;
                    onChanged();
                    return getForEachFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNodeOrBuilder getForEachOrBuilder() {
                    if ((forEachBuilder_) != null) {
                        return forEachBuilder_.getMessageOrBuilder();
                    } else {
                        return forEach_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.ForEachNode for_each = 12;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode, JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNodeOrBuilder> getForEachFieldBuilder() {
                    if ((forEachBuilder_) == null) {
                        forEachBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode, JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.ForEachNodeOrBuilder>(forEach_, getParentForChildren(), isClean());
                        forEach_ = null;
                    } 
                    return forEachBuilder_;
                }

                // optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;
                private JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode asyncEvent_ = JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.getDefaultInstance();

                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode, JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNodeOrBuilder> asyncEventBuilder_;

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
                 */
                public boolean hasAsyncEvent() {
                    return ((bitField0_) & 4096) == 4096;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode getAsyncEvent() {
                    if ((asyncEventBuilder_) == null) {
                        return asyncEvent_;
                    } else {
                        return asyncEventBuilder_.getMessage();
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setAsyncEvent(JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode value) {
                    if ((asyncEventBuilder_) == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        } 
                        asyncEvent_ = value;
                        onChanged();
                    } else {
                        asyncEventBuilder_.setMessage(value);
                    }
                    bitField0_ |= 4096;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder setAsyncEvent(JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder builderForValue) {
                    if ((asyncEventBuilder_) == null) {
                        asyncEvent_ = builderForValue.build();
                        onChanged();
                    } else {
                        asyncEventBuilder_.setMessage(builderForValue.build());
                    }
                    bitField0_ |= 4096;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder mergeAsyncEvent(JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode value) {
                    if ((asyncEventBuilder_) == null) {
                        if ((((bitField0_) & 4096) == 4096) && ((asyncEvent_) != (JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.getDefaultInstance()))) {
                            asyncEvent_ = JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.newBuilder(asyncEvent_).mergeFrom(value).buildPartial();
                        } else {
                            asyncEvent_ = value;
                        }
                        onChanged();
                    } else {
                        asyncEventBuilder_.mergeFrom(value);
                    }
                    bitField0_ |= 4096;
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.Builder clearAsyncEvent() {
                    if ((asyncEventBuilder_) == null) {
                        asyncEvent_ = JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.getDefaultInstance();
                        onChanged();
                    } else {
                        asyncEventBuilder_.clear();
                    }
                    bitField0_ = (bitField0_) & (~4096);
                    return JBPMMessages.ProcessInstance.NodeInstanceContent.Builder.this;
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder getAsyncEventBuilder() {
                    bitField0_ |= 4096;
                    onChanged();
                    return getAsyncEventFieldBuilder().getBuilder();
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
                 */
                public JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNodeOrBuilder getAsyncEventOrBuilder() {
                    if ((asyncEventBuilder_) != null) {
                        return asyncEventBuilder_.getMessageOrBuilder();
                    } else {
                        return asyncEvent_;
                    }
                }

                /**
                 * <code>optional .org.jbpm.marshalling.ProcessInstance.NodeInstanceContent.AsyncEventNode async_event = 13;</code>
                 */
                private SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode, JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNodeOrBuilder> getAsyncEventFieldBuilder() {
                    if ((asyncEventBuilder_) == null) {
                        asyncEventBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode, JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNode.Builder, JBPMMessages.ProcessInstance.NodeInstanceContent.AsyncEventNodeOrBuilder>(asyncEvent_, getParentForChildren(), isClean());
                        asyncEvent_ = null;
                    } 
                    return asyncEventBuilder_;
                }

                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent)
            }

            static {
                defaultInstance = new JBPMMessages.ProcessInstance.NodeInstanceContent(true);
                JBPMMessages.ProcessInstance.NodeInstanceContent.defaultInstance.initFields();
            }

            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance.NodeInstanceContent)
        }

        private int bitField0_;

        // optional string process_type = 1;
        public static final int PROCESS_TYPE_FIELD_NUMBER = 1;

        private Object processType_;

        /**
         * <code>optional string process_type = 1;</code>
         */
        public boolean hasProcessType() {
            return ((bitField0_) & 1) == 1;
        }

        /**
         * <code>optional string process_type = 1;</code>
         */
        public String getProcessType() {
            Object ref = processType_;
            if (ref instanceof String) {
                return ((String) (ref));
            } else {
                ByteString bs = ((ByteString) (ref));
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    processType_ = s;
                } 
                return s;
            }
        }

        /**
         * <code>optional string process_type = 1;</code>
         */
        public ByteString getProcessTypeBytes() {
            Object ref = processType_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                processType_ = b;
                return b;
            } else {
                return ((ByteString) (ref));
            }
        }

        // optional int64 id = 2;
        public static final int ID_FIELD_NUMBER = 2;

        private long id_;

        /**
         * <code>optional int64 id = 2;</code>
         */
        public boolean hasId() {
            return ((bitField0_) & 2) == 2;
        }

        /**
         * <code>optional int64 id = 2;</code>
         */
        public long getId() {
            return id_;
        }

        // optional string process_id = 3;
        public static final int PROCESS_ID_FIELD_NUMBER = 3;

        private Object processId_;

        /**
         * <code>optional string process_id = 3;</code>
         */
        public boolean hasProcessId() {
            return ((bitField0_) & 4) == 4;
        }

        /**
         * <code>optional string process_id = 3;</code>
         */
        public String getProcessId() {
            Object ref = processId_;
            if (ref instanceof String) {
                return ((String) (ref));
            } else {
                ByteString bs = ((ByteString) (ref));
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    processId_ = s;
                } 
                return s;
            }
        }

        /**
         * <code>optional string process_id = 3;</code>
         */
        public ByteString getProcessIdBytes() {
            Object ref = processId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                processId_ = b;
                return b;
            } else {
                return ((ByteString) (ref));
            }
        }

        // optional int32 state = 4;
        public static final int STATE_FIELD_NUMBER = 4;

        private int state_;

        /**
         * <code>optional int32 state = 4;</code>
         */
        public boolean hasState() {
            return ((bitField0_) & 8) == 8;
        }

        /**
         * <code>optional int32 state = 4;</code>
         */
        public int getState() {
            return state_;
        }

        // optional int64 node_instance_counter = 5;
        public static final int NODE_INSTANCE_COUNTER_FIELD_NUMBER = 5;

        private long nodeInstanceCounter_;

        /**
         * <code>optional int64 node_instance_counter = 5;</code>
         */
        public boolean hasNodeInstanceCounter() {
            return ((bitField0_) & 16) == 16;
        }

        /**
         * <code>optional int64 node_instance_counter = 5;</code>
         */
        public long getNodeInstanceCounter() {
            return nodeInstanceCounter_;
        }

        // optional string process_xml = 11;
        public static final int PROCESS_XML_FIELD_NUMBER = 11;

        private Object processXml_;

        /**
         * <code>optional string process_xml = 11;</code>
         */
        public boolean hasProcessXml() {
            return ((bitField0_) & 32) == 32;
        }

        /**
         * <code>optional string process_xml = 11;</code>
         */
        public String getProcessXml() {
            Object ref = processXml_;
            if (ref instanceof String) {
                return ((String) (ref));
            } else {
                ByteString bs = ((ByteString) (ref));
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    processXml_ = s;
                } 
                return s;
            }
        }

        /**
         * <code>optional string process_xml = 11;</code>
         */
        public ByteString getProcessXmlBytes() {
            Object ref = processXml_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                processXml_ = b;
                return b;
            } else {
                return ((ByteString) (ref));
            }
        }

        // optional int64 parent_process_instance_id = 12;
        public static final int PARENT_PROCESS_INSTANCE_ID_FIELD_NUMBER = 12;

        private long parentProcessInstanceId_;

        /**
         * <code>optional int64 parent_process_instance_id = 12;</code>
         */
        public boolean hasParentProcessInstanceId() {
            return ((bitField0_) & 64) == 64;
        }

        /**
         * <code>optional int64 parent_process_instance_id = 12;</code>
         */
        public long getParentProcessInstanceId() {
            return parentProcessInstanceId_;
        }

        // optional string description = 15;
        public static final int DESCRIPTION_FIELD_NUMBER = 15;

        private Object description_;

        /**
         * <code>optional string description = 15;</code>
         */
        public boolean hasDescription() {
            return ((bitField0_) & 128) == 128;
        }

        /**
         * <code>optional string description = 15;</code>
         */
        public String getDescription() {
            Object ref = description_;
            if (ref instanceof String) {
                return ((String) (ref));
            } else {
                ByteString bs = ((ByteString) (ref));
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    description_ = s;
                } 
                return s;
            }
        }

        /**
         * <code>optional string description = 15;</code>
         */
        public ByteString getDescriptionBytes() {
            Object ref = description_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                description_ = b;
                return b;
            } else {
                return ((ByteString) (ref));
            }
        }

        // optional bool signal_completion = 16 [default = true];
        public static final int SIGNAL_COMPLETION_FIELD_NUMBER = 16;

        private boolean signalCompletion_;

        /**
         * <code>optional bool signal_completion = 16 [default = true];</code>
         */
        public boolean hasSignalCompletion() {
            return ((bitField0_) & 256) == 256;
        }

        /**
         * <code>optional bool signal_completion = 16 [default = true];</code>
         */
        public boolean getSignalCompletion() {
            return signalCompletion_;
        }

        // optional string deploymentId = 17;
        public static final int DEPLOYMENTID_FIELD_NUMBER = 17;

        private Object deploymentId_;

        /**
         * <code>optional string deploymentId = 17;</code>
         */
        public boolean hasDeploymentId() {
            return ((bitField0_) & 512) == 512;
        }

        /**
         * <code>optional string deploymentId = 17;</code>
         */
        public String getDeploymentId() {
            Object ref = deploymentId_;
            if (ref instanceof String) {
                return ((String) (ref));
            } else {
                ByteString bs = ((ByteString) (ref));
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    deploymentId_ = s;
                } 
                return s;
            }
        }

        /**
         * <code>optional string deploymentId = 17;</code>
         */
        public ByteString getDeploymentIdBytes() {
            Object ref = deploymentId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                deploymentId_ = b;
                return b;
            } else {
                return ((ByteString) (ref));
            }
        }

        // optional string correlation_key = 18;
        public static final int CORRELATION_KEY_FIELD_NUMBER = 18;

        private Object correlationKey_;

        /**
         * <code>optional string correlation_key = 18;</code>
         */
        public boolean hasCorrelationKey() {
            return ((bitField0_) & 1024) == 1024;
        }

        /**
         * <code>optional string correlation_key = 18;</code>
         */
        public String getCorrelationKey() {
            Object ref = correlationKey_;
            if (ref instanceof String) {
                return ((String) (ref));
            } else {
                ByteString bs = ((ByteString) (ref));
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    correlationKey_ = s;
                } 
                return s;
            }
        }

        /**
         * <code>optional string correlation_key = 18;</code>
         */
        public ByteString getCorrelationKeyBytes() {
            Object ref = correlationKey_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                correlationKey_ = b;
                return b;
            } else {
                return ((ByteString) (ref));
            }
        }

        // repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;
        public static final int SWIMLANE_CONTEXT_FIELD_NUMBER = 6;

        private List<JBPMMessages.ProcessInstance.SwimlaneContextInstance> swimlaneContext_;

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
         */
        public List<JBPMMessages.ProcessInstance.SwimlaneContextInstance> getSwimlaneContextList() {
            return swimlaneContext_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
         */
        public List<? extends JBPMMessages.ProcessInstance.SwimlaneContextInstanceOrBuilder> getSwimlaneContextOrBuilderList() {
            return swimlaneContext_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
         */
        public int getSwimlaneContextCount() {
            return swimlaneContext_.size();
        }

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
         */
        public JBPMMessages.ProcessInstance.SwimlaneContextInstance getSwimlaneContext(int index) {
            return swimlaneContext_.get(index);
        }

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
         */
        public JBPMMessages.ProcessInstance.SwimlaneContextInstanceOrBuilder getSwimlaneContextOrBuilder(int index) {
            return swimlaneContext_.get(index);
        }

        // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;
        public static final int NODE_INSTANCE_FIELD_NUMBER = 7;

        private List<JBPMMessages.ProcessInstance.NodeInstance> nodeInstance_;

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
         */
        public List<JBPMMessages.ProcessInstance.NodeInstance> getNodeInstanceList() {
            return nodeInstance_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
         */
        public List<? extends JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> getNodeInstanceOrBuilderList() {
            return nodeInstance_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
         */
        public int getNodeInstanceCount() {
            return nodeInstance_.size();
        }

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
         */
        public JBPMMessages.ProcessInstance.NodeInstance getNodeInstance(int index) {
            return nodeInstance_.get(index);
        }

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
         */
        public JBPMMessages.ProcessInstance.NodeInstanceOrBuilder getNodeInstanceOrBuilder(int index) {
            return nodeInstance_.get(index);
        }

        // repeated .org.jbpm.marshalling.Variable variable = 8;
        public static final int VARIABLE_FIELD_NUMBER = 8;

        private List<JBPMMessages.Variable> variable_;

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
         */
        public List<JBPMMessages.Variable> getVariableList() {
            return variable_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
         */
        public List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList() {
            return variable_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
         */
        public int getVariableCount() {
            return variable_.size();
        }

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
         */
        public JBPMMessages.Variable getVariable(int index) {
            return variable_.get(index);
        }

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
         */
        public JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index) {
            return variable_.get(index);
        }

        // repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;
        public static final int EXCLUSIVE_GROUP_FIELD_NUMBER = 10;

        private List<JBPMMessages.ProcessInstance.ExclusiveGroupInstance> exclusiveGroup_;

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
         */
        public List<JBPMMessages.ProcessInstance.ExclusiveGroupInstance> getExclusiveGroupList() {
            return exclusiveGroup_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
         */
        public List<? extends JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder> getExclusiveGroupOrBuilderList() {
            return exclusiveGroup_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
         */
        public int getExclusiveGroupCount() {
            return exclusiveGroup_.size();
        }

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
         */
        public JBPMMessages.ProcessInstance.ExclusiveGroupInstance getExclusiveGroup(int index) {
            return exclusiveGroup_.get(index);
        }

        /**
         * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
         */
        public JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder getExclusiveGroupOrBuilder(int index) {
            return exclusiveGroup_.get(index);
        }

        // repeated string completedNodeIds = 13;
        public static final int COMPLETEDNODEIDS_FIELD_NUMBER = 13;

        private LazyStringList completedNodeIds_;

        /**
         * <code>repeated string completedNodeIds = 13;</code>
         */
        public List<String> getCompletedNodeIdsList() {
            return completedNodeIds_;
        }

        /**
         * <code>repeated string completedNodeIds = 13;</code>
         */
        public int getCompletedNodeIdsCount() {
            return completedNodeIds_.size();
        }

        /**
         * <code>repeated string completedNodeIds = 13;</code>
         */
        public String getCompletedNodeIds(int index) {
            return completedNodeIds_.get(index);
        }

        /**
         * <code>repeated string completedNodeIds = 13;</code>
         */
        public ByteString getCompletedNodeIdsBytes(int index) {
            return completedNodeIds_.getByteString(index);
        }

        // repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;
        public static final int ITERATIONLEVELS_FIELD_NUMBER = 14;

        private List<JBPMMessages.IterationLevel> iterationLevels_;

        /**
         * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
         */
        public List<JBPMMessages.IterationLevel> getIterationLevelsList() {
            return iterationLevels_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
         */
        public List<? extends JBPMMessages.IterationLevelOrBuilder> getIterationLevelsOrBuilderList() {
            return iterationLevels_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
         */
        public int getIterationLevelsCount() {
            return iterationLevels_.size();
        }

        /**
         * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
         */
        public JBPMMessages.IterationLevel getIterationLevels(int index) {
            return iterationLevels_.get(index);
        }

        /**
         * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
         */
        public JBPMMessages.IterationLevelOrBuilder getIterationLevelsOrBuilder(int index) {
            return iterationLevels_.get(index);
        }

        private void initFields() {
            processType_ = "";
            id_ = 0L;
            processId_ = "";
            state_ = 0;
            nodeInstanceCounter_ = 0L;
            processXml_ = "";
            parentProcessInstanceId_ = 0L;
            description_ = "";
            signalCompletion_ = true;
            deploymentId_ = "";
            correlationKey_ = "";
            swimlaneContext_ = Collections.emptyList();
            nodeInstance_ = Collections.emptyList();
            variable_ = Collections.emptyList();
            exclusiveGroup_ = Collections.emptyList();
            completedNodeIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
            iterationLevels_ = Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != (-1))
                return isInitialized == 1;
            
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if (((bitField0_) & 1) == 1) {
                output.writeBytes(1, getProcessTypeBytes());
            } 
            if (((bitField0_) & 2) == 2) {
                output.writeInt64(2, id_);
            } 
            if (((bitField0_) & 4) == 4) {
                output.writeBytes(3, getProcessIdBytes());
            } 
            if (((bitField0_) & 8) == 8) {
                output.writeInt32(4, state_);
            } 
            if (((bitField0_) & 16) == 16) {
                output.writeInt64(5, nodeInstanceCounter_);
            } 
            for (int i = 0; i < (swimlaneContext_.size()); i++) {
                output.writeMessage(6, swimlaneContext_.get(i));
            }
            for (int i = 0; i < (nodeInstance_.size()); i++) {
                output.writeMessage(7, nodeInstance_.get(i));
            }
            for (int i = 0; i < (variable_.size()); i++) {
                output.writeMessage(8, variable_.get(i));
            }
            for (int i = 0; i < (exclusiveGroup_.size()); i++) {
                output.writeMessage(10, exclusiveGroup_.get(i));
            }
            if (((bitField0_) & 32) == 32) {
                output.writeBytes(11, getProcessXmlBytes());
            } 
            if (((bitField0_) & 64) == 64) {
                output.writeInt64(12, parentProcessInstanceId_);
            } 
            for (int i = 0; i < (completedNodeIds_.size()); i++) {
                output.writeBytes(13, completedNodeIds_.getByteString(i));
            }
            for (int i = 0; i < (iterationLevels_.size()); i++) {
                output.writeMessage(14, iterationLevels_.get(i));
            }
            if (((bitField0_) & 128) == 128) {
                output.writeBytes(15, getDescriptionBytes());
            } 
            if (((bitField0_) & 256) == 256) {
                output.writeBool(16, signalCompletion_);
            } 
            if (((bitField0_) & 512) == 512) {
                output.writeBytes(17, getDeploymentIdBytes());
            } 
            if (((bitField0_) & 1024) == 1024) {
                output.writeBytes(18, getCorrelationKeyBytes());
            } 
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != (-1))
                return size;
            
            size = 0;
            if (((bitField0_) & 1) == 1) {
                size += CodedOutputStream.computeBytesSize(1, getProcessTypeBytes());
            } 
            if (((bitField0_) & 2) == 2) {
                size += CodedOutputStream.computeInt64Size(2, id_);
            } 
            if (((bitField0_) & 4) == 4) {
                size += CodedOutputStream.computeBytesSize(3, getProcessIdBytes());
            } 
            if (((bitField0_) & 8) == 8) {
                size += CodedOutputStream.computeInt32Size(4, state_);
            } 
            if (((bitField0_) & 16) == 16) {
                size += CodedOutputStream.computeInt64Size(5, nodeInstanceCounter_);
            } 
            for (int i = 0; i < (swimlaneContext_.size()); i++) {
                size += CodedOutputStream.computeMessageSize(6, swimlaneContext_.get(i));
            }
            for (int i = 0; i < (nodeInstance_.size()); i++) {
                size += CodedOutputStream.computeMessageSize(7, nodeInstance_.get(i));
            }
            for (int i = 0; i < (variable_.size()); i++) {
                size += CodedOutputStream.computeMessageSize(8, variable_.get(i));
            }
            for (int i = 0; i < (exclusiveGroup_.size()); i++) {
                size += CodedOutputStream.computeMessageSize(10, exclusiveGroup_.get(i));
            }
            if (((bitField0_) & 32) == 32) {
                size += CodedOutputStream.computeBytesSize(11, getProcessXmlBytes());
            } 
            if (((bitField0_) & 64) == 64) {
                size += CodedOutputStream.computeInt64Size(12, parentProcessInstanceId_);
            } 
            {
                int dataSize = 0;
                for (int i = 0; i < (completedNodeIds_.size()); i++) {
                    dataSize += CodedOutputStream.computeBytesSizeNoTag(completedNodeIds_.getByteString(i));
                }
                size += dataSize;
                size += 1 * (getCompletedNodeIdsList().size());
            }
            for (int i = 0; i < (iterationLevels_.size()); i++) {
                size += CodedOutputStream.computeMessageSize(14, iterationLevels_.get(i));
            }
            if (((bitField0_) & 128) == 128) {
                size += CodedOutputStream.computeBytesSize(15, getDescriptionBytes());
            } 
            if (((bitField0_) & 256) == 256) {
                size += CodedOutputStream.computeBoolSize(16, signalCompletion_);
            } 
            if (((bitField0_) & 512) == 512) {
                size += CodedOutputStream.computeBytesSize(17, getDeploymentIdBytes());
            } 
            if (((bitField0_) & 1024) == 1024) {
                size += CodedOutputStream.computeBytesSize(18, getCorrelationKeyBytes());
            } 
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static JBPMMessages.ProcessInstance parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return JBPMMessages.ProcessInstance.PARSER.parseFrom(data);
        }

        public static JBPMMessages.ProcessInstance parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return JBPMMessages.ProcessInstance.PARSER.parseFrom(data, extensionRegistry);
        }

        public static JBPMMessages.ProcessInstance parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return JBPMMessages.ProcessInstance.PARSER.parseFrom(data);
        }

        public static JBPMMessages.ProcessInstance parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return JBPMMessages.ProcessInstance.PARSER.parseFrom(data, extensionRegistry);
        }

        public static JBPMMessages.ProcessInstance parseFrom(InputStream input) throws IOException {
            return JBPMMessages.ProcessInstance.PARSER.parseFrom(input);
        }

        public static JBPMMessages.ProcessInstance parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.ProcessInstance.PARSER.parseFrom(input, extensionRegistry);
        }

        public static JBPMMessages.ProcessInstance parseDelimitedFrom(InputStream input) throws IOException {
            return JBPMMessages.ProcessInstance.PARSER.parseDelimitedFrom(input);
        }

        public static JBPMMessages.ProcessInstance parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.ProcessInstance.PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static JBPMMessages.ProcessInstance parseFrom(CodedInputStream input) throws IOException {
            return JBPMMessages.ProcessInstance.PARSER.parseFrom(input);
        }

        public static JBPMMessages.ProcessInstance parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.ProcessInstance.PARSER.parseFrom(input, extensionRegistry);
        }

        public static JBPMMessages.ProcessInstance.Builder newBuilder() {
            return JBPMMessages.ProcessInstance.Builder.create();
        }

        public JBPMMessages.ProcessInstance.Builder newBuilderForType() {
            return JBPMMessages.ProcessInstance.newBuilder();
        }

        public static JBPMMessages.ProcessInstance.Builder newBuilder(JBPMMessages.ProcessInstance prototype) {
            return JBPMMessages.ProcessInstance.newBuilder().mergeFrom(prototype);
        }

        public JBPMMessages.ProcessInstance.Builder toBuilder() {
            return JBPMMessages.ProcessInstance.newBuilder(JBPMMessages.ProcessInstance.this);
        }

        @Override
        protected JBPMMessages.ProcessInstance.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            JBPMMessages.ProcessInstance.Builder builder = new JBPMMessages.ProcessInstance.Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.jbpm.marshalling.ProcessInstance}
         */
        // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance)
        public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessInstance.Builder> implements JBPMMessages.ProcessInstanceOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessInstance.class, JBPMMessages.ProcessInstance.Builder.class);
            }

            // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getSwimlaneContextFieldBuilder();
                    getNodeInstanceFieldBuilder();
                    getVariableFieldBuilder();
                    getExclusiveGroupFieldBuilder();
                    getIterationLevelsFieldBuilder();
                } 
            }

            private static JBPMMessages.ProcessInstance.Builder create() {
                return new JBPMMessages.ProcessInstance.Builder();
            }

            public JBPMMessages.ProcessInstance.Builder clear() {
                super.clear();
                processType_ = "";
                bitField0_ = (bitField0_) & (~1);
                id_ = 0L;
                bitField0_ = (bitField0_) & (~2);
                processId_ = "";
                bitField0_ = (bitField0_) & (~4);
                state_ = 0;
                bitField0_ = (bitField0_) & (~8);
                nodeInstanceCounter_ = 0L;
                bitField0_ = (bitField0_) & (~16);
                processXml_ = "";
                bitField0_ = (bitField0_) & (~32);
                parentProcessInstanceId_ = 0L;
                bitField0_ = (bitField0_) & (~64);
                description_ = "";
                bitField0_ = (bitField0_) & (~128);
                signalCompletion_ = true;
                bitField0_ = (bitField0_) & (~256);
                deploymentId_ = "";
                bitField0_ = (bitField0_) & (~512);
                correlationKey_ = "";
                bitField0_ = (bitField0_) & (~1024);
                if ((swimlaneContextBuilder_) == null) {
                    swimlaneContext_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~2048);
                } else {
                    swimlaneContextBuilder_.clear();
                }
                if ((nodeInstanceBuilder_) == null) {
                    nodeInstance_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~4096);
                } else {
                    nodeInstanceBuilder_.clear();
                }
                if ((variableBuilder_) == null) {
                    variable_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~8192);
                } else {
                    variableBuilder_.clear();
                }
                if ((exclusiveGroupBuilder_) == null) {
                    exclusiveGroup_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~16384);
                } else {
                    exclusiveGroupBuilder_.clear();
                }
                completedNodeIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
                bitField0_ = (bitField0_) & (~32768);
                if ((iterationLevelsBuilder_) == null) {
                    iterationLevels_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~65536);
                } else {
                    iterationLevelsBuilder_.clear();
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            public JBPMMessages.ProcessInstance.Builder clone() {
                return JBPMMessages.ProcessInstance.Builder.create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_descriptor;
            }

            public JBPMMessages.ProcessInstance getDefaultInstanceForType() {
                return JBPMMessages.ProcessInstance.getDefaultInstance();
            }

            public JBPMMessages.ProcessInstance build() {
                JBPMMessages.ProcessInstance result = buildPartial();
                if (!(result.isInitialized())) {
                    throw AbstractMessage.Builder.newUninitializedMessageException(result);
                } 
                return result;
            }

            public JBPMMessages.ProcessInstance buildPartial() {
                JBPMMessages.ProcessInstance result = new JBPMMessages.ProcessInstance(JBPMMessages.ProcessInstance.Builder.this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 1) == 1) {
                    to_bitField0_ |= 1;
                } 
                result.processType_ = processType_;
                if ((from_bitField0_ & 2) == 2) {
                    to_bitField0_ |= 2;
                } 
                result.id_ = id_;
                if ((from_bitField0_ & 4) == 4) {
                    to_bitField0_ |= 4;
                } 
                result.processId_ = processId_;
                if ((from_bitField0_ & 8) == 8) {
                    to_bitField0_ |= 8;
                } 
                result.state_ = state_;
                if ((from_bitField0_ & 16) == 16) {
                    to_bitField0_ |= 16;
                } 
                result.nodeInstanceCounter_ = nodeInstanceCounter_;
                if ((from_bitField0_ & 32) == 32) {
                    to_bitField0_ |= 32;
                } 
                result.processXml_ = processXml_;
                if ((from_bitField0_ & 64) == 64) {
                    to_bitField0_ |= 64;
                } 
                result.parentProcessInstanceId_ = parentProcessInstanceId_;
                if ((from_bitField0_ & 128) == 128) {
                    to_bitField0_ |= 128;
                } 
                result.description_ = description_;
                if ((from_bitField0_ & 256) == 256) {
                    to_bitField0_ |= 256;
                } 
                result.signalCompletion_ = signalCompletion_;
                if ((from_bitField0_ & 512) == 512) {
                    to_bitField0_ |= 512;
                } 
                result.deploymentId_ = deploymentId_;
                if ((from_bitField0_ & 1024) == 1024) {
                    to_bitField0_ |= 1024;
                } 
                result.correlationKey_ = correlationKey_;
                if ((swimlaneContextBuilder_) == null) {
                    if (((bitField0_) & 2048) == 2048) {
                        swimlaneContext_ = Collections.unmodifiableList(swimlaneContext_);
                        bitField0_ = (bitField0_) & (~2048);
                    } 
                    result.swimlaneContext_ = swimlaneContext_;
                } else {
                    result.swimlaneContext_ = swimlaneContextBuilder_.build();
                }
                if ((nodeInstanceBuilder_) == null) {
                    if (((bitField0_) & 4096) == 4096) {
                        nodeInstance_ = Collections.unmodifiableList(nodeInstance_);
                        bitField0_ = (bitField0_) & (~4096);
                    } 
                    result.nodeInstance_ = nodeInstance_;
                } else {
                    result.nodeInstance_ = nodeInstanceBuilder_.build();
                }
                if ((variableBuilder_) == null) {
                    if (((bitField0_) & 8192) == 8192) {
                        variable_ = Collections.unmodifiableList(variable_);
                        bitField0_ = (bitField0_) & (~8192);
                    } 
                    result.variable_ = variable_;
                } else {
                    result.variable_ = variableBuilder_.build();
                }
                if ((exclusiveGroupBuilder_) == null) {
                    if (((bitField0_) & 16384) == 16384) {
                        exclusiveGroup_ = Collections.unmodifiableList(exclusiveGroup_);
                        bitField0_ = (bitField0_) & (~16384);
                    } 
                    result.exclusiveGroup_ = exclusiveGroup_;
                } else {
                    result.exclusiveGroup_ = exclusiveGroupBuilder_.build();
                }
                if (((bitField0_) & 32768) == 32768) {
                    completedNodeIds_ = new UnmodifiableLazyStringList(completedNodeIds_);
                    bitField0_ = (bitField0_) & (~32768);
                } 
                result.completedNodeIds_ = completedNodeIds_;
                if ((iterationLevelsBuilder_) == null) {
                    if (((bitField0_) & 65536) == 65536) {
                        iterationLevels_ = Collections.unmodifiableList(iterationLevels_);
                        bitField0_ = (bitField0_) & (~65536);
                    } 
                    result.iterationLevels_ = iterationLevels_;
                } else {
                    result.iterationLevels_ = iterationLevelsBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public JBPMMessages.ProcessInstance.Builder mergeFrom(Message other) {
                if (other instanceof JBPMMessages.ProcessInstance) {
                    return mergeFrom(((JBPMMessages.ProcessInstance) (other)));
                } else {
                    super.mergeFrom(other);
                    return JBPMMessages.ProcessInstance.Builder.this;
                }
            }

            public JBPMMessages.ProcessInstance.Builder mergeFrom(JBPMMessages.ProcessInstance other) {
                if (other == (JBPMMessages.ProcessInstance.getDefaultInstance()))
                    return JBPMMessages.ProcessInstance.Builder.this;
                
                if (other.hasProcessType()) {
                    bitField0_ |= 1;
                    processType_ = other.processType_;
                    onChanged();
                } 
                if (other.hasId()) {
                    setId(other.getId());
                } 
                if (other.hasProcessId()) {
                    bitField0_ |= 4;
                    processId_ = other.processId_;
                    onChanged();
                } 
                if (other.hasState()) {
                    setState(other.getState());
                } 
                if (other.hasNodeInstanceCounter()) {
                    setNodeInstanceCounter(other.getNodeInstanceCounter());
                } 
                if (other.hasProcessXml()) {
                    bitField0_ |= 32;
                    processXml_ = other.processXml_;
                    onChanged();
                } 
                if (other.hasParentProcessInstanceId()) {
                    setParentProcessInstanceId(other.getParentProcessInstanceId());
                } 
                if (other.hasDescription()) {
                    bitField0_ |= 128;
                    description_ = other.description_;
                    onChanged();
                } 
                if (other.hasSignalCompletion()) {
                    setSignalCompletion(other.getSignalCompletion());
                } 
                if (other.hasDeploymentId()) {
                    bitField0_ |= 512;
                    deploymentId_ = other.deploymentId_;
                    onChanged();
                } 
                if (other.hasCorrelationKey()) {
                    bitField0_ |= 1024;
                    correlationKey_ = other.correlationKey_;
                    onChanged();
                } 
                if ((swimlaneContextBuilder_) == null) {
                    if (!(other.swimlaneContext_.isEmpty())) {
                        if (swimlaneContext_.isEmpty()) {
                            swimlaneContext_ = other.swimlaneContext_;
                            bitField0_ = (bitField0_) & (~2048);
                        } else {
                            ensureSwimlaneContextIsMutable();
                            swimlaneContext_.addAll(other.swimlaneContext_);
                        }
                        onChanged();
                    } 
                } else {
                    if (!(other.swimlaneContext_.isEmpty())) {
                        if (swimlaneContextBuilder_.isEmpty()) {
                            swimlaneContextBuilder_.dispose();
                            swimlaneContextBuilder_ = null;
                            swimlaneContext_ = other.swimlaneContext_;
                            bitField0_ = (bitField0_) & (~2048);
                            swimlaneContextBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getSwimlaneContextFieldBuilder() : null;
                        } else {
                            swimlaneContextBuilder_.addAllMessages(other.swimlaneContext_);
                        }
                    } 
                }
                if ((nodeInstanceBuilder_) == null) {
                    if (!(other.nodeInstance_.isEmpty())) {
                        if (nodeInstance_.isEmpty()) {
                            nodeInstance_ = other.nodeInstance_;
                            bitField0_ = (bitField0_) & (~4096);
                        } else {
                            ensureNodeInstanceIsMutable();
                            nodeInstance_.addAll(other.nodeInstance_);
                        }
                        onChanged();
                    } 
                } else {
                    if (!(other.nodeInstance_.isEmpty())) {
                        if (nodeInstanceBuilder_.isEmpty()) {
                            nodeInstanceBuilder_.dispose();
                            nodeInstanceBuilder_ = null;
                            nodeInstance_ = other.nodeInstance_;
                            bitField0_ = (bitField0_) & (~4096);
                            nodeInstanceBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getNodeInstanceFieldBuilder() : null;
                        } else {
                            nodeInstanceBuilder_.addAllMessages(other.nodeInstance_);
                        }
                    } 
                }
                if ((variableBuilder_) == null) {
                    if (!(other.variable_.isEmpty())) {
                        if (variable_.isEmpty()) {
                            variable_ = other.variable_;
                            bitField0_ = (bitField0_) & (~8192);
                        } else {
                            ensureVariableIsMutable();
                            variable_.addAll(other.variable_);
                        }
                        onChanged();
                    } 
                } else {
                    if (!(other.variable_.isEmpty())) {
                        if (variableBuilder_.isEmpty()) {
                            variableBuilder_.dispose();
                            variableBuilder_ = null;
                            variable_ = other.variable_;
                            bitField0_ = (bitField0_) & (~8192);
                            variableBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getVariableFieldBuilder() : null;
                        } else {
                            variableBuilder_.addAllMessages(other.variable_);
                        }
                    } 
                }
                if ((exclusiveGroupBuilder_) == null) {
                    if (!(other.exclusiveGroup_.isEmpty())) {
                        if (exclusiveGroup_.isEmpty()) {
                            exclusiveGroup_ = other.exclusiveGroup_;
                            bitField0_ = (bitField0_) & (~16384);
                        } else {
                            ensureExclusiveGroupIsMutable();
                            exclusiveGroup_.addAll(other.exclusiveGroup_);
                        }
                        onChanged();
                    } 
                } else {
                    if (!(other.exclusiveGroup_.isEmpty())) {
                        if (exclusiveGroupBuilder_.isEmpty()) {
                            exclusiveGroupBuilder_.dispose();
                            exclusiveGroupBuilder_ = null;
                            exclusiveGroup_ = other.exclusiveGroup_;
                            bitField0_ = (bitField0_) & (~16384);
                            exclusiveGroupBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getExclusiveGroupFieldBuilder() : null;
                        } else {
                            exclusiveGroupBuilder_.addAllMessages(other.exclusiveGroup_);
                        }
                    } 
                }
                if (!(other.completedNodeIds_.isEmpty())) {
                    if (completedNodeIds_.isEmpty()) {
                        completedNodeIds_ = other.completedNodeIds_;
                        bitField0_ = (bitField0_) & (~32768);
                    } else {
                        ensureCompletedNodeIdsIsMutable();
                        completedNodeIds_.addAll(other.completedNodeIds_);
                    }
                    onChanged();
                } 
                if ((iterationLevelsBuilder_) == null) {
                    if (!(other.iterationLevels_.isEmpty())) {
                        if (iterationLevels_.isEmpty()) {
                            iterationLevels_ = other.iterationLevels_;
                            bitField0_ = (bitField0_) & (~65536);
                        } else {
                            ensureIterationLevelsIsMutable();
                            iterationLevels_.addAll(other.iterationLevels_);
                        }
                        onChanged();
                    } 
                } else {
                    if (!(other.iterationLevels_.isEmpty())) {
                        if (iterationLevelsBuilder_.isEmpty()) {
                            iterationLevelsBuilder_.dispose();
                            iterationLevelsBuilder_ = null;
                            iterationLevels_ = other.iterationLevels_;
                            bitField0_ = (bitField0_) & (~65536);
                            iterationLevelsBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getIterationLevelsFieldBuilder() : null;
                        } else {
                            iterationLevelsBuilder_.addAllMessages(other.iterationLevels_);
                        }
                    } 
                }
                JBPMMessages.ProcessInstance.Builder.this.mergeUnknownFields(other.getUnknownFields());
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public JBPMMessages.ProcessInstance.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                JBPMMessages.ProcessInstance parsedMessage = null;
                try {
                    parsedMessage = JBPMMessages.ProcessInstance.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = ((JBPMMessages.ProcessInstance) (e.getUnfinishedMessage()));
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    } 
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            private int bitField0_;

            // optional string process_type = 1;
            private Object processType_ = "";

            /**
             * <code>optional string process_type = 1;</code>
             */
            public boolean hasProcessType() {
                return ((bitField0_) & 1) == 1;
            }

            /**
             * <code>optional string process_type = 1;</code>
             */
            public String getProcessType() {
                Object ref = processType_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) (ref)).toStringUtf8();
                    processType_ = s;
                    return s;
                } else {
                    return ((String) (ref));
                }
            }

            /**
             * <code>optional string process_type = 1;</code>
             */
            public ByteString getProcessTypeBytes() {
                Object ref = processType_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                    processType_ = b;
                    return b;
                } else {
                    return ((ByteString) (ref));
                }
            }

            /**
             * <code>optional string process_type = 1;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setProcessType(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 1;
                processType_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional string process_type = 1;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearProcessType() {
                bitField0_ = (bitField0_) & (~1);
                processType_ = JBPMMessages.ProcessInstance.getDefaultInstance().getProcessType();
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional string process_type = 1;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setProcessTypeBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 1;
                processType_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            // optional int64 id = 2;
            private long id_;

            /**
             * <code>optional int64 id = 2;</code>
             */
            public boolean hasId() {
                return ((bitField0_) & 2) == 2;
            }

            /**
             * <code>optional int64 id = 2;</code>
             */
            public long getId() {
                return id_;
            }

            /**
             * <code>optional int64 id = 2;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setId(long value) {
                bitField0_ |= 2;
                id_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional int64 id = 2;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearId() {
                bitField0_ = (bitField0_) & (~2);
                id_ = 0L;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            // optional string process_id = 3;
            private Object processId_ = "";

            /**
             * <code>optional string process_id = 3;</code>
             */
            public boolean hasProcessId() {
                return ((bitField0_) & 4) == 4;
            }

            /**
             * <code>optional string process_id = 3;</code>
             */
            public String getProcessId() {
                Object ref = processId_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) (ref)).toStringUtf8();
                    processId_ = s;
                    return s;
                } else {
                    return ((String) (ref));
                }
            }

            /**
             * <code>optional string process_id = 3;</code>
             */
            public ByteString getProcessIdBytes() {
                Object ref = processId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                    processId_ = b;
                    return b;
                } else {
                    return ((ByteString) (ref));
                }
            }

            /**
             * <code>optional string process_id = 3;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setProcessId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 4;
                processId_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional string process_id = 3;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearProcessId() {
                bitField0_ = (bitField0_) & (~4);
                processId_ = JBPMMessages.ProcessInstance.getDefaultInstance().getProcessId();
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional string process_id = 3;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setProcessIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 4;
                processId_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            // optional int32 state = 4;
            private int state_;

            /**
             * <code>optional int32 state = 4;</code>
             */
            public boolean hasState() {
                return ((bitField0_) & 8) == 8;
            }

            /**
             * <code>optional int32 state = 4;</code>
             */
            public int getState() {
                return state_;
            }

            /**
             * <code>optional int32 state = 4;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setState(int value) {
                bitField0_ |= 8;
                state_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional int32 state = 4;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearState() {
                bitField0_ = (bitField0_) & (~8);
                state_ = 0;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            // optional int64 node_instance_counter = 5;
            private long nodeInstanceCounter_;

            /**
             * <code>optional int64 node_instance_counter = 5;</code>
             */
            public boolean hasNodeInstanceCounter() {
                return ((bitField0_) & 16) == 16;
            }

            /**
             * <code>optional int64 node_instance_counter = 5;</code>
             */
            public long getNodeInstanceCounter() {
                return nodeInstanceCounter_;
            }

            /**
             * <code>optional int64 node_instance_counter = 5;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setNodeInstanceCounter(long value) {
                bitField0_ |= 16;
                nodeInstanceCounter_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional int64 node_instance_counter = 5;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearNodeInstanceCounter() {
                bitField0_ = (bitField0_) & (~16);
                nodeInstanceCounter_ = 0L;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            // optional string process_xml = 11;
            private Object processXml_ = "";

            /**
             * <code>optional string process_xml = 11;</code>
             */
            public boolean hasProcessXml() {
                return ((bitField0_) & 32) == 32;
            }

            /**
             * <code>optional string process_xml = 11;</code>
             */
            public String getProcessXml() {
                Object ref = processXml_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) (ref)).toStringUtf8();
                    processXml_ = s;
                    return s;
                } else {
                    return ((String) (ref));
                }
            }

            /**
             * <code>optional string process_xml = 11;</code>
             */
            public ByteString getProcessXmlBytes() {
                Object ref = processXml_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                    processXml_ = b;
                    return b;
                } else {
                    return ((ByteString) (ref));
                }
            }

            /**
             * <code>optional string process_xml = 11;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setProcessXml(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 32;
                processXml_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional string process_xml = 11;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearProcessXml() {
                bitField0_ = (bitField0_) & (~32);
                processXml_ = JBPMMessages.ProcessInstance.getDefaultInstance().getProcessXml();
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional string process_xml = 11;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setProcessXmlBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 32;
                processXml_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            // optional int64 parent_process_instance_id = 12;
            private long parentProcessInstanceId_;

            /**
             * <code>optional int64 parent_process_instance_id = 12;</code>
             */
            public boolean hasParentProcessInstanceId() {
                return ((bitField0_) & 64) == 64;
            }

            /**
             * <code>optional int64 parent_process_instance_id = 12;</code>
             */
            public long getParentProcessInstanceId() {
                return parentProcessInstanceId_;
            }

            /**
             * <code>optional int64 parent_process_instance_id = 12;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setParentProcessInstanceId(long value) {
                bitField0_ |= 64;
                parentProcessInstanceId_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional int64 parent_process_instance_id = 12;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearParentProcessInstanceId() {
                bitField0_ = (bitField0_) & (~64);
                parentProcessInstanceId_ = 0L;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            // optional string description = 15;
            private Object description_ = "";

            /**
             * <code>optional string description = 15;</code>
             */
            public boolean hasDescription() {
                return ((bitField0_) & 128) == 128;
            }

            /**
             * <code>optional string description = 15;</code>
             */
            public String getDescription() {
                Object ref = description_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) (ref)).toStringUtf8();
                    description_ = s;
                    return s;
                } else {
                    return ((String) (ref));
                }
            }

            /**
             * <code>optional string description = 15;</code>
             */
            public ByteString getDescriptionBytes() {
                Object ref = description_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                    description_ = b;
                    return b;
                } else {
                    return ((ByteString) (ref));
                }
            }

            /**
             * <code>optional string description = 15;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setDescription(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 128;
                description_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional string description = 15;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearDescription() {
                bitField0_ = (bitField0_) & (~128);
                description_ = JBPMMessages.ProcessInstance.getDefaultInstance().getDescription();
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional string description = 15;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setDescriptionBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 128;
                description_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            // optional bool signal_completion = 16 [default = true];
            private boolean signalCompletion_ = true;

            /**
             * <code>optional bool signal_completion = 16 [default = true];</code>
             */
            public boolean hasSignalCompletion() {
                return ((bitField0_) & 256) == 256;
            }

            /**
             * <code>optional bool signal_completion = 16 [default = true];</code>
             */
            public boolean getSignalCompletion() {
                return signalCompletion_;
            }

            /**
             * <code>optional bool signal_completion = 16 [default = true];</code>
             */
            public JBPMMessages.ProcessInstance.Builder setSignalCompletion(boolean value) {
                bitField0_ |= 256;
                signalCompletion_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional bool signal_completion = 16 [default = true];</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearSignalCompletion() {
                bitField0_ = (bitField0_) & (~256);
                signalCompletion_ = true;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            // optional string deploymentId = 17;
            private Object deploymentId_ = "";

            /**
             * <code>optional string deploymentId = 17;</code>
             */
            public boolean hasDeploymentId() {
                return ((bitField0_) & 512) == 512;
            }

            /**
             * <code>optional string deploymentId = 17;</code>
             */
            public String getDeploymentId() {
                Object ref = deploymentId_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) (ref)).toStringUtf8();
                    deploymentId_ = s;
                    return s;
                } else {
                    return ((String) (ref));
                }
            }

            /**
             * <code>optional string deploymentId = 17;</code>
             */
            public ByteString getDeploymentIdBytes() {
                Object ref = deploymentId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                    deploymentId_ = b;
                    return b;
                } else {
                    return ((ByteString) (ref));
                }
            }

            /**
             * <code>optional string deploymentId = 17;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setDeploymentId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 512;
                deploymentId_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional string deploymentId = 17;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearDeploymentId() {
                bitField0_ = (bitField0_) & (~512);
                deploymentId_ = JBPMMessages.ProcessInstance.getDefaultInstance().getDeploymentId();
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional string deploymentId = 17;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setDeploymentIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 512;
                deploymentId_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            // optional string correlation_key = 18;
            private Object correlationKey_ = "";

            /**
             * <code>optional string correlation_key = 18;</code>
             */
            public boolean hasCorrelationKey() {
                return ((bitField0_) & 1024) == 1024;
            }

            /**
             * <code>optional string correlation_key = 18;</code>
             */
            public String getCorrelationKey() {
                Object ref = correlationKey_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) (ref)).toStringUtf8();
                    correlationKey_ = s;
                    return s;
                } else {
                    return ((String) (ref));
                }
            }

            /**
             * <code>optional string correlation_key = 18;</code>
             */
            public ByteString getCorrelationKeyBytes() {
                Object ref = correlationKey_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                    correlationKey_ = b;
                    return b;
                } else {
                    return ((ByteString) (ref));
                }
            }

            /**
             * <code>optional string correlation_key = 18;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setCorrelationKey(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 1024;
                correlationKey_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional string correlation_key = 18;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearCorrelationKey() {
                bitField0_ = (bitField0_) & (~1024);
                correlationKey_ = JBPMMessages.ProcessInstance.getDefaultInstance().getCorrelationKey();
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>optional string correlation_key = 18;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setCorrelationKeyBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 1024;
                correlationKey_ = value;
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            // repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;
            private List<JBPMMessages.ProcessInstance.SwimlaneContextInstance> swimlaneContext_ = Collections.emptyList();

            private void ensureSwimlaneContextIsMutable() {
                if (!(((bitField0_) & 2048) == 2048)) {
                    swimlaneContext_ = new ArrayList<JBPMMessages.ProcessInstance.SwimlaneContextInstance>(swimlaneContext_);
                    bitField0_ |= 2048;
                } 
            }

            private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.SwimlaneContextInstance, JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder, JBPMMessages.ProcessInstance.SwimlaneContextInstanceOrBuilder> swimlaneContextBuilder_;

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public List<JBPMMessages.ProcessInstance.SwimlaneContextInstance> getSwimlaneContextList() {
                if ((swimlaneContextBuilder_) == null) {
                    return Collections.unmodifiableList(swimlaneContext_);
                } else {
                    return swimlaneContextBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public int getSwimlaneContextCount() {
                if ((swimlaneContextBuilder_) == null) {
                    return swimlaneContext_.size();
                } else {
                    return swimlaneContextBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.SwimlaneContextInstance getSwimlaneContext(int index) {
                if ((swimlaneContextBuilder_) == null) {
                    return swimlaneContext_.get(index);
                } else {
                    return swimlaneContextBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setSwimlaneContext(int index, JBPMMessages.ProcessInstance.SwimlaneContextInstance value) {
                if ((swimlaneContextBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureSwimlaneContextIsMutable();
                    swimlaneContext_.set(index, value);
                    onChanged();
                } else {
                    swimlaneContextBuilder_.setMessage(index, value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setSwimlaneContext(int index, JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder builderForValue) {
                if ((swimlaneContextBuilder_) == null) {
                    ensureSwimlaneContextIsMutable();
                    swimlaneContext_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    swimlaneContextBuilder_.setMessage(index, builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addSwimlaneContext(JBPMMessages.ProcessInstance.SwimlaneContextInstance value) {
                if ((swimlaneContextBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureSwimlaneContextIsMutable();
                    swimlaneContext_.add(value);
                    onChanged();
                } else {
                    swimlaneContextBuilder_.addMessage(value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addSwimlaneContext(int index, JBPMMessages.ProcessInstance.SwimlaneContextInstance value) {
                if ((swimlaneContextBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureSwimlaneContextIsMutable();
                    swimlaneContext_.add(index, value);
                    onChanged();
                } else {
                    swimlaneContextBuilder_.addMessage(index, value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addSwimlaneContext(JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder builderForValue) {
                if ((swimlaneContextBuilder_) == null) {
                    ensureSwimlaneContextIsMutable();
                    swimlaneContext_.add(builderForValue.build());
                    onChanged();
                } else {
                    swimlaneContextBuilder_.addMessage(builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addSwimlaneContext(int index, JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder builderForValue) {
                if ((swimlaneContextBuilder_) == null) {
                    ensureSwimlaneContextIsMutable();
                    swimlaneContext_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    swimlaneContextBuilder_.addMessage(index, builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addAllSwimlaneContext(Iterable<? extends JBPMMessages.ProcessInstance.SwimlaneContextInstance> values) {
                if ((swimlaneContextBuilder_) == null) {
                    ensureSwimlaneContextIsMutable();
                    super.addAll(values, swimlaneContext_);
                    onChanged();
                } else {
                    swimlaneContextBuilder_.addAllMessages(values);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearSwimlaneContext() {
                if ((swimlaneContextBuilder_) == null) {
                    swimlaneContext_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~2048);
                    onChanged();
                } else {
                    swimlaneContextBuilder_.clear();
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.Builder removeSwimlaneContext(int index) {
                if ((swimlaneContextBuilder_) == null) {
                    ensureSwimlaneContextIsMutable();
                    swimlaneContext_.remove(index);
                    onChanged();
                } else {
                    swimlaneContextBuilder_.remove(index);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder getSwimlaneContextBuilder(int index) {
                return getSwimlaneContextFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.SwimlaneContextInstanceOrBuilder getSwimlaneContextOrBuilder(int index) {
                if ((swimlaneContextBuilder_) == null) {
                    return swimlaneContext_.get(index);
                } else {
                    return swimlaneContextBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public List<? extends JBPMMessages.ProcessInstance.SwimlaneContextInstanceOrBuilder> getSwimlaneContextOrBuilderList() {
                if ((swimlaneContextBuilder_) != null) {
                    return swimlaneContextBuilder_.getMessageOrBuilderList();
                } else {
                    return Collections.unmodifiableList(swimlaneContext_);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder addSwimlaneContextBuilder() {
                return getSwimlaneContextFieldBuilder().addBuilder(JBPMMessages.ProcessInstance.SwimlaneContextInstance.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder addSwimlaneContextBuilder(int index) {
                return getSwimlaneContextFieldBuilder().addBuilder(index, JBPMMessages.ProcessInstance.SwimlaneContextInstance.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.SwimlaneContextInstance swimlane_context = 6;</code>
             */
            public List<JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder> getSwimlaneContextBuilderList() {
                return getSwimlaneContextFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.SwimlaneContextInstance, JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder, JBPMMessages.ProcessInstance.SwimlaneContextInstanceOrBuilder> getSwimlaneContextFieldBuilder() {
                if ((swimlaneContextBuilder_) == null) {
                    swimlaneContextBuilder_ = new RepeatedFieldBuilder<JBPMMessages.ProcessInstance.SwimlaneContextInstance, JBPMMessages.ProcessInstance.SwimlaneContextInstance.Builder, JBPMMessages.ProcessInstance.SwimlaneContextInstanceOrBuilder>(swimlaneContext_, (((bitField0_) & 2048) == 2048), getParentForChildren(), isClean());
                    swimlaneContext_ = null;
                } 
                return swimlaneContextBuilder_;
            }

            // repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;
            private List<JBPMMessages.ProcessInstance.NodeInstance> nodeInstance_ = Collections.emptyList();

            private void ensureNodeInstanceIsMutable() {
                if (!(((bitField0_) & 4096) == 4096)) {
                    nodeInstance_ = new ArrayList<JBPMMessages.ProcessInstance.NodeInstance>(nodeInstance_);
                    bitField0_ |= 4096;
                } 
            }

            private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstance, JBPMMessages.ProcessInstance.NodeInstance.Builder, JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> nodeInstanceBuilder_;

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public List<JBPMMessages.ProcessInstance.NodeInstance> getNodeInstanceList() {
                if ((nodeInstanceBuilder_) == null) {
                    return Collections.unmodifiableList(nodeInstance_);
                } else {
                    return nodeInstanceBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public int getNodeInstanceCount() {
                if ((nodeInstanceBuilder_) == null) {
                    return nodeInstance_.size();
                } else {
                    return nodeInstanceBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstance getNodeInstance(int index) {
                if ((nodeInstanceBuilder_) == null) {
                    return nodeInstance_.get(index);
                } else {
                    return nodeInstanceBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setNodeInstance(int index, JBPMMessages.ProcessInstance.NodeInstance value) {
                if ((nodeInstanceBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureNodeInstanceIsMutable();
                    nodeInstance_.set(index, value);
                    onChanged();
                } else {
                    nodeInstanceBuilder_.setMessage(index, value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setNodeInstance(int index, JBPMMessages.ProcessInstance.NodeInstance.Builder builderForValue) {
                if ((nodeInstanceBuilder_) == null) {
                    ensureNodeInstanceIsMutable();
                    nodeInstance_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    nodeInstanceBuilder_.setMessage(index, builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addNodeInstance(JBPMMessages.ProcessInstance.NodeInstance value) {
                if ((nodeInstanceBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureNodeInstanceIsMutable();
                    nodeInstance_.add(value);
                    onChanged();
                } else {
                    nodeInstanceBuilder_.addMessage(value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addNodeInstance(int index, JBPMMessages.ProcessInstance.NodeInstance value) {
                if ((nodeInstanceBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureNodeInstanceIsMutable();
                    nodeInstance_.add(index, value);
                    onChanged();
                } else {
                    nodeInstanceBuilder_.addMessage(index, value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addNodeInstance(JBPMMessages.ProcessInstance.NodeInstance.Builder builderForValue) {
                if ((nodeInstanceBuilder_) == null) {
                    ensureNodeInstanceIsMutable();
                    nodeInstance_.add(builderForValue.build());
                    onChanged();
                } else {
                    nodeInstanceBuilder_.addMessage(builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addNodeInstance(int index, JBPMMessages.ProcessInstance.NodeInstance.Builder builderForValue) {
                if ((nodeInstanceBuilder_) == null) {
                    ensureNodeInstanceIsMutable();
                    nodeInstance_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    nodeInstanceBuilder_.addMessage(index, builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addAllNodeInstance(Iterable<? extends JBPMMessages.ProcessInstance.NodeInstance> values) {
                if ((nodeInstanceBuilder_) == null) {
                    ensureNodeInstanceIsMutable();
                    super.addAll(values, nodeInstance_);
                    onChanged();
                } else {
                    nodeInstanceBuilder_.addAllMessages(values);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearNodeInstance() {
                if ((nodeInstanceBuilder_) == null) {
                    nodeInstance_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~4096);
                    onChanged();
                } else {
                    nodeInstanceBuilder_.clear();
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.Builder removeNodeInstance(int index) {
                if ((nodeInstanceBuilder_) == null) {
                    ensureNodeInstanceIsMutable();
                    nodeInstance_.remove(index);
                    onChanged();
                } else {
                    nodeInstanceBuilder_.remove(index);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstance.Builder getNodeInstanceBuilder(int index) {
                return getNodeInstanceFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstanceOrBuilder getNodeInstanceOrBuilder(int index) {
                if ((nodeInstanceBuilder_) == null) {
                    return nodeInstance_.get(index);
                } else {
                    return nodeInstanceBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public List<? extends JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> getNodeInstanceOrBuilderList() {
                if ((nodeInstanceBuilder_) != null) {
                    return nodeInstanceBuilder_.getMessageOrBuilderList();
                } else {
                    return Collections.unmodifiableList(nodeInstance_);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstance.Builder addNodeInstanceBuilder() {
                return getNodeInstanceFieldBuilder().addBuilder(JBPMMessages.ProcessInstance.NodeInstance.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public JBPMMessages.ProcessInstance.NodeInstance.Builder addNodeInstanceBuilder(int index) {
                return getNodeInstanceFieldBuilder().addBuilder(index, JBPMMessages.ProcessInstance.NodeInstance.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.NodeInstance node_instance = 7;</code>
             */
            public List<JBPMMessages.ProcessInstance.NodeInstance.Builder> getNodeInstanceBuilderList() {
                return getNodeInstanceFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstance, JBPMMessages.ProcessInstance.NodeInstance.Builder, JBPMMessages.ProcessInstance.NodeInstanceOrBuilder> getNodeInstanceFieldBuilder() {
                if ((nodeInstanceBuilder_) == null) {
                    nodeInstanceBuilder_ = new RepeatedFieldBuilder<JBPMMessages.ProcessInstance.NodeInstance, JBPMMessages.ProcessInstance.NodeInstance.Builder, JBPMMessages.ProcessInstance.NodeInstanceOrBuilder>(nodeInstance_, (((bitField0_) & 4096) == 4096), getParentForChildren(), isClean());
                    nodeInstance_ = null;
                } 
                return nodeInstanceBuilder_;
            }

            // repeated .org.jbpm.marshalling.Variable variable = 8;
            private List<JBPMMessages.Variable> variable_ = Collections.emptyList();

            private void ensureVariableIsMutable() {
                if (!(((bitField0_) & 8192) == 8192)) {
                    variable_ = new ArrayList<JBPMMessages.Variable>(variable_);
                    bitField0_ |= 8192;
                } 
            }

            private RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder> variableBuilder_;

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public List<JBPMMessages.Variable> getVariableList() {
                if ((variableBuilder_) == null) {
                    return Collections.unmodifiableList(variable_);
                } else {
                    return variableBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public int getVariableCount() {
                if ((variableBuilder_) == null) {
                    return variable_.size();
                } else {
                    return variableBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.Variable getVariable(int index) {
                if ((variableBuilder_) == null) {
                    return variable_.get(index);
                } else {
                    return variableBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setVariable(int index, JBPMMessages.Variable value) {
                if ((variableBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureVariableIsMutable();
                    variable_.set(index, value);
                    onChanged();
                } else {
                    variableBuilder_.setMessage(index, value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setVariable(int index, JBPMMessages.Variable.Builder builderForValue) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    variable_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    variableBuilder_.setMessage(index, builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addVariable(JBPMMessages.Variable value) {
                if ((variableBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureVariableIsMutable();
                    variable_.add(value);
                    onChanged();
                } else {
                    variableBuilder_.addMessage(value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addVariable(int index, JBPMMessages.Variable value) {
                if ((variableBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureVariableIsMutable();
                    variable_.add(index, value);
                    onChanged();
                } else {
                    variableBuilder_.addMessage(index, value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addVariable(JBPMMessages.Variable.Builder builderForValue) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    variable_.add(builderForValue.build());
                    onChanged();
                } else {
                    variableBuilder_.addMessage(builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addVariable(int index, JBPMMessages.Variable.Builder builderForValue) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    variable_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    variableBuilder_.addMessage(index, builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addAllVariable(Iterable<? extends JBPMMessages.Variable> values) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    super.addAll(values, variable_);
                    onChanged();
                } else {
                    variableBuilder_.addAllMessages(values);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearVariable() {
                if ((variableBuilder_) == null) {
                    variable_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~8192);
                    onChanged();
                } else {
                    variableBuilder_.clear();
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.ProcessInstance.Builder removeVariable(int index) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    variable_.remove(index);
                    onChanged();
                } else {
                    variableBuilder_.remove(index);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.Variable.Builder getVariableBuilder(int index) {
                return getVariableFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index) {
                if ((variableBuilder_) == null) {
                    return variable_.get(index);
                } else {
                    return variableBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList() {
                if ((variableBuilder_) != null) {
                    return variableBuilder_.getMessageOrBuilderList();
                } else {
                    return Collections.unmodifiableList(variable_);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.Variable.Builder addVariableBuilder() {
                return getVariableFieldBuilder().addBuilder(JBPMMessages.Variable.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public JBPMMessages.Variable.Builder addVariableBuilder(int index) {
                return getVariableFieldBuilder().addBuilder(index, JBPMMessages.Variable.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 8;</code>
             */
            public List<JBPMMessages.Variable.Builder> getVariableBuilderList() {
                return getVariableFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder> getVariableFieldBuilder() {
                if ((variableBuilder_) == null) {
                    variableBuilder_ = new RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder>(variable_, (((bitField0_) & 8192) == 8192), getParentForChildren(), isClean());
                    variable_ = null;
                } 
                return variableBuilder_;
            }

            // repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;
            private List<JBPMMessages.ProcessInstance.ExclusiveGroupInstance> exclusiveGroup_ = Collections.emptyList();

            private void ensureExclusiveGroupIsMutable() {
                if (!(((bitField0_) & 16384) == 16384)) {
                    exclusiveGroup_ = new ArrayList<JBPMMessages.ProcessInstance.ExclusiveGroupInstance>(exclusiveGroup_);
                    bitField0_ |= 16384;
                } 
            }

            private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.ExclusiveGroupInstance, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder, JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder> exclusiveGroupBuilder_;

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public List<JBPMMessages.ProcessInstance.ExclusiveGroupInstance> getExclusiveGroupList() {
                if ((exclusiveGroupBuilder_) == null) {
                    return Collections.unmodifiableList(exclusiveGroup_);
                } else {
                    return exclusiveGroupBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public int getExclusiveGroupCount() {
                if ((exclusiveGroupBuilder_) == null) {
                    return exclusiveGroup_.size();
                } else {
                    return exclusiveGroupBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.ExclusiveGroupInstance getExclusiveGroup(int index) {
                if ((exclusiveGroupBuilder_) == null) {
                    return exclusiveGroup_.get(index);
                } else {
                    return exclusiveGroupBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setExclusiveGroup(int index, JBPMMessages.ProcessInstance.ExclusiveGroupInstance value) {
                if ((exclusiveGroupBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureExclusiveGroupIsMutable();
                    exclusiveGroup_.set(index, value);
                    onChanged();
                } else {
                    exclusiveGroupBuilder_.setMessage(index, value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setExclusiveGroup(int index, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder builderForValue) {
                if ((exclusiveGroupBuilder_) == null) {
                    ensureExclusiveGroupIsMutable();
                    exclusiveGroup_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    exclusiveGroupBuilder_.setMessage(index, builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addExclusiveGroup(JBPMMessages.ProcessInstance.ExclusiveGroupInstance value) {
                if ((exclusiveGroupBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureExclusiveGroupIsMutable();
                    exclusiveGroup_.add(value);
                    onChanged();
                } else {
                    exclusiveGroupBuilder_.addMessage(value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addExclusiveGroup(int index, JBPMMessages.ProcessInstance.ExclusiveGroupInstance value) {
                if ((exclusiveGroupBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureExclusiveGroupIsMutable();
                    exclusiveGroup_.add(index, value);
                    onChanged();
                } else {
                    exclusiveGroupBuilder_.addMessage(index, value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addExclusiveGroup(JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder builderForValue) {
                if ((exclusiveGroupBuilder_) == null) {
                    ensureExclusiveGroupIsMutable();
                    exclusiveGroup_.add(builderForValue.build());
                    onChanged();
                } else {
                    exclusiveGroupBuilder_.addMessage(builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addExclusiveGroup(int index, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder builderForValue) {
                if ((exclusiveGroupBuilder_) == null) {
                    ensureExclusiveGroupIsMutable();
                    exclusiveGroup_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    exclusiveGroupBuilder_.addMessage(index, builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addAllExclusiveGroup(Iterable<? extends JBPMMessages.ProcessInstance.ExclusiveGroupInstance> values) {
                if ((exclusiveGroupBuilder_) == null) {
                    ensureExclusiveGroupIsMutable();
                    super.addAll(values, exclusiveGroup_);
                    onChanged();
                } else {
                    exclusiveGroupBuilder_.addAllMessages(values);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearExclusiveGroup() {
                if ((exclusiveGroupBuilder_) == null) {
                    exclusiveGroup_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~16384);
                    onChanged();
                } else {
                    exclusiveGroupBuilder_.clear();
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.Builder removeExclusiveGroup(int index) {
                if ((exclusiveGroupBuilder_) == null) {
                    ensureExclusiveGroupIsMutable();
                    exclusiveGroup_.remove(index);
                    onChanged();
                } else {
                    exclusiveGroupBuilder_.remove(index);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder getExclusiveGroupBuilder(int index) {
                return getExclusiveGroupFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder getExclusiveGroupOrBuilder(int index) {
                if ((exclusiveGroupBuilder_) == null) {
                    return exclusiveGroup_.get(index);
                } else {
                    return exclusiveGroupBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public List<? extends JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder> getExclusiveGroupOrBuilderList() {
                if ((exclusiveGroupBuilder_) != null) {
                    return exclusiveGroupBuilder_.getMessageOrBuilderList();
                } else {
                    return Collections.unmodifiableList(exclusiveGroup_);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder addExclusiveGroupBuilder() {
                return getExclusiveGroupFieldBuilder().addBuilder(JBPMMessages.ProcessInstance.ExclusiveGroupInstance.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder addExclusiveGroupBuilder(int index) {
                return getExclusiveGroupFieldBuilder().addBuilder(index, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.ProcessInstance.ExclusiveGroupInstance exclusive_group = 10;</code>
             */
            public List<JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder> getExclusiveGroupBuilderList() {
                return getExclusiveGroupFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<JBPMMessages.ProcessInstance.ExclusiveGroupInstance, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder, JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder> getExclusiveGroupFieldBuilder() {
                if ((exclusiveGroupBuilder_) == null) {
                    exclusiveGroupBuilder_ = new RepeatedFieldBuilder<JBPMMessages.ProcessInstance.ExclusiveGroupInstance, JBPMMessages.ProcessInstance.ExclusiveGroupInstance.Builder, JBPMMessages.ProcessInstance.ExclusiveGroupInstanceOrBuilder>(exclusiveGroup_, (((bitField0_) & 16384) == 16384), getParentForChildren(), isClean());
                    exclusiveGroup_ = null;
                } 
                return exclusiveGroupBuilder_;
            }

            // repeated string completedNodeIds = 13;
            private LazyStringList completedNodeIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;

            private void ensureCompletedNodeIdsIsMutable() {
                if (!(((bitField0_) & 32768) == 32768)) {
                    completedNodeIds_ = new LazyStringArrayList(completedNodeIds_);
                    bitField0_ |= 32768;
                } 
            }

            /**
             * <code>repeated string completedNodeIds = 13;</code>
             */
            public List<String> getCompletedNodeIdsList() {
                return Collections.unmodifiableList(completedNodeIds_);
            }

            /**
             * <code>repeated string completedNodeIds = 13;</code>
             */
            public int getCompletedNodeIdsCount() {
                return completedNodeIds_.size();
            }

            /**
             * <code>repeated string completedNodeIds = 13;</code>
             */
            public String getCompletedNodeIds(int index) {
                return completedNodeIds_.get(index);
            }

            /**
             * <code>repeated string completedNodeIds = 13;</code>
             */
            public ByteString getCompletedNodeIdsBytes(int index) {
                return completedNodeIds_.getByteString(index);
            }

            /**
             * <code>repeated string completedNodeIds = 13;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setCompletedNodeIds(int index, String value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                ensureCompletedNodeIdsIsMutable();
                completedNodeIds_.set(index, value);
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated string completedNodeIds = 13;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addCompletedNodeIds(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                ensureCompletedNodeIdsIsMutable();
                completedNodeIds_.add(value);
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated string completedNodeIds = 13;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addAllCompletedNodeIds(Iterable<String> values) {
                ensureCompletedNodeIdsIsMutable();
                super.addAll(values, completedNodeIds_);
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated string completedNodeIds = 13;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearCompletedNodeIds() {
                completedNodeIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
                bitField0_ = (bitField0_) & (~32768);
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated string completedNodeIds = 13;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addCompletedNodeIdsBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                ensureCompletedNodeIdsIsMutable();
                completedNodeIds_.add(value);
                onChanged();
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            // repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;
            private List<JBPMMessages.IterationLevel> iterationLevels_ = Collections.emptyList();

            private void ensureIterationLevelsIsMutable() {
                if (!(((bitField0_) & 65536) == 65536)) {
                    iterationLevels_ = new ArrayList<JBPMMessages.IterationLevel>(iterationLevels_);
                    bitField0_ |= 65536;
                } 
            }

            private RepeatedFieldBuilder<JBPMMessages.IterationLevel, JBPMMessages.IterationLevel.Builder, JBPMMessages.IterationLevelOrBuilder> iterationLevelsBuilder_;

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public List<JBPMMessages.IterationLevel> getIterationLevelsList() {
                if ((iterationLevelsBuilder_) == null) {
                    return Collections.unmodifiableList(iterationLevels_);
                } else {
                    return iterationLevelsBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public int getIterationLevelsCount() {
                if ((iterationLevelsBuilder_) == null) {
                    return iterationLevels_.size();
                } else {
                    return iterationLevelsBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.IterationLevel getIterationLevels(int index) {
                if ((iterationLevelsBuilder_) == null) {
                    return iterationLevels_.get(index);
                } else {
                    return iterationLevelsBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setIterationLevels(int index, JBPMMessages.IterationLevel value) {
                if ((iterationLevelsBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureIterationLevelsIsMutable();
                    iterationLevels_.set(index, value);
                    onChanged();
                } else {
                    iterationLevelsBuilder_.setMessage(index, value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.ProcessInstance.Builder setIterationLevels(int index, JBPMMessages.IterationLevel.Builder builderForValue) {
                if ((iterationLevelsBuilder_) == null) {
                    ensureIterationLevelsIsMutable();
                    iterationLevels_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    iterationLevelsBuilder_.setMessage(index, builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addIterationLevels(JBPMMessages.IterationLevel value) {
                if ((iterationLevelsBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureIterationLevelsIsMutable();
                    iterationLevels_.add(value);
                    onChanged();
                } else {
                    iterationLevelsBuilder_.addMessage(value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addIterationLevels(int index, JBPMMessages.IterationLevel value) {
                if ((iterationLevelsBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureIterationLevelsIsMutable();
                    iterationLevels_.add(index, value);
                    onChanged();
                } else {
                    iterationLevelsBuilder_.addMessage(index, value);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addIterationLevels(JBPMMessages.IterationLevel.Builder builderForValue) {
                if ((iterationLevelsBuilder_) == null) {
                    ensureIterationLevelsIsMutable();
                    iterationLevels_.add(builderForValue.build());
                    onChanged();
                } else {
                    iterationLevelsBuilder_.addMessage(builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addIterationLevels(int index, JBPMMessages.IterationLevel.Builder builderForValue) {
                if ((iterationLevelsBuilder_) == null) {
                    ensureIterationLevelsIsMutable();
                    iterationLevels_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    iterationLevelsBuilder_.addMessage(index, builderForValue.build());
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.ProcessInstance.Builder addAllIterationLevels(Iterable<? extends JBPMMessages.IterationLevel> values) {
                if ((iterationLevelsBuilder_) == null) {
                    ensureIterationLevelsIsMutable();
                    super.addAll(values, iterationLevels_);
                    onChanged();
                } else {
                    iterationLevelsBuilder_.addAllMessages(values);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.ProcessInstance.Builder clearIterationLevels() {
                if ((iterationLevelsBuilder_) == null) {
                    iterationLevels_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~65536);
                    onChanged();
                } else {
                    iterationLevelsBuilder_.clear();
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.ProcessInstance.Builder removeIterationLevels(int index) {
                if ((iterationLevelsBuilder_) == null) {
                    ensureIterationLevelsIsMutable();
                    iterationLevels_.remove(index);
                    onChanged();
                } else {
                    iterationLevelsBuilder_.remove(index);
                }
                return JBPMMessages.ProcessInstance.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.IterationLevel.Builder getIterationLevelsBuilder(int index) {
                return getIterationLevelsFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.IterationLevelOrBuilder getIterationLevelsOrBuilder(int index) {
                if ((iterationLevelsBuilder_) == null) {
                    return iterationLevels_.get(index);
                } else {
                    return iterationLevelsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public List<? extends JBPMMessages.IterationLevelOrBuilder> getIterationLevelsOrBuilderList() {
                if ((iterationLevelsBuilder_) != null) {
                    return iterationLevelsBuilder_.getMessageOrBuilderList();
                } else {
                    return Collections.unmodifiableList(iterationLevels_);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.IterationLevel.Builder addIterationLevelsBuilder() {
                return getIterationLevelsFieldBuilder().addBuilder(JBPMMessages.IterationLevel.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public JBPMMessages.IterationLevel.Builder addIterationLevelsBuilder(int index) {
                return getIterationLevelsFieldBuilder().addBuilder(index, JBPMMessages.IterationLevel.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.IterationLevel iterationLevels = 14;</code>
             */
            public List<JBPMMessages.IterationLevel.Builder> getIterationLevelsBuilderList() {
                return getIterationLevelsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<JBPMMessages.IterationLevel, JBPMMessages.IterationLevel.Builder, JBPMMessages.IterationLevelOrBuilder> getIterationLevelsFieldBuilder() {
                if ((iterationLevelsBuilder_) == null) {
                    iterationLevelsBuilder_ = new RepeatedFieldBuilder<JBPMMessages.IterationLevel, JBPMMessages.IterationLevel.Builder, JBPMMessages.IterationLevelOrBuilder>(iterationLevels_, (((bitField0_) & 65536) == 65536), getParentForChildren(), isClean());
                    iterationLevels_ = null;
                } 
                return iterationLevelsBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessInstance)
        }

        static {
            defaultInstance = new JBPMMessages.ProcessInstance(true);
            JBPMMessages.ProcessInstance.defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessInstance)
    }

    public interface VariableOrBuilder extends MessageOrBuilder {
        // optional string name = 1;
        /**
         * <code>optional string name = 1;</code>
         */
        boolean hasName();

        /**
         * <code>optional string name = 1;</code>
         */
        String getName();

        /**
         * <code>optional string name = 1;</code>
         */
        ByteString getNameBytes();

        // optional int32 strategy_index = 2;
        /**
         * <code>optional int32 strategy_index = 2;</code>
         * 
         * <pre>
         * the actual object reference
         * </pre>
         */
        boolean hasStrategyIndex();

        /**
         * <code>optional int32 strategy_index = 2;</code>
         * 
         * <pre>
         * the actual object reference
         * </pre>
         */
        int getStrategyIndex();

        // optional bytes value = 3;
        /**
         * <code>optional bytes value = 3;</code>
         */
        boolean hasValue();

        /**
         * <code>optional bytes value = 3;</code>
         */
        ByteString getValue();
    }

    /**
     * Protobuf type {@code org.jbpm.marshalling.Variable}
     */
    // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.Variable)
    public static final class Variable extends GeneratedMessage implements JBPMMessages.VariableOrBuilder {
        // Use Variable.newBuilder() to construct.
        private Variable(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Variable(boolean noInit) {
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        private static final JBPMMessages.Variable defaultInstance;

        public static JBPMMessages.Variable getDefaultInstance() {
            return JBPMMessages.Variable.defaultInstance;
        }

        public JBPMMessages.Variable getDefaultInstanceForType() {
            return JBPMMessages.Variable.defaultInstance;
        }

        private final UnknownFieldSet unknownFields;

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return JBPMMessages.Variable.this.unknownFields;
        }

        private Variable(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0 :
                            done = true;
                            break;
                        default :
                            {
                                if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                    done = true;
                                } 
                                break;
                            }
                        case 10 :
                            {
                                bitField0_ |= 1;
                                name_ = input.readBytes();
                                break;
                            }
                        case 16 :
                            {
                                bitField0_ |= 2;
                                strategyIndex_ = input.readInt32();
                                break;
                            }
                        case 26 :
                            {
                                bitField0_ |= 4;
                                value_ = input.readBytes();
                                break;
                            }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(JBPMMessages.Variable.this);
            } catch (IOException e) {
                throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.Variable.this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_Variable_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_Variable_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.Variable.class, JBPMMessages.Variable.Builder.class);
        }

        public static Parser<JBPMMessages.Variable> PARSER = new AbstractParser<JBPMMessages.Variable>() {
            public JBPMMessages.Variable parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new JBPMMessages.Variable(input, extensionRegistry);
            }
        };

        @Override
        public Parser<JBPMMessages.Variable> getParserForType() {
            return JBPMMessages.Variable.PARSER;
        }

        private int bitField0_;

        // optional string name = 1;
        public static final int NAME_FIELD_NUMBER = 1;

        private Object name_;

        /**
         * <code>optional string name = 1;</code>
         */
        public boolean hasName() {
            return ((bitField0_) & 1) == 1;
        }

        /**
         * <code>optional string name = 1;</code>
         */
        public String getName() {
            Object ref = name_;
            if (ref instanceof String) {
                return ((String) (ref));
            } else {
                ByteString bs = ((ByteString) (ref));
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    name_ = s;
                } 
                return s;
            }
        }

        /**
         * <code>optional string name = 1;</code>
         */
        public ByteString getNameBytes() {
            Object ref = name_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                name_ = b;
                return b;
            } else {
                return ((ByteString) (ref));
            }
        }

        // optional int32 strategy_index = 2;
        public static final int STRATEGY_INDEX_FIELD_NUMBER = 2;

        private int strategyIndex_;

        /**
         * <code>optional int32 strategy_index = 2;</code>
         * 
         * <pre>
         * the actual object reference
         * </pre>
         */
        public boolean hasStrategyIndex() {
            return ((bitField0_) & 2) == 2;
        }

        /**
         * <code>optional int32 strategy_index = 2;</code>
         * 
         * <pre>
         * the actual object reference
         * </pre>
         */
        public int getStrategyIndex() {
            return strategyIndex_;
        }

        // optional bytes value = 3;
        public static final int VALUE_FIELD_NUMBER = 3;

        private ByteString value_;

        /**
         * <code>optional bytes value = 3;</code>
         */
        public boolean hasValue() {
            return ((bitField0_) & 4) == 4;
        }

        /**
         * <code>optional bytes value = 3;</code>
         */
        public ByteString getValue() {
            return value_;
        }

        private void initFields() {
            name_ = "";
            strategyIndex_ = 0;
            value_ = com.google.protobuf.ByteString.EMPTY;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != (-1))
                return isInitialized == 1;
            
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if (((bitField0_) & 1) == 1) {
                output.writeBytes(1, getNameBytes());
            } 
            if (((bitField0_) & 2) == 2) {
                output.writeInt32(2, strategyIndex_);
            } 
            if (((bitField0_) & 4) == 4) {
                output.writeBytes(3, value_);
            } 
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != (-1))
                return size;
            
            size = 0;
            if (((bitField0_) & 1) == 1) {
                size += CodedOutputStream.computeBytesSize(1, getNameBytes());
            } 
            if (((bitField0_) & 2) == 2) {
                size += CodedOutputStream.computeInt32Size(2, strategyIndex_);
            } 
            if (((bitField0_) & 4) == 4) {
                size += CodedOutputStream.computeBytesSize(3, value_);
            } 
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static JBPMMessages.Variable parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return JBPMMessages.Variable.PARSER.parseFrom(data);
        }

        public static JBPMMessages.Variable parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return JBPMMessages.Variable.PARSER.parseFrom(data, extensionRegistry);
        }

        public static JBPMMessages.Variable parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return JBPMMessages.Variable.PARSER.parseFrom(data);
        }

        public static JBPMMessages.Variable parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return JBPMMessages.Variable.PARSER.parseFrom(data, extensionRegistry);
        }

        public static JBPMMessages.Variable parseFrom(InputStream input) throws IOException {
            return JBPMMessages.Variable.PARSER.parseFrom(input);
        }

        public static JBPMMessages.Variable parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.Variable.PARSER.parseFrom(input, extensionRegistry);
        }

        public static JBPMMessages.Variable parseDelimitedFrom(InputStream input) throws IOException {
            return JBPMMessages.Variable.PARSER.parseDelimitedFrom(input);
        }

        public static JBPMMessages.Variable parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.Variable.PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static JBPMMessages.Variable parseFrom(CodedInputStream input) throws IOException {
            return JBPMMessages.Variable.PARSER.parseFrom(input);
        }

        public static JBPMMessages.Variable parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.Variable.PARSER.parseFrom(input, extensionRegistry);
        }

        public static JBPMMessages.Variable.Builder newBuilder() {
            return JBPMMessages.Variable.Builder.create();
        }

        public JBPMMessages.Variable.Builder newBuilderForType() {
            return JBPMMessages.Variable.newBuilder();
        }

        public static JBPMMessages.Variable.Builder newBuilder(JBPMMessages.Variable prototype) {
            return JBPMMessages.Variable.newBuilder().mergeFrom(prototype);
        }

        public JBPMMessages.Variable.Builder toBuilder() {
            return JBPMMessages.Variable.newBuilder(JBPMMessages.Variable.this);
        }

        @Override
        protected JBPMMessages.Variable.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            JBPMMessages.Variable.Builder builder = new JBPMMessages.Variable.Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.jbpm.marshalling.Variable}
         */
        // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.Variable)
        public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.Variable.Builder> implements JBPMMessages.VariableOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_Variable_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_Variable_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.Variable.class, JBPMMessages.Variable.Builder.class);
            }

            // Construct using org.jbpm.marshalling.impl.JBPMMessages.Variable.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                } 
            }

            private static JBPMMessages.Variable.Builder create() {
                return new JBPMMessages.Variable.Builder();
            }

            public JBPMMessages.Variable.Builder clear() {
                super.clear();
                name_ = "";
                bitField0_ = (bitField0_) & (~1);
                strategyIndex_ = 0;
                bitField0_ = (bitField0_) & (~2);
                value_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_) & (~4);
                return JBPMMessages.Variable.Builder.this;
            }

            public JBPMMessages.Variable.Builder clone() {
                return JBPMMessages.Variable.Builder.create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_Variable_descriptor;
            }

            public JBPMMessages.Variable getDefaultInstanceForType() {
                return JBPMMessages.Variable.getDefaultInstance();
            }

            public JBPMMessages.Variable build() {
                JBPMMessages.Variable result = buildPartial();
                if (!(result.isInitialized())) {
                    throw AbstractMessage.Builder.newUninitializedMessageException(result);
                } 
                return result;
            }

            public JBPMMessages.Variable buildPartial() {
                JBPMMessages.Variable result = new JBPMMessages.Variable(JBPMMessages.Variable.Builder.this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 1) == 1) {
                    to_bitField0_ |= 1;
                } 
                result.name_ = name_;
                if ((from_bitField0_ & 2) == 2) {
                    to_bitField0_ |= 2;
                } 
                result.strategyIndex_ = strategyIndex_;
                if ((from_bitField0_ & 4) == 4) {
                    to_bitField0_ |= 4;
                } 
                result.value_ = value_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public JBPMMessages.Variable.Builder mergeFrom(Message other) {
                if (other instanceof JBPMMessages.Variable) {
                    return mergeFrom(((JBPMMessages.Variable) (other)));
                } else {
                    super.mergeFrom(other);
                    return JBPMMessages.Variable.Builder.this;
                }
            }

            public JBPMMessages.Variable.Builder mergeFrom(JBPMMessages.Variable other) {
                if (other == (JBPMMessages.Variable.getDefaultInstance()))
                    return JBPMMessages.Variable.Builder.this;
                
                if (other.hasName()) {
                    bitField0_ |= 1;
                    name_ = other.name_;
                    onChanged();
                } 
                if (other.hasStrategyIndex()) {
                    setStrategyIndex(other.getStrategyIndex());
                } 
                if (other.hasValue()) {
                    setValue(other.getValue());
                } 
                JBPMMessages.Variable.Builder.this.mergeUnknownFields(other.getUnknownFields());
                return JBPMMessages.Variable.Builder.this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public JBPMMessages.Variable.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                JBPMMessages.Variable parsedMessage = null;
                try {
                    parsedMessage = JBPMMessages.Variable.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = ((JBPMMessages.Variable) (e.getUnfinishedMessage()));
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    } 
                }
                return JBPMMessages.Variable.Builder.this;
            }

            private int bitField0_;

            // optional string name = 1;
            private Object name_ = "";

            /**
             * <code>optional string name = 1;</code>
             */
            public boolean hasName() {
                return ((bitField0_) & 1) == 1;
            }

            /**
             * <code>optional string name = 1;</code>
             */
            public String getName() {
                Object ref = name_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) (ref)).toStringUtf8();
                    name_ = s;
                    return s;
                } else {
                    return ((String) (ref));
                }
            }

            /**
             * <code>optional string name = 1;</code>
             */
            public ByteString getNameBytes() {
                Object ref = name_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                    name_ = b;
                    return b;
                } else {
                    return ((ByteString) (ref));
                }
            }

            /**
             * <code>optional string name = 1;</code>
             */
            public JBPMMessages.Variable.Builder setName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 1;
                name_ = value;
                onChanged();
                return JBPMMessages.Variable.Builder.this;
            }

            /**
             * <code>optional string name = 1;</code>
             */
            public JBPMMessages.Variable.Builder clearName() {
                bitField0_ = (bitField0_) & (~1);
                name_ = JBPMMessages.Variable.getDefaultInstance().getName();
                onChanged();
                return JBPMMessages.Variable.Builder.this;
            }

            /**
             * <code>optional string name = 1;</code>
             */
            public JBPMMessages.Variable.Builder setNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 1;
                name_ = value;
                onChanged();
                return JBPMMessages.Variable.Builder.this;
            }

            // optional int32 strategy_index = 2;
            private int strategyIndex_;

            /**
             * <code>optional int32 strategy_index = 2;</code>
             * 
             * <pre>
             * the actual object reference
             * </pre>
             */
            public boolean hasStrategyIndex() {
                return ((bitField0_) & 2) == 2;
            }

            /**
             * <code>optional int32 strategy_index = 2;</code>
             * 
             * <pre>
             * the actual object reference
             * </pre>
             */
            public int getStrategyIndex() {
                return strategyIndex_;
            }

            /**
             * <code>optional int32 strategy_index = 2;</code>
             * 
             * <pre>
             * the actual object reference
             * </pre>
             */
            public JBPMMessages.Variable.Builder setStrategyIndex(int value) {
                bitField0_ |= 2;
                strategyIndex_ = value;
                onChanged();
                return JBPMMessages.Variable.Builder.this;
            }

            /**
             * <code>optional int32 strategy_index = 2;</code>
             * 
             * <pre>
             * the actual object reference
             * </pre>
             */
            public JBPMMessages.Variable.Builder clearStrategyIndex() {
                bitField0_ = (bitField0_) & (~2);
                strategyIndex_ = 0;
                onChanged();
                return JBPMMessages.Variable.Builder.this;
            }

            // optional bytes value = 3;
            private ByteString value_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes value = 3;</code>
             */
            public boolean hasValue() {
                return ((bitField0_) & 4) == 4;
            }

            /**
             * <code>optional bytes value = 3;</code>
             */
            public ByteString getValue() {
                return value_;
            }

            /**
             * <code>optional bytes value = 3;</code>
             */
            public JBPMMessages.Variable.Builder setValue(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 4;
                value_ = value;
                onChanged();
                return JBPMMessages.Variable.Builder.this;
            }

            /**
             * <code>optional bytes value = 3;</code>
             */
            public JBPMMessages.Variable.Builder clearValue() {
                bitField0_ = (bitField0_) & (~4);
                value_ = JBPMMessages.Variable.getDefaultInstance().getValue();
                onChanged();
                return JBPMMessages.Variable.Builder.this;
            }

            // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.Variable)
        }

        static {
            defaultInstance = new JBPMMessages.Variable(true);
            JBPMMessages.Variable.defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.Variable)
    }

    public interface WorkItemOrBuilder extends MessageOrBuilder {
        // optional int64 id = 1;
        /**
         * <code>optional int64 id = 1;</code>
         */
        boolean hasId();

        /**
         * <code>optional int64 id = 1;</code>
         */
        long getId();

        // optional int64 process_instances_id = 2;
        /**
         * <code>optional int64 process_instances_id = 2;</code>
         */
        boolean hasProcessInstancesId();

        /**
         * <code>optional int64 process_instances_id = 2;</code>
         */
        long getProcessInstancesId();

        // optional string name = 3;
        /**
         * <code>optional string name = 3;</code>
         */
        boolean hasName();

        /**
         * <code>optional string name = 3;</code>
         */
        String getName();

        /**
         * <code>optional string name = 3;</code>
         */
        ByteString getNameBytes();

        // optional int32 state = 4;
        /**
         * <code>optional int32 state = 4;</code>
         */
        boolean hasState();

        /**
         * <code>optional int32 state = 4;</code>
         */
        int getState();

        // repeated .org.jbpm.marshalling.Variable variable = 5;
        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
         */
        List<JBPMMessages.Variable> getVariableList();

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
         */
        JBPMMessages.Variable getVariable(int index);

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
         */
        int getVariableCount();

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
         */
        List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList();

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
         */
        JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index);

        // optional string deployment_id = 6;
        /**
         * <code>optional string deployment_id = 6;</code>
         */
        boolean hasDeploymentId();

        /**
         * <code>optional string deployment_id = 6;</code>
         */
        String getDeploymentId();

        /**
         * <code>optional string deployment_id = 6;</code>
         */
        ByteString getDeploymentIdBytes();

        // optional int64 node_instance_id = 7;
        /**
         * <code>optional int64 node_instance_id = 7;</code>
         */
        boolean hasNodeInstanceId();

        /**
         * <code>optional int64 node_instance_id = 7;</code>
         */
        long getNodeInstanceId();

        // optional int64 node_id = 8;
        /**
         * <code>optional int64 node_id = 8;</code>
         */
        boolean hasNodeId();

        /**
         * <code>optional int64 node_id = 8;</code>
         */
        long getNodeId();
    }

    /**
     * Protobuf type {@code org.jbpm.marshalling.WorkItem}
     */
    // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.WorkItem)
    public static final class WorkItem extends GeneratedMessage implements JBPMMessages.WorkItemOrBuilder {
        // Use WorkItem.newBuilder() to construct.
        private WorkItem(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private WorkItem(boolean noInit) {
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        private static final JBPMMessages.WorkItem defaultInstance;

        public static JBPMMessages.WorkItem getDefaultInstance() {
            return JBPMMessages.WorkItem.defaultInstance;
        }

        public JBPMMessages.WorkItem getDefaultInstanceForType() {
            return JBPMMessages.WorkItem.defaultInstance;
        }

        private final UnknownFieldSet unknownFields;

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return JBPMMessages.WorkItem.this.unknownFields;
        }

        private WorkItem(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0 :
                            done = true;
                            break;
                        default :
                            {
                                if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                    done = true;
                                } 
                                break;
                            }
                        case 8 :
                            {
                                bitField0_ |= 1;
                                id_ = input.readInt64();
                                break;
                            }
                        case 16 :
                            {
                                bitField0_ |= 2;
                                processInstancesId_ = input.readInt64();
                                break;
                            }
                        case 26 :
                            {
                                bitField0_ |= 4;
                                name_ = input.readBytes();
                                break;
                            }
                        case 32 :
                            {
                                bitField0_ |= 8;
                                state_ = input.readInt32();
                                break;
                            }
                        case 42 :
                            {
                                if (!((mutable_bitField0_ & 16) == 16)) {
                                    variable_ = new ArrayList<JBPMMessages.Variable>();
                                    mutable_bitField0_ |= 16;
                                } 
                                variable_.add(input.readMessage(JBPMMessages.Variable.PARSER, extensionRegistry));
                                break;
                            }
                        case 50 :
                            {
                                bitField0_ |= 16;
                                deploymentId_ = input.readBytes();
                                break;
                            }
                        case 56 :
                            {
                                bitField0_ |= 32;
                                nodeInstanceId_ = input.readInt64();
                                break;
                            }
                        case 64 :
                            {
                                bitField0_ |= 64;
                                nodeId_ = input.readInt64();
                                break;
                            }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(JBPMMessages.WorkItem.this);
            } catch (IOException e) {
                throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.WorkItem.this);
            } finally {
                if ((mutable_bitField0_ & 16) == 16) {
                    variable_ = Collections.unmodifiableList(variable_);
                } 
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_WorkItem_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_WorkItem_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.WorkItem.class, JBPMMessages.WorkItem.Builder.class);
        }

        public static Parser<JBPMMessages.WorkItem> PARSER = new AbstractParser<JBPMMessages.WorkItem>() {
            public JBPMMessages.WorkItem parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new JBPMMessages.WorkItem(input, extensionRegistry);
            }
        };

        @Override
        public Parser<JBPMMessages.WorkItem> getParserForType() {
            return JBPMMessages.WorkItem.PARSER;
        }

        private int bitField0_;

        // optional int64 id = 1;
        public static final int ID_FIELD_NUMBER = 1;

        private long id_;

        /**
         * <code>optional int64 id = 1;</code>
         */
        public boolean hasId() {
            return ((bitField0_) & 1) == 1;
        }

        /**
         * <code>optional int64 id = 1;</code>
         */
        public long getId() {
            return id_;
        }

        // optional int64 process_instances_id = 2;
        public static final int PROCESS_INSTANCES_ID_FIELD_NUMBER = 2;

        private long processInstancesId_;

        /**
         * <code>optional int64 process_instances_id = 2;</code>
         */
        public boolean hasProcessInstancesId() {
            return ((bitField0_) & 2) == 2;
        }

        /**
         * <code>optional int64 process_instances_id = 2;</code>
         */
        public long getProcessInstancesId() {
            return processInstancesId_;
        }

        // optional string name = 3;
        public static final int NAME_FIELD_NUMBER = 3;

        private Object name_;

        /**
         * <code>optional string name = 3;</code>
         */
        public boolean hasName() {
            return ((bitField0_) & 4) == 4;
        }

        /**
         * <code>optional string name = 3;</code>
         */
        public String getName() {
            Object ref = name_;
            if (ref instanceof String) {
                return ((String) (ref));
            } else {
                ByteString bs = ((ByteString) (ref));
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    name_ = s;
                } 
                return s;
            }
        }

        /**
         * <code>optional string name = 3;</code>
         */
        public ByteString getNameBytes() {
            Object ref = name_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                name_ = b;
                return b;
            } else {
                return ((ByteString) (ref));
            }
        }

        // optional int32 state = 4;
        public static final int STATE_FIELD_NUMBER = 4;

        private int state_;

        /**
         * <code>optional int32 state = 4;</code>
         */
        public boolean hasState() {
            return ((bitField0_) & 8) == 8;
        }

        /**
         * <code>optional int32 state = 4;</code>
         */
        public int getState() {
            return state_;
        }

        // repeated .org.jbpm.marshalling.Variable variable = 5;
        public static final int VARIABLE_FIELD_NUMBER = 5;

        private List<JBPMMessages.Variable> variable_;

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
         */
        public List<JBPMMessages.Variable> getVariableList() {
            return variable_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
         */
        public List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList() {
            return variable_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
         */
        public int getVariableCount() {
            return variable_.size();
        }

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
         */
        public JBPMMessages.Variable getVariable(int index) {
            return variable_.get(index);
        }

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
         */
        public JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index) {
            return variable_.get(index);
        }

        // optional string deployment_id = 6;
        public static final int DEPLOYMENT_ID_FIELD_NUMBER = 6;

        private Object deploymentId_;

        /**
         * <code>optional string deployment_id = 6;</code>
         */
        public boolean hasDeploymentId() {
            return ((bitField0_) & 16) == 16;
        }

        /**
         * <code>optional string deployment_id = 6;</code>
         */
        public String getDeploymentId() {
            Object ref = deploymentId_;
            if (ref instanceof String) {
                return ((String) (ref));
            } else {
                ByteString bs = ((ByteString) (ref));
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    deploymentId_ = s;
                } 
                return s;
            }
        }

        /**
         * <code>optional string deployment_id = 6;</code>
         */
        public ByteString getDeploymentIdBytes() {
            Object ref = deploymentId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                deploymentId_ = b;
                return b;
            } else {
                return ((ByteString) (ref));
            }
        }

        // optional int64 node_instance_id = 7;
        public static final int NODE_INSTANCE_ID_FIELD_NUMBER = 7;

        private long nodeInstanceId_;

        /**
         * <code>optional int64 node_instance_id = 7;</code>
         */
        public boolean hasNodeInstanceId() {
            return ((bitField0_) & 32) == 32;
        }

        /**
         * <code>optional int64 node_instance_id = 7;</code>
         */
        public long getNodeInstanceId() {
            return nodeInstanceId_;
        }

        // optional int64 node_id = 8;
        public static final int NODE_ID_FIELD_NUMBER = 8;

        private long nodeId_;

        /**
         * <code>optional int64 node_id = 8;</code>
         */
        public boolean hasNodeId() {
            return ((bitField0_) & 64) == 64;
        }

        /**
         * <code>optional int64 node_id = 8;</code>
         */
        public long getNodeId() {
            return nodeId_;
        }

        private void initFields() {
            id_ = 0L;
            processInstancesId_ = 0L;
            name_ = "";
            state_ = 0;
            variable_ = Collections.emptyList();
            deploymentId_ = "";
            nodeInstanceId_ = 0L;
            nodeId_ = 0L;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != (-1))
                return isInitialized == 1;
            
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if (((bitField0_) & 1) == 1) {
                output.writeInt64(1, id_);
            } 
            if (((bitField0_) & 2) == 2) {
                output.writeInt64(2, processInstancesId_);
            } 
            if (((bitField0_) & 4) == 4) {
                output.writeBytes(3, getNameBytes());
            } 
            if (((bitField0_) & 8) == 8) {
                output.writeInt32(4, state_);
            } 
            for (int i = 0; i < (variable_.size()); i++) {
                output.writeMessage(5, variable_.get(i));
            }
            if (((bitField0_) & 16) == 16) {
                output.writeBytes(6, getDeploymentIdBytes());
            } 
            if (((bitField0_) & 32) == 32) {
                output.writeInt64(7, nodeInstanceId_);
            } 
            if (((bitField0_) & 64) == 64) {
                output.writeInt64(8, nodeId_);
            } 
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != (-1))
                return size;
            
            size = 0;
            if (((bitField0_) & 1) == 1) {
                size += CodedOutputStream.computeInt64Size(1, id_);
            } 
            if (((bitField0_) & 2) == 2) {
                size += CodedOutputStream.computeInt64Size(2, processInstancesId_);
            } 
            if (((bitField0_) & 4) == 4) {
                size += CodedOutputStream.computeBytesSize(3, getNameBytes());
            } 
            if (((bitField0_) & 8) == 8) {
                size += CodedOutputStream.computeInt32Size(4, state_);
            } 
            for (int i = 0; i < (variable_.size()); i++) {
                size += CodedOutputStream.computeMessageSize(5, variable_.get(i));
            }
            if (((bitField0_) & 16) == 16) {
                size += CodedOutputStream.computeBytesSize(6, getDeploymentIdBytes());
            } 
            if (((bitField0_) & 32) == 32) {
                size += CodedOutputStream.computeInt64Size(7, nodeInstanceId_);
            } 
            if (((bitField0_) & 64) == 64) {
                size += CodedOutputStream.computeInt64Size(8, nodeId_);
            } 
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static JBPMMessages.WorkItem parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return JBPMMessages.WorkItem.PARSER.parseFrom(data);
        }

        public static JBPMMessages.WorkItem parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return JBPMMessages.WorkItem.PARSER.parseFrom(data, extensionRegistry);
        }

        public static JBPMMessages.WorkItem parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return JBPMMessages.WorkItem.PARSER.parseFrom(data);
        }

        public static JBPMMessages.WorkItem parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return JBPMMessages.WorkItem.PARSER.parseFrom(data, extensionRegistry);
        }

        public static JBPMMessages.WorkItem parseFrom(InputStream input) throws IOException {
            return JBPMMessages.WorkItem.PARSER.parseFrom(input);
        }

        public static JBPMMessages.WorkItem parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.WorkItem.PARSER.parseFrom(input, extensionRegistry);
        }

        public static JBPMMessages.WorkItem parseDelimitedFrom(InputStream input) throws IOException {
            return JBPMMessages.WorkItem.PARSER.parseDelimitedFrom(input);
        }

        public static JBPMMessages.WorkItem parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.WorkItem.PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static JBPMMessages.WorkItem parseFrom(CodedInputStream input) throws IOException {
            return JBPMMessages.WorkItem.PARSER.parseFrom(input);
        }

        public static JBPMMessages.WorkItem parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.WorkItem.PARSER.parseFrom(input, extensionRegistry);
        }

        public static JBPMMessages.WorkItem.Builder newBuilder() {
            return JBPMMessages.WorkItem.Builder.create();
        }

        public JBPMMessages.WorkItem.Builder newBuilderForType() {
            return JBPMMessages.WorkItem.newBuilder();
        }

        public static JBPMMessages.WorkItem.Builder newBuilder(JBPMMessages.WorkItem prototype) {
            return JBPMMessages.WorkItem.newBuilder().mergeFrom(prototype);
        }

        public JBPMMessages.WorkItem.Builder toBuilder() {
            return JBPMMessages.WorkItem.newBuilder(JBPMMessages.WorkItem.this);
        }

        @Override
        protected JBPMMessages.WorkItem.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            JBPMMessages.WorkItem.Builder builder = new JBPMMessages.WorkItem.Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.jbpm.marshalling.WorkItem}
         */
        // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.WorkItem)
        public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.WorkItem.Builder> implements JBPMMessages.WorkItemOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_WorkItem_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_WorkItem_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.WorkItem.class, JBPMMessages.WorkItem.Builder.class);
            }

            // Construct using org.jbpm.marshalling.impl.JBPMMessages.WorkItem.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getVariableFieldBuilder();
                } 
            }

            private static JBPMMessages.WorkItem.Builder create() {
                return new JBPMMessages.WorkItem.Builder();
            }

            public JBPMMessages.WorkItem.Builder clear() {
                super.clear();
                id_ = 0L;
                bitField0_ = (bitField0_) & (~1);
                processInstancesId_ = 0L;
                bitField0_ = (bitField0_) & (~2);
                name_ = "";
                bitField0_ = (bitField0_) & (~4);
                state_ = 0;
                bitField0_ = (bitField0_) & (~8);
                if ((variableBuilder_) == null) {
                    variable_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~16);
                } else {
                    variableBuilder_.clear();
                }
                deploymentId_ = "";
                bitField0_ = (bitField0_) & (~32);
                nodeInstanceId_ = 0L;
                bitField0_ = (bitField0_) & (~64);
                nodeId_ = 0L;
                bitField0_ = (bitField0_) & (~128);
                return JBPMMessages.WorkItem.Builder.this;
            }

            public JBPMMessages.WorkItem.Builder clone() {
                return JBPMMessages.WorkItem.Builder.create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_WorkItem_descriptor;
            }

            public JBPMMessages.WorkItem getDefaultInstanceForType() {
                return JBPMMessages.WorkItem.getDefaultInstance();
            }

            public JBPMMessages.WorkItem build() {
                JBPMMessages.WorkItem result = buildPartial();
                if (!(result.isInitialized())) {
                    throw AbstractMessage.Builder.newUninitializedMessageException(result);
                } 
                return result;
            }

            public JBPMMessages.WorkItem buildPartial() {
                JBPMMessages.WorkItem result = new JBPMMessages.WorkItem(JBPMMessages.WorkItem.Builder.this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 1) == 1) {
                    to_bitField0_ |= 1;
                } 
                result.id_ = id_;
                if ((from_bitField0_ & 2) == 2) {
                    to_bitField0_ |= 2;
                } 
                result.processInstancesId_ = processInstancesId_;
                if ((from_bitField0_ & 4) == 4) {
                    to_bitField0_ |= 4;
                } 
                result.name_ = name_;
                if ((from_bitField0_ & 8) == 8) {
                    to_bitField0_ |= 8;
                } 
                result.state_ = state_;
                if ((variableBuilder_) == null) {
                    if (((bitField0_) & 16) == 16) {
                        variable_ = Collections.unmodifiableList(variable_);
                        bitField0_ = (bitField0_) & (~16);
                    } 
                    result.variable_ = variable_;
                } else {
                    result.variable_ = variableBuilder_.build();
                }
                if ((from_bitField0_ & 32) == 32) {
                    to_bitField0_ |= 16;
                } 
                result.deploymentId_ = deploymentId_;
                if ((from_bitField0_ & 64) == 64) {
                    to_bitField0_ |= 32;
                } 
                result.nodeInstanceId_ = nodeInstanceId_;
                if ((from_bitField0_ & 128) == 128) {
                    to_bitField0_ |= 64;
                } 
                result.nodeId_ = nodeId_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public JBPMMessages.WorkItem.Builder mergeFrom(Message other) {
                if (other instanceof JBPMMessages.WorkItem) {
                    return mergeFrom(((JBPMMessages.WorkItem) (other)));
                } else {
                    super.mergeFrom(other);
                    return JBPMMessages.WorkItem.Builder.this;
                }
            }

            public JBPMMessages.WorkItem.Builder mergeFrom(JBPMMessages.WorkItem other) {
                if (other == (JBPMMessages.WorkItem.getDefaultInstance()))
                    return JBPMMessages.WorkItem.Builder.this;
                
                if (other.hasId()) {
                    setId(other.getId());
                } 
                if (other.hasProcessInstancesId()) {
                    setProcessInstancesId(other.getProcessInstancesId());
                } 
                if (other.hasName()) {
                    bitField0_ |= 4;
                    name_ = other.name_;
                    onChanged();
                } 
                if (other.hasState()) {
                    setState(other.getState());
                } 
                if ((variableBuilder_) == null) {
                    if (!(other.variable_.isEmpty())) {
                        if (variable_.isEmpty()) {
                            variable_ = other.variable_;
                            bitField0_ = (bitField0_) & (~16);
                        } else {
                            ensureVariableIsMutable();
                            variable_.addAll(other.variable_);
                        }
                        onChanged();
                    } 
                } else {
                    if (!(other.variable_.isEmpty())) {
                        if (variableBuilder_.isEmpty()) {
                            variableBuilder_.dispose();
                            variableBuilder_ = null;
                            variable_ = other.variable_;
                            bitField0_ = (bitField0_) & (~16);
                            variableBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getVariableFieldBuilder() : null;
                        } else {
                            variableBuilder_.addAllMessages(other.variable_);
                        }
                    } 
                }
                if (other.hasDeploymentId()) {
                    bitField0_ |= 32;
                    deploymentId_ = other.deploymentId_;
                    onChanged();
                } 
                if (other.hasNodeInstanceId()) {
                    setNodeInstanceId(other.getNodeInstanceId());
                } 
                if (other.hasNodeId()) {
                    setNodeId(other.getNodeId());
                } 
                JBPMMessages.WorkItem.Builder.this.mergeUnknownFields(other.getUnknownFields());
                return JBPMMessages.WorkItem.Builder.this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public JBPMMessages.WorkItem.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                JBPMMessages.WorkItem parsedMessage = null;
                try {
                    parsedMessage = JBPMMessages.WorkItem.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = ((JBPMMessages.WorkItem) (e.getUnfinishedMessage()));
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    } 
                }
                return JBPMMessages.WorkItem.Builder.this;
            }

            private int bitField0_;

            // optional int64 id = 1;
            private long id_;

            /**
             * <code>optional int64 id = 1;</code>
             */
            public boolean hasId() {
                return ((bitField0_) & 1) == 1;
            }

            /**
             * <code>optional int64 id = 1;</code>
             */
            public long getId() {
                return id_;
            }

            /**
             * <code>optional int64 id = 1;</code>
             */
            public JBPMMessages.WorkItem.Builder setId(long value) {
                bitField0_ |= 1;
                id_ = value;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>optional int64 id = 1;</code>
             */
            public JBPMMessages.WorkItem.Builder clearId() {
                bitField0_ = (bitField0_) & (~1);
                id_ = 0L;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            // optional int64 process_instances_id = 2;
            private long processInstancesId_;

            /**
             * <code>optional int64 process_instances_id = 2;</code>
             */
            public boolean hasProcessInstancesId() {
                return ((bitField0_) & 2) == 2;
            }

            /**
             * <code>optional int64 process_instances_id = 2;</code>
             */
            public long getProcessInstancesId() {
                return processInstancesId_;
            }

            /**
             * <code>optional int64 process_instances_id = 2;</code>
             */
            public JBPMMessages.WorkItem.Builder setProcessInstancesId(long value) {
                bitField0_ |= 2;
                processInstancesId_ = value;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>optional int64 process_instances_id = 2;</code>
             */
            public JBPMMessages.WorkItem.Builder clearProcessInstancesId() {
                bitField0_ = (bitField0_) & (~2);
                processInstancesId_ = 0L;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            // optional string name = 3;
            private Object name_ = "";

            /**
             * <code>optional string name = 3;</code>
             */
            public boolean hasName() {
                return ((bitField0_) & 4) == 4;
            }

            /**
             * <code>optional string name = 3;</code>
             */
            public String getName() {
                Object ref = name_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) (ref)).toStringUtf8();
                    name_ = s;
                    return s;
                } else {
                    return ((String) (ref));
                }
            }

            /**
             * <code>optional string name = 3;</code>
             */
            public ByteString getNameBytes() {
                Object ref = name_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                    name_ = b;
                    return b;
                } else {
                    return ((ByteString) (ref));
                }
            }

            /**
             * <code>optional string name = 3;</code>
             */
            public JBPMMessages.WorkItem.Builder setName(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 4;
                name_ = value;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>optional string name = 3;</code>
             */
            public JBPMMessages.WorkItem.Builder clearName() {
                bitField0_ = (bitField0_) & (~4);
                name_ = JBPMMessages.WorkItem.getDefaultInstance().getName();
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>optional string name = 3;</code>
             */
            public JBPMMessages.WorkItem.Builder setNameBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 4;
                name_ = value;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            // optional int32 state = 4;
            private int state_;

            /**
             * <code>optional int32 state = 4;</code>
             */
            public boolean hasState() {
                return ((bitField0_) & 8) == 8;
            }

            /**
             * <code>optional int32 state = 4;</code>
             */
            public int getState() {
                return state_;
            }

            /**
             * <code>optional int32 state = 4;</code>
             */
            public JBPMMessages.WorkItem.Builder setState(int value) {
                bitField0_ |= 8;
                state_ = value;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>optional int32 state = 4;</code>
             */
            public JBPMMessages.WorkItem.Builder clearState() {
                bitField0_ = (bitField0_) & (~8);
                state_ = 0;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            // repeated .org.jbpm.marshalling.Variable variable = 5;
            private List<JBPMMessages.Variable> variable_ = Collections.emptyList();

            private void ensureVariableIsMutable() {
                if (!(((bitField0_) & 16) == 16)) {
                    variable_ = new ArrayList<JBPMMessages.Variable>(variable_);
                    bitField0_ |= 16;
                } 
            }

            private RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder> variableBuilder_;

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public List<JBPMMessages.Variable> getVariableList() {
                if ((variableBuilder_) == null) {
                    return Collections.unmodifiableList(variable_);
                } else {
                    return variableBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public int getVariableCount() {
                if ((variableBuilder_) == null) {
                    return variable_.size();
                } else {
                    return variableBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.Variable getVariable(int index) {
                if ((variableBuilder_) == null) {
                    return variable_.get(index);
                } else {
                    return variableBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.WorkItem.Builder setVariable(int index, JBPMMessages.Variable value) {
                if ((variableBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureVariableIsMutable();
                    variable_.set(index, value);
                    onChanged();
                } else {
                    variableBuilder_.setMessage(index, value);
                }
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.WorkItem.Builder setVariable(int index, JBPMMessages.Variable.Builder builderForValue) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    variable_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    variableBuilder_.setMessage(index, builderForValue.build());
                }
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.WorkItem.Builder addVariable(JBPMMessages.Variable value) {
                if ((variableBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureVariableIsMutable();
                    variable_.add(value);
                    onChanged();
                } else {
                    variableBuilder_.addMessage(value);
                }
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.WorkItem.Builder addVariable(int index, JBPMMessages.Variable value) {
                if ((variableBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureVariableIsMutable();
                    variable_.add(index, value);
                    onChanged();
                } else {
                    variableBuilder_.addMessage(index, value);
                }
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.WorkItem.Builder addVariable(JBPMMessages.Variable.Builder builderForValue) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    variable_.add(builderForValue.build());
                    onChanged();
                } else {
                    variableBuilder_.addMessage(builderForValue.build());
                }
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.WorkItem.Builder addVariable(int index, JBPMMessages.Variable.Builder builderForValue) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    variable_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    variableBuilder_.addMessage(index, builderForValue.build());
                }
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.WorkItem.Builder addAllVariable(Iterable<? extends JBPMMessages.Variable> values) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    super.addAll(values, variable_);
                    onChanged();
                } else {
                    variableBuilder_.addAllMessages(values);
                }
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.WorkItem.Builder clearVariable() {
                if ((variableBuilder_) == null) {
                    variable_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~16);
                    onChanged();
                } else {
                    variableBuilder_.clear();
                }
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.WorkItem.Builder removeVariable(int index) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    variable_.remove(index);
                    onChanged();
                } else {
                    variableBuilder_.remove(index);
                }
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.Variable.Builder getVariableBuilder(int index) {
                return getVariableFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index) {
                if ((variableBuilder_) == null) {
                    return variable_.get(index);
                } else {
                    return variableBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList() {
                if ((variableBuilder_) != null) {
                    return variableBuilder_.getMessageOrBuilderList();
                } else {
                    return Collections.unmodifiableList(variable_);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.Variable.Builder addVariableBuilder() {
                return getVariableFieldBuilder().addBuilder(JBPMMessages.Variable.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public JBPMMessages.Variable.Builder addVariableBuilder(int index) {
                return getVariableFieldBuilder().addBuilder(index, JBPMMessages.Variable.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 5;</code>
             */
            public List<JBPMMessages.Variable.Builder> getVariableBuilderList() {
                return getVariableFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder> getVariableFieldBuilder() {
                if ((variableBuilder_) == null) {
                    variableBuilder_ = new RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder>(variable_, (((bitField0_) & 16) == 16), getParentForChildren(), isClean());
                    variable_ = null;
                } 
                return variableBuilder_;
            }

            // optional string deployment_id = 6;
            private Object deploymentId_ = "";

            /**
             * <code>optional string deployment_id = 6;</code>
             */
            public boolean hasDeploymentId() {
                return ((bitField0_) & 32) == 32;
            }

            /**
             * <code>optional string deployment_id = 6;</code>
             */
            public String getDeploymentId() {
                Object ref = deploymentId_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) (ref)).toStringUtf8();
                    deploymentId_ = s;
                    return s;
                } else {
                    return ((String) (ref));
                }
            }

            /**
             * <code>optional string deployment_id = 6;</code>
             */
            public ByteString getDeploymentIdBytes() {
                Object ref = deploymentId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                    deploymentId_ = b;
                    return b;
                } else {
                    return ((ByteString) (ref));
                }
            }

            /**
             * <code>optional string deployment_id = 6;</code>
             */
            public JBPMMessages.WorkItem.Builder setDeploymentId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 32;
                deploymentId_ = value;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>optional string deployment_id = 6;</code>
             */
            public JBPMMessages.WorkItem.Builder clearDeploymentId() {
                bitField0_ = (bitField0_) & (~32);
                deploymentId_ = JBPMMessages.WorkItem.getDefaultInstance().getDeploymentId();
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>optional string deployment_id = 6;</code>
             */
            public JBPMMessages.WorkItem.Builder setDeploymentIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 32;
                deploymentId_ = value;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            // optional int64 node_instance_id = 7;
            private long nodeInstanceId_;

            /**
             * <code>optional int64 node_instance_id = 7;</code>
             */
            public boolean hasNodeInstanceId() {
                return ((bitField0_) & 64) == 64;
            }

            /**
             * <code>optional int64 node_instance_id = 7;</code>
             */
            public long getNodeInstanceId() {
                return nodeInstanceId_;
            }

            /**
             * <code>optional int64 node_instance_id = 7;</code>
             */
            public JBPMMessages.WorkItem.Builder setNodeInstanceId(long value) {
                bitField0_ |= 64;
                nodeInstanceId_ = value;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>optional int64 node_instance_id = 7;</code>
             */
            public JBPMMessages.WorkItem.Builder clearNodeInstanceId() {
                bitField0_ = (bitField0_) & (~64);
                nodeInstanceId_ = 0L;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            // optional int64 node_id = 8;
            private long nodeId_;

            /**
             * <code>optional int64 node_id = 8;</code>
             */
            public boolean hasNodeId() {
                return ((bitField0_) & 128) == 128;
            }

            /**
             * <code>optional int64 node_id = 8;</code>
             */
            public long getNodeId() {
                return nodeId_;
            }

            /**
             * <code>optional int64 node_id = 8;</code>
             */
            public JBPMMessages.WorkItem.Builder setNodeId(long value) {
                bitField0_ |= 128;
                nodeId_ = value;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            /**
             * <code>optional int64 node_id = 8;</code>
             */
            public JBPMMessages.WorkItem.Builder clearNodeId() {
                bitField0_ = (bitField0_) & (~128);
                nodeId_ = 0L;
                onChanged();
                return JBPMMessages.WorkItem.Builder.this;
            }

            // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.WorkItem)
        }

        static {
            defaultInstance = new JBPMMessages.WorkItem(true);
            JBPMMessages.WorkItem.defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.WorkItem)
    }

    public interface ProcessTimerOrBuilder extends MessageOrBuilder {
        // optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;
        /**
         * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
         */
        boolean hasTimer();

        /**
         * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
         */
        JBPMMessages.ProcessTimer.TimerInstance getTimer();

        /**
         * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
         */
        JBPMMessages.ProcessTimer.TimerInstanceOrBuilder getTimerOrBuilder();

        // optional .org.drools.core.marshalling.Trigger trigger = 2;
        /**
         * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
         */
        boolean hasTrigger();

        /**
         * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
         */
        Trigger getTrigger();

        /**
         * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
         */
        TriggerOrBuilder getTriggerOrBuilder();
    }

    /**
     * Protobuf type {@code org.jbpm.marshalling.ProcessTimer}
     */
    // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessTimer)
    public static final class ProcessTimer extends GeneratedMessage implements JBPMMessages.ProcessTimerOrBuilder {
        // Use ProcessTimer.newBuilder() to construct.
        private ProcessTimer(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private ProcessTimer(boolean noInit) {
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        private static final JBPMMessages.ProcessTimer defaultInstance;

        public static JBPMMessages.ProcessTimer getDefaultInstance() {
            return JBPMMessages.ProcessTimer.defaultInstance;
        }

        public JBPMMessages.ProcessTimer getDefaultInstanceForType() {
            return JBPMMessages.ProcessTimer.defaultInstance;
        }

        private final UnknownFieldSet unknownFields;

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return JBPMMessages.ProcessTimer.this.unknownFields;
        }

        private ProcessTimer(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0 :
                            done = true;
                            break;
                        default :
                            {
                                if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                    done = true;
                                } 
                                break;
                            }
                        case 10 :
                            {
                                JBPMMessages.ProcessTimer.TimerInstance.Builder subBuilder = null;
                                if (((bitField0_) & 1) == 1) {
                                    subBuilder = timer_.toBuilder();
                                } 
                                timer_ = input.readMessage(JBPMMessages.ProcessTimer.TimerInstance.PARSER, extensionRegistry);
                                if (subBuilder != null) {
                                    subBuilder.mergeFrom(timer_);
                                    timer_ = subBuilder.buildPartial();
                                } 
                                bitField0_ |= 1;
                                break;
                            }
                        case 18 :
                            {
                                ProtobufMessages.Trigger.Builder subBuilder = null;
                                if (((bitField0_) & 2) == 2) {
                                    subBuilder = trigger_.toBuilder();
                                } 
                                trigger_ = input.readMessage(org.drools.core.marshalling.impl.ProtobufMessages.Trigger.PARSER, extensionRegistry);
                                if (subBuilder != null) {
                                    subBuilder.mergeFrom(trigger_);
                                    trigger_ = subBuilder.buildPartial();
                                } 
                                bitField0_ |= 2;
                                break;
                            }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(JBPMMessages.ProcessTimer.this);
            } catch (IOException e) {
                throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessTimer.this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessTimer.class, JBPMMessages.ProcessTimer.Builder.class);
        }

        public static Parser<JBPMMessages.ProcessTimer> PARSER = new AbstractParser<JBPMMessages.ProcessTimer>() {
            public JBPMMessages.ProcessTimer parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new JBPMMessages.ProcessTimer(input, extensionRegistry);
            }
        };

        @Override
        public Parser<JBPMMessages.ProcessTimer> getParserForType() {
            return JBPMMessages.ProcessTimer.PARSER;
        }

        public interface TimerInstanceOrBuilder extends MessageOrBuilder {
            // optional int64 id = 1;
            /**
             * <code>optional int64 id = 1;</code>
             */
            boolean hasId();

            /**
             * <code>optional int64 id = 1;</code>
             */
            long getId();

            // optional int64 timer_id = 2;
            /**
             * <code>optional int64 timer_id = 2;</code>
             */
            boolean hasTimerId();

            /**
             * <code>optional int64 timer_id = 2;</code>
             */
            long getTimerId();

            // optional int64 delay = 3;
            /**
             * <code>optional int64 delay = 3;</code>
             */
            boolean hasDelay();

            /**
             * <code>optional int64 delay = 3;</code>
             */
            long getDelay();

            // optional int64 period = 4;
            /**
             * <code>optional int64 period = 4;</code>
             */
            boolean hasPeriod();

            /**
             * <code>optional int64 period = 4;</code>
             */
            long getPeriod();

            // optional int64 process_instance_id = 5;
            /**
             * <code>optional int64 process_instance_id = 5;</code>
             */
            boolean hasProcessInstanceId();

            /**
             * <code>optional int64 process_instance_id = 5;</code>
             */
            long getProcessInstanceId();

            // optional int64 activated_time = 6;
            /**
             * <code>optional int64 activated_time = 6;</code>
             */
            boolean hasActivatedTime();

            /**
             * <code>optional int64 activated_time = 6;</code>
             */
            long getActivatedTime();

            // optional int64 last_triggered = 7;
            /**
             * <code>optional int64 last_triggered = 7;</code>
             */
            boolean hasLastTriggered();

            /**
             * <code>optional int64 last_triggered = 7;</code>
             */
            long getLastTriggered();

            // optional int32 DEPRECATED_sessionId = 8;
            /**
             * <code>optional int32 DEPRECATED_sessionId = 8;</code>
             */
            boolean hasDEPRECATEDSessionId();

            /**
             * <code>optional int32 DEPRECATED_sessionId = 8;</code>
             */
            int getDEPRECATEDSessionId();

            // optional int64 sessionId = 9;
            /**
             * <code>optional int64 sessionId = 9;</code>
             */
            boolean hasSessionId();

            /**
             * <code>optional int64 sessionId = 9;</code>
             */
            long getSessionId();
        }

        /**
         * Protobuf type {@code org.jbpm.marshalling.ProcessTimer.TimerInstance}
         */
        // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessTimer.TimerInstance)
        public static final class TimerInstance extends GeneratedMessage implements JBPMMessages.ProcessTimer.TimerInstanceOrBuilder {
            // Use TimerInstance.newBuilder() to construct.
            private TimerInstance(GeneratedMessage.Builder<?> builder) {
                super(builder);
                this.unknownFields = builder.getUnknownFields();
            }

            private TimerInstance(boolean noInit) {
                this.unknownFields = UnknownFieldSet.getDefaultInstance();
            }

            private static final JBPMMessages.ProcessTimer.TimerInstance defaultInstance;

            public static JBPMMessages.ProcessTimer.TimerInstance getDefaultInstance() {
                return JBPMMessages.ProcessTimer.TimerInstance.defaultInstance;
            }

            public JBPMMessages.ProcessTimer.TimerInstance getDefaultInstanceForType() {
                return JBPMMessages.ProcessTimer.TimerInstance.defaultInstance;
            }

            private final UnknownFieldSet unknownFields;

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return JBPMMessages.ProcessTimer.TimerInstance.this.unknownFields;
            }

            private TimerInstance(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                initFields();
                int mutable_bitField0_ = 0;
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0 :
                                done = true;
                                break;
                            default :
                                {
                                    if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                        done = true;
                                    } 
                                    break;
                                }
                            case 8 :
                                {
                                    bitField0_ |= 1;
                                    id_ = input.readInt64();
                                    break;
                                }
                            case 16 :
                                {
                                    bitField0_ |= 2;
                                    timerId_ = input.readInt64();
                                    break;
                                }
                            case 24 :
                                {
                                    bitField0_ |= 4;
                                    delay_ = input.readInt64();
                                    break;
                                }
                            case 32 :
                                {
                                    bitField0_ |= 8;
                                    period_ = input.readInt64();
                                    break;
                                }
                            case 40 :
                                {
                                    bitField0_ |= 16;
                                    processInstanceId_ = input.readInt64();
                                    break;
                                }
                            case 48 :
                                {
                                    bitField0_ |= 32;
                                    activatedTime_ = input.readInt64();
                                    break;
                                }
                            case 56 :
                                {
                                    bitField0_ |= 64;
                                    lastTriggered_ = input.readInt64();
                                    break;
                                }
                            case 64 :
                                {
                                    bitField0_ |= 128;
                                    dEPRECATEDSessionId_ = input.readInt32();
                                    break;
                                }
                            case 72 :
                                {
                                    bitField0_ |= 256;
                                    sessionId_ = input.readInt64();
                                    break;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(JBPMMessages.ProcessTimer.TimerInstance.this);
                } catch (IOException e) {
                    throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.ProcessTimer.TimerInstance.this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    makeExtensionsImmutable();
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_TimerInstance_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_TimerInstance_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessTimer.TimerInstance.class, JBPMMessages.ProcessTimer.TimerInstance.Builder.class);
            }

            public static Parser<JBPMMessages.ProcessTimer.TimerInstance> PARSER = new AbstractParser<JBPMMessages.ProcessTimer.TimerInstance>() {
                public JBPMMessages.ProcessTimer.TimerInstance parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                    return new JBPMMessages.ProcessTimer.TimerInstance(input, extensionRegistry);
                }
            };

            @Override
            public Parser<JBPMMessages.ProcessTimer.TimerInstance> getParserForType() {
                return JBPMMessages.ProcessTimer.TimerInstance.PARSER;
            }

            private int bitField0_;

            // optional int64 id = 1;
            public static final int ID_FIELD_NUMBER = 1;

            private long id_;

            /**
             * <code>optional int64 id = 1;</code>
             */
            public boolean hasId() {
                return ((bitField0_) & 1) == 1;
            }

            /**
             * <code>optional int64 id = 1;</code>
             */
            public long getId() {
                return id_;
            }

            // optional int64 timer_id = 2;
            public static final int TIMER_ID_FIELD_NUMBER = 2;

            private long timerId_;

            /**
             * <code>optional int64 timer_id = 2;</code>
             */
            public boolean hasTimerId() {
                return ((bitField0_) & 2) == 2;
            }

            /**
             * <code>optional int64 timer_id = 2;</code>
             */
            public long getTimerId() {
                return timerId_;
            }

            // optional int64 delay = 3;
            public static final int DELAY_FIELD_NUMBER = 3;

            private long delay_;

            /**
             * <code>optional int64 delay = 3;</code>
             */
            public boolean hasDelay() {
                return ((bitField0_) & 4) == 4;
            }

            /**
             * <code>optional int64 delay = 3;</code>
             */
            public long getDelay() {
                return delay_;
            }

            // optional int64 period = 4;
            public static final int PERIOD_FIELD_NUMBER = 4;

            private long period_;

            /**
             * <code>optional int64 period = 4;</code>
             */
            public boolean hasPeriod() {
                return ((bitField0_) & 8) == 8;
            }

            /**
             * <code>optional int64 period = 4;</code>
             */
            public long getPeriod() {
                return period_;
            }

            // optional int64 process_instance_id = 5;
            public static final int PROCESS_INSTANCE_ID_FIELD_NUMBER = 5;

            private long processInstanceId_;

            /**
             * <code>optional int64 process_instance_id = 5;</code>
             */
            public boolean hasProcessInstanceId() {
                return ((bitField0_) & 16) == 16;
            }

            /**
             * <code>optional int64 process_instance_id = 5;</code>
             */
            public long getProcessInstanceId() {
                return processInstanceId_;
            }

            // optional int64 activated_time = 6;
            public static final int ACTIVATED_TIME_FIELD_NUMBER = 6;

            private long activatedTime_;

            /**
             * <code>optional int64 activated_time = 6;</code>
             */
            public boolean hasActivatedTime() {
                return ((bitField0_) & 32) == 32;
            }

            /**
             * <code>optional int64 activated_time = 6;</code>
             */
            public long getActivatedTime() {
                return activatedTime_;
            }

            // optional int64 last_triggered = 7;
            public static final int LAST_TRIGGERED_FIELD_NUMBER = 7;

            private long lastTriggered_;

            /**
             * <code>optional int64 last_triggered = 7;</code>
             */
            public boolean hasLastTriggered() {
                return ((bitField0_) & 64) == 64;
            }

            /**
             * <code>optional int64 last_triggered = 7;</code>
             */
            public long getLastTriggered() {
                return lastTriggered_;
            }

            // optional int32 DEPRECATED_sessionId = 8;
            public static final int DEPRECATED_SESSIONID_FIELD_NUMBER = 8;

            private int dEPRECATEDSessionId_;

            /**
             * <code>optional int32 DEPRECATED_sessionId = 8;</code>
             */
            public boolean hasDEPRECATEDSessionId() {
                return ((bitField0_) & 128) == 128;
            }

            /**
             * <code>optional int32 DEPRECATED_sessionId = 8;</code>
             */
            public int getDEPRECATEDSessionId() {
                return dEPRECATEDSessionId_;
            }

            // optional int64 sessionId = 9;
            public static final int SESSIONID_FIELD_NUMBER = 9;

            private long sessionId_;

            /**
             * <code>optional int64 sessionId = 9;</code>
             */
            public boolean hasSessionId() {
                return ((bitField0_) & 256) == 256;
            }

            /**
             * <code>optional int64 sessionId = 9;</code>
             */
            public long getSessionId() {
                return sessionId_;
            }

            private void initFields() {
                id_ = 0L;
                timerId_ = 0L;
                delay_ = 0L;
                period_ = 0L;
                processInstanceId_ = 0L;
                activatedTime_ = 0L;
                lastTriggered_ = 0L;
                dEPRECATEDSessionId_ = 0;
                sessionId_ = 0L;
            }

            private byte memoizedIsInitialized = -1;

            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized != (-1))
                    return isInitialized == 1;
                
                memoizedIsInitialized = 1;
                return true;
            }

            public void writeTo(CodedOutputStream output) throws IOException {
                getSerializedSize();
                if (((bitField0_) & 1) == 1) {
                    output.writeInt64(1, id_);
                } 
                if (((bitField0_) & 2) == 2) {
                    output.writeInt64(2, timerId_);
                } 
                if (((bitField0_) & 4) == 4) {
                    output.writeInt64(3, delay_);
                } 
                if (((bitField0_) & 8) == 8) {
                    output.writeInt64(4, period_);
                } 
                if (((bitField0_) & 16) == 16) {
                    output.writeInt64(5, processInstanceId_);
                } 
                if (((bitField0_) & 32) == 32) {
                    output.writeInt64(6, activatedTime_);
                } 
                if (((bitField0_) & 64) == 64) {
                    output.writeInt64(7, lastTriggered_);
                } 
                if (((bitField0_) & 128) == 128) {
                    output.writeInt32(8, dEPRECATEDSessionId_);
                } 
                if (((bitField0_) & 256) == 256) {
                    output.writeInt64(9, sessionId_);
                } 
                getUnknownFields().writeTo(output);
            }

            private int memoizedSerializedSize = -1;

            public int getSerializedSize() {
                int size = memoizedSerializedSize;
                if (size != (-1))
                    return size;
                
                size = 0;
                if (((bitField0_) & 1) == 1) {
                    size += CodedOutputStream.computeInt64Size(1, id_);
                } 
                if (((bitField0_) & 2) == 2) {
                    size += CodedOutputStream.computeInt64Size(2, timerId_);
                } 
                if (((bitField0_) & 4) == 4) {
                    size += CodedOutputStream.computeInt64Size(3, delay_);
                } 
                if (((bitField0_) & 8) == 8) {
                    size += CodedOutputStream.computeInt64Size(4, period_);
                } 
                if (((bitField0_) & 16) == 16) {
                    size += CodedOutputStream.computeInt64Size(5, processInstanceId_);
                } 
                if (((bitField0_) & 32) == 32) {
                    size += CodedOutputStream.computeInt64Size(6, activatedTime_);
                } 
                if (((bitField0_) & 64) == 64) {
                    size += CodedOutputStream.computeInt64Size(7, lastTriggered_);
                } 
                if (((bitField0_) & 128) == 128) {
                    size += CodedOutputStream.computeInt32Size(8, dEPRECATEDSessionId_);
                } 
                if (((bitField0_) & 256) == 256) {
                    size += CodedOutputStream.computeInt64Size(9, sessionId_);
                } 
                size += getUnknownFields().getSerializedSize();
                memoizedSerializedSize = size;
                return size;
            }

            private static final long serialVersionUID = 0L;

            @Override
            protected Object writeReplace() throws ObjectStreamException {
                return super.writeReplace();
            }

            public static JBPMMessages.ProcessTimer.TimerInstance parseFrom(ByteString data) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessTimer.TimerInstance.PARSER.parseFrom(data);
            }

            public static JBPMMessages.ProcessTimer.TimerInstance parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessTimer.TimerInstance.PARSER.parseFrom(data, extensionRegistry);
            }

            public static JBPMMessages.ProcessTimer.TimerInstance parseFrom(byte[] data) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessTimer.TimerInstance.PARSER.parseFrom(data);
            }

            public static JBPMMessages.ProcessTimer.TimerInstance parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return JBPMMessages.ProcessTimer.TimerInstance.PARSER.parseFrom(data, extensionRegistry);
            }

            public static JBPMMessages.ProcessTimer.TimerInstance parseFrom(InputStream input) throws IOException {
                return JBPMMessages.ProcessTimer.TimerInstance.PARSER.parseFrom(input);
            }

            public static JBPMMessages.ProcessTimer.TimerInstance parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessTimer.TimerInstance.PARSER.parseFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessTimer.TimerInstance parseDelimitedFrom(InputStream input) throws IOException {
                return JBPMMessages.ProcessTimer.TimerInstance.PARSER.parseDelimitedFrom(input);
            }

            public static JBPMMessages.ProcessTimer.TimerInstance parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessTimer.TimerInstance.PARSER.parseDelimitedFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessTimer.TimerInstance parseFrom(CodedInputStream input) throws IOException {
                return JBPMMessages.ProcessTimer.TimerInstance.PARSER.parseFrom(input);
            }

            public static JBPMMessages.ProcessTimer.TimerInstance parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                return JBPMMessages.ProcessTimer.TimerInstance.PARSER.parseFrom(input, extensionRegistry);
            }

            public static JBPMMessages.ProcessTimer.TimerInstance.Builder newBuilder() {
                return JBPMMessages.ProcessTimer.TimerInstance.Builder.create();
            }

            public JBPMMessages.ProcessTimer.TimerInstance.Builder newBuilderForType() {
                return JBPMMessages.ProcessTimer.TimerInstance.newBuilder();
            }

            public static JBPMMessages.ProcessTimer.TimerInstance.Builder newBuilder(JBPMMessages.ProcessTimer.TimerInstance prototype) {
                return JBPMMessages.ProcessTimer.TimerInstance.newBuilder().mergeFrom(prototype);
            }

            public JBPMMessages.ProcessTimer.TimerInstance.Builder toBuilder() {
                return JBPMMessages.ProcessTimer.TimerInstance.newBuilder(JBPMMessages.ProcessTimer.TimerInstance.this);
            }

            @Override
            protected JBPMMessages.ProcessTimer.TimerInstance.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
                JBPMMessages.ProcessTimer.TimerInstance.Builder builder = new JBPMMessages.ProcessTimer.TimerInstance.Builder(parent);
                return builder;
            }

            /**
             * Protobuf type {@code org.jbpm.marshalling.ProcessTimer.TimerInstance}
             */
            // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessTimer.TimerInstance)
            public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessTimer.TimerInstance.Builder> implements JBPMMessages.ProcessTimer.TimerInstanceOrBuilder {
                public static final Descriptors.Descriptor getDescriptor() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_TimerInstance_descriptor;
                }

                protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_TimerInstance_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessTimer.TimerInstance.class, JBPMMessages.ProcessTimer.TimerInstance.Builder.class);
                }

                // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessTimer.TimerInstance.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessage.BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    } 
                }

                private static JBPMMessages.ProcessTimer.TimerInstance.Builder create() {
                    return new JBPMMessages.ProcessTimer.TimerInstance.Builder();
                }

                public JBPMMessages.ProcessTimer.TimerInstance.Builder clear() {
                    super.clear();
                    id_ = 0L;
                    bitField0_ = (bitField0_) & (~1);
                    timerId_ = 0L;
                    bitField0_ = (bitField0_) & (~2);
                    delay_ = 0L;
                    bitField0_ = (bitField0_) & (~4);
                    period_ = 0L;
                    bitField0_ = (bitField0_) & (~8);
                    processInstanceId_ = 0L;
                    bitField0_ = (bitField0_) & (~16);
                    activatedTime_ = 0L;
                    bitField0_ = (bitField0_) & (~32);
                    lastTriggered_ = 0L;
                    bitField0_ = (bitField0_) & (~64);
                    dEPRECATEDSessionId_ = 0;
                    bitField0_ = (bitField0_) & (~128);
                    sessionId_ = 0L;
                    bitField0_ = (bitField0_) & (~256);
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                public JBPMMessages.ProcessTimer.TimerInstance.Builder clone() {
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.create().mergeFrom(buildPartial());
                }

                public Descriptors.Descriptor getDescriptorForType() {
                    return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_TimerInstance_descriptor;
                }

                public JBPMMessages.ProcessTimer.TimerInstance getDefaultInstanceForType() {
                    return JBPMMessages.ProcessTimer.TimerInstance.getDefaultInstance();
                }

                public JBPMMessages.ProcessTimer.TimerInstance build() {
                    JBPMMessages.ProcessTimer.TimerInstance result = buildPartial();
                    if (!(result.isInitialized())) {
                        throw AbstractMessage.Builder.newUninitializedMessageException(result);
                    } 
                    return result;
                }

                public JBPMMessages.ProcessTimer.TimerInstance buildPartial() {
                    JBPMMessages.ProcessTimer.TimerInstance result = new JBPMMessages.ProcessTimer.TimerInstance(JBPMMessages.ProcessTimer.TimerInstance.Builder.this);
                    int from_bitField0_ = bitField0_;
                    int to_bitField0_ = 0;
                    if ((from_bitField0_ & 1) == 1) {
                        to_bitField0_ |= 1;
                    } 
                    result.id_ = id_;
                    if ((from_bitField0_ & 2) == 2) {
                        to_bitField0_ |= 2;
                    } 
                    result.timerId_ = timerId_;
                    if ((from_bitField0_ & 4) == 4) {
                        to_bitField0_ |= 4;
                    } 
                    result.delay_ = delay_;
                    if ((from_bitField0_ & 8) == 8) {
                        to_bitField0_ |= 8;
                    } 
                    result.period_ = period_;
                    if ((from_bitField0_ & 16) == 16) {
                        to_bitField0_ |= 16;
                    } 
                    result.processInstanceId_ = processInstanceId_;
                    if ((from_bitField0_ & 32) == 32) {
                        to_bitField0_ |= 32;
                    } 
                    result.activatedTime_ = activatedTime_;
                    if ((from_bitField0_ & 64) == 64) {
                        to_bitField0_ |= 64;
                    } 
                    result.lastTriggered_ = lastTriggered_;
                    if ((from_bitField0_ & 128) == 128) {
                        to_bitField0_ |= 128;
                    } 
                    result.dEPRECATEDSessionId_ = dEPRECATEDSessionId_;
                    if ((from_bitField0_ & 256) == 256) {
                        to_bitField0_ |= 256;
                    } 
                    result.sessionId_ = sessionId_;
                    result.bitField0_ = to_bitField0_;
                    onBuilt();
                    return result;
                }

                public JBPMMessages.ProcessTimer.TimerInstance.Builder mergeFrom(Message other) {
                    if (other instanceof JBPMMessages.ProcessTimer.TimerInstance) {
                        return mergeFrom(((JBPMMessages.ProcessTimer.TimerInstance) (other)));
                    } else {
                        super.mergeFrom(other);
                        return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                    }
                }

                public JBPMMessages.ProcessTimer.TimerInstance.Builder mergeFrom(JBPMMessages.ProcessTimer.TimerInstance other) {
                    if (other == (JBPMMessages.ProcessTimer.TimerInstance.getDefaultInstance()))
                        return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                    
                    if (other.hasId()) {
                        setId(other.getId());
                    } 
                    if (other.hasTimerId()) {
                        setTimerId(other.getTimerId());
                    } 
                    if (other.hasDelay()) {
                        setDelay(other.getDelay());
                    } 
                    if (other.hasPeriod()) {
                        setPeriod(other.getPeriod());
                    } 
                    if (other.hasProcessInstanceId()) {
                        setProcessInstanceId(other.getProcessInstanceId());
                    } 
                    if (other.hasActivatedTime()) {
                        setActivatedTime(other.getActivatedTime());
                    } 
                    if (other.hasLastTriggered()) {
                        setLastTriggered(other.getLastTriggered());
                    } 
                    if (other.hasDEPRECATEDSessionId()) {
                        setDEPRECATEDSessionId(other.getDEPRECATEDSessionId());
                    } 
                    if (other.hasSessionId()) {
                        setSessionId(other.getSessionId());
                    } 
                    JBPMMessages.ProcessTimer.TimerInstance.Builder.this.mergeUnknownFields(other.getUnknownFields());
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                public final boolean isInitialized() {
                    return true;
                }

                public JBPMMessages.ProcessTimer.TimerInstance.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                    JBPMMessages.ProcessTimer.TimerInstance parsedMessage = null;
                    try {
                        parsedMessage = JBPMMessages.ProcessTimer.TimerInstance.PARSER.parsePartialFrom(input, extensionRegistry);
                    } catch (InvalidProtocolBufferException e) {
                        parsedMessage = ((JBPMMessages.ProcessTimer.TimerInstance) (e.getUnfinishedMessage()));
                        throw e;
                    } finally {
                        if (parsedMessage != null) {
                            mergeFrom(parsedMessage);
                        } 
                    }
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                private int bitField0_;

                // optional int64 id = 1;
                private long id_;

                /**
                 * <code>optional int64 id = 1;</code>
                 */
                public boolean hasId() {
                    return ((bitField0_) & 1) == 1;
                }

                /**
                 * <code>optional int64 id = 1;</code>
                 */
                public long getId() {
                    return id_;
                }

                /**
                 * <code>optional int64 id = 1;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder setId(long value) {
                    bitField0_ |= 1;
                    id_ = value;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                /**
                 * <code>optional int64 id = 1;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder clearId() {
                    bitField0_ = (bitField0_) & (~1);
                    id_ = 0L;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                // optional int64 timer_id = 2;
                private long timerId_;

                /**
                 * <code>optional int64 timer_id = 2;</code>
                 */
                public boolean hasTimerId() {
                    return ((bitField0_) & 2) == 2;
                }

                /**
                 * <code>optional int64 timer_id = 2;</code>
                 */
                public long getTimerId() {
                    return timerId_;
                }

                /**
                 * <code>optional int64 timer_id = 2;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder setTimerId(long value) {
                    bitField0_ |= 2;
                    timerId_ = value;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                /**
                 * <code>optional int64 timer_id = 2;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder clearTimerId() {
                    bitField0_ = (bitField0_) & (~2);
                    timerId_ = 0L;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                // optional int64 delay = 3;
                private long delay_;

                /**
                 * <code>optional int64 delay = 3;</code>
                 */
                public boolean hasDelay() {
                    return ((bitField0_) & 4) == 4;
                }

                /**
                 * <code>optional int64 delay = 3;</code>
                 */
                public long getDelay() {
                    return delay_;
                }

                /**
                 * <code>optional int64 delay = 3;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder setDelay(long value) {
                    bitField0_ |= 4;
                    delay_ = value;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                /**
                 * <code>optional int64 delay = 3;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder clearDelay() {
                    bitField0_ = (bitField0_) & (~4);
                    delay_ = 0L;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                // optional int64 period = 4;
                private long period_;

                /**
                 * <code>optional int64 period = 4;</code>
                 */
                public boolean hasPeriod() {
                    return ((bitField0_) & 8) == 8;
                }

                /**
                 * <code>optional int64 period = 4;</code>
                 */
                public long getPeriod() {
                    return period_;
                }

                /**
                 * <code>optional int64 period = 4;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder setPeriod(long value) {
                    bitField0_ |= 8;
                    period_ = value;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                /**
                 * <code>optional int64 period = 4;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder clearPeriod() {
                    bitField0_ = (bitField0_) & (~8);
                    period_ = 0L;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                // optional int64 process_instance_id = 5;
                private long processInstanceId_;

                /**
                 * <code>optional int64 process_instance_id = 5;</code>
                 */
                public boolean hasProcessInstanceId() {
                    return ((bitField0_) & 16) == 16;
                }

                /**
                 * <code>optional int64 process_instance_id = 5;</code>
                 */
                public long getProcessInstanceId() {
                    return processInstanceId_;
                }

                /**
                 * <code>optional int64 process_instance_id = 5;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder setProcessInstanceId(long value) {
                    bitField0_ |= 16;
                    processInstanceId_ = value;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                /**
                 * <code>optional int64 process_instance_id = 5;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder clearProcessInstanceId() {
                    bitField0_ = (bitField0_) & (~16);
                    processInstanceId_ = 0L;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                // optional int64 activated_time = 6;
                private long activatedTime_;

                /**
                 * <code>optional int64 activated_time = 6;</code>
                 */
                public boolean hasActivatedTime() {
                    return ((bitField0_) & 32) == 32;
                }

                /**
                 * <code>optional int64 activated_time = 6;</code>
                 */
                public long getActivatedTime() {
                    return activatedTime_;
                }

                /**
                 * <code>optional int64 activated_time = 6;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder setActivatedTime(long value) {
                    bitField0_ |= 32;
                    activatedTime_ = value;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                /**
                 * <code>optional int64 activated_time = 6;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder clearActivatedTime() {
                    bitField0_ = (bitField0_) & (~32);
                    activatedTime_ = 0L;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                // optional int64 last_triggered = 7;
                private long lastTriggered_;

                /**
                 * <code>optional int64 last_triggered = 7;</code>
                 */
                public boolean hasLastTriggered() {
                    return ((bitField0_) & 64) == 64;
                }

                /**
                 * <code>optional int64 last_triggered = 7;</code>
                 */
                public long getLastTriggered() {
                    return lastTriggered_;
                }

                /**
                 * <code>optional int64 last_triggered = 7;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder setLastTriggered(long value) {
                    bitField0_ |= 64;
                    lastTriggered_ = value;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                /**
                 * <code>optional int64 last_triggered = 7;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder clearLastTriggered() {
                    bitField0_ = (bitField0_) & (~64);
                    lastTriggered_ = 0L;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                // optional int32 DEPRECATED_sessionId = 8;
                private int dEPRECATEDSessionId_;

                /**
                 * <code>optional int32 DEPRECATED_sessionId = 8;</code>
                 */
                public boolean hasDEPRECATEDSessionId() {
                    return ((bitField0_) & 128) == 128;
                }

                /**
                 * <code>optional int32 DEPRECATED_sessionId = 8;</code>
                 */
                public int getDEPRECATEDSessionId() {
                    return dEPRECATEDSessionId_;
                }

                /**
                 * <code>optional int32 DEPRECATED_sessionId = 8;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder setDEPRECATEDSessionId(int value) {
                    bitField0_ |= 128;
                    dEPRECATEDSessionId_ = value;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                /**
                 * <code>optional int32 DEPRECATED_sessionId = 8;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder clearDEPRECATEDSessionId() {
                    bitField0_ = (bitField0_) & (~128);
                    dEPRECATEDSessionId_ = 0;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                // optional int64 sessionId = 9;
                private long sessionId_;

                /**
                 * <code>optional int64 sessionId = 9;</code>
                 */
                public boolean hasSessionId() {
                    return ((bitField0_) & 256) == 256;
                }

                /**
                 * <code>optional int64 sessionId = 9;</code>
                 */
                public long getSessionId() {
                    return sessionId_;
                }

                /**
                 * <code>optional int64 sessionId = 9;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder setSessionId(long value) {
                    bitField0_ |= 256;
                    sessionId_ = value;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                /**
                 * <code>optional int64 sessionId = 9;</code>
                 */
                public JBPMMessages.ProcessTimer.TimerInstance.Builder clearSessionId() {
                    bitField0_ = (bitField0_) & (~256);
                    sessionId_ = 0L;
                    onChanged();
                    return JBPMMessages.ProcessTimer.TimerInstance.Builder.this;
                }

                // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessTimer.TimerInstance)
            }

            static {
                defaultInstance = new JBPMMessages.ProcessTimer.TimerInstance(true);
                JBPMMessages.ProcessTimer.TimerInstance.defaultInstance.initFields();
            }

            // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessTimer.TimerInstance)
        }

        private int bitField0_;

        // optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;
        public static final int TIMER_FIELD_NUMBER = 1;

        private JBPMMessages.ProcessTimer.TimerInstance timer_;

        /**
         * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
         */
        public boolean hasTimer() {
            return ((bitField0_) & 1) == 1;
        }

        /**
         * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
         */
        public JBPMMessages.ProcessTimer.TimerInstance getTimer() {
            return timer_;
        }

        /**
         * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
         */
        public JBPMMessages.ProcessTimer.TimerInstanceOrBuilder getTimerOrBuilder() {
            return timer_;
        }

        // optional .org.drools.core.marshalling.Trigger trigger = 2;
        public static final int TRIGGER_FIELD_NUMBER = 2;

        private Trigger trigger_;

        /**
         * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
         */
        public boolean hasTrigger() {
            return ((bitField0_) & 2) == 2;
        }

        /**
         * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
         */
        public Trigger getTrigger() {
            return trigger_;
        }

        /**
         * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
         */
        public TriggerOrBuilder getTriggerOrBuilder() {
            return trigger_;
        }

        private void initFields() {
            timer_ = JBPMMessages.ProcessTimer.TimerInstance.getDefaultInstance();
            trigger_ = org.drools.core.marshalling.impl.ProtobufMessages.Trigger.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != (-1))
                return isInitialized == 1;
            
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if (((bitField0_) & 1) == 1) {
                output.writeMessage(1, timer_);
            } 
            if (((bitField0_) & 2) == 2) {
                output.writeMessage(2, trigger_);
            } 
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != (-1))
                return size;
            
            size = 0;
            if (((bitField0_) & 1) == 1) {
                size += CodedOutputStream.computeMessageSize(1, timer_);
            } 
            if (((bitField0_) & 2) == 2) {
                size += CodedOutputStream.computeMessageSize(2, trigger_);
            } 
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static JBPMMessages.ProcessTimer parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return JBPMMessages.ProcessTimer.PARSER.parseFrom(data);
        }

        public static JBPMMessages.ProcessTimer parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return JBPMMessages.ProcessTimer.PARSER.parseFrom(data, extensionRegistry);
        }

        public static JBPMMessages.ProcessTimer parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return JBPMMessages.ProcessTimer.PARSER.parseFrom(data);
        }

        public static JBPMMessages.ProcessTimer parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return JBPMMessages.ProcessTimer.PARSER.parseFrom(data, extensionRegistry);
        }

        public static JBPMMessages.ProcessTimer parseFrom(InputStream input) throws IOException {
            return JBPMMessages.ProcessTimer.PARSER.parseFrom(input);
        }

        public static JBPMMessages.ProcessTimer parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.ProcessTimer.PARSER.parseFrom(input, extensionRegistry);
        }

        public static JBPMMessages.ProcessTimer parseDelimitedFrom(InputStream input) throws IOException {
            return JBPMMessages.ProcessTimer.PARSER.parseDelimitedFrom(input);
        }

        public static JBPMMessages.ProcessTimer parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.ProcessTimer.PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static JBPMMessages.ProcessTimer parseFrom(CodedInputStream input) throws IOException {
            return JBPMMessages.ProcessTimer.PARSER.parseFrom(input);
        }

        public static JBPMMessages.ProcessTimer parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.ProcessTimer.PARSER.parseFrom(input, extensionRegistry);
        }

        public static JBPMMessages.ProcessTimer.Builder newBuilder() {
            return JBPMMessages.ProcessTimer.Builder.create();
        }

        public JBPMMessages.ProcessTimer.Builder newBuilderForType() {
            return JBPMMessages.ProcessTimer.newBuilder();
        }

        public static JBPMMessages.ProcessTimer.Builder newBuilder(JBPMMessages.ProcessTimer prototype) {
            return JBPMMessages.ProcessTimer.newBuilder().mergeFrom(prototype);
        }

        public JBPMMessages.ProcessTimer.Builder toBuilder() {
            return JBPMMessages.ProcessTimer.newBuilder(JBPMMessages.ProcessTimer.this);
        }

        @Override
        protected JBPMMessages.ProcessTimer.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            JBPMMessages.ProcessTimer.Builder builder = new JBPMMessages.ProcessTimer.Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.jbpm.marshalling.ProcessTimer}
         */
        // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessTimer)
        public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.ProcessTimer.Builder> implements JBPMMessages.ProcessTimerOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.ProcessTimer.class, JBPMMessages.ProcessTimer.Builder.class);
            }

            // Construct using org.jbpm.marshalling.impl.JBPMMessages.ProcessTimer.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getTimerFieldBuilder();
                    getTriggerFieldBuilder();
                } 
            }

            private static JBPMMessages.ProcessTimer.Builder create() {
                return new JBPMMessages.ProcessTimer.Builder();
            }

            public JBPMMessages.ProcessTimer.Builder clear() {
                super.clear();
                if ((timerBuilder_) == null) {
                    timer_ = JBPMMessages.ProcessTimer.TimerInstance.getDefaultInstance();
                } else {
                    timerBuilder_.clear();
                }
                bitField0_ = (bitField0_) & (~1);
                if ((triggerBuilder_) == null) {
                    trigger_ = org.drools.core.marshalling.impl.ProtobufMessages.Trigger.getDefaultInstance();
                } else {
                    triggerBuilder_.clear();
                }
                bitField0_ = (bitField0_) & (~2);
                return JBPMMessages.ProcessTimer.Builder.this;
            }

            public JBPMMessages.ProcessTimer.Builder clone() {
                return JBPMMessages.ProcessTimer.Builder.create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_descriptor;
            }

            public JBPMMessages.ProcessTimer getDefaultInstanceForType() {
                return JBPMMessages.ProcessTimer.getDefaultInstance();
            }

            public JBPMMessages.ProcessTimer build() {
                JBPMMessages.ProcessTimer result = buildPartial();
                if (!(result.isInitialized())) {
                    throw AbstractMessage.Builder.newUninitializedMessageException(result);
                } 
                return result;
            }

            public JBPMMessages.ProcessTimer buildPartial() {
                JBPMMessages.ProcessTimer result = new JBPMMessages.ProcessTimer(JBPMMessages.ProcessTimer.Builder.this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 1) == 1) {
                    to_bitField0_ |= 1;
                } 
                if ((timerBuilder_) == null) {
                    result.timer_ = timer_;
                } else {
                    result.timer_ = timerBuilder_.build();
                }
                if ((from_bitField0_ & 2) == 2) {
                    to_bitField0_ |= 2;
                } 
                if ((triggerBuilder_) == null) {
                    result.trigger_ = trigger_;
                } else {
                    result.trigger_ = triggerBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public JBPMMessages.ProcessTimer.Builder mergeFrom(Message other) {
                if (other instanceof JBPMMessages.ProcessTimer) {
                    return mergeFrom(((JBPMMessages.ProcessTimer) (other)));
                } else {
                    super.mergeFrom(other);
                    return JBPMMessages.ProcessTimer.Builder.this;
                }
            }

            public JBPMMessages.ProcessTimer.Builder mergeFrom(JBPMMessages.ProcessTimer other) {
                if (other == (JBPMMessages.ProcessTimer.getDefaultInstance()))
                    return JBPMMessages.ProcessTimer.Builder.this;
                
                if (other.hasTimer()) {
                    mergeTimer(other.getTimer());
                } 
                if (other.hasTrigger()) {
                    mergeTrigger(other.getTrigger());
                } 
                JBPMMessages.ProcessTimer.Builder.this.mergeUnknownFields(other.getUnknownFields());
                return JBPMMessages.ProcessTimer.Builder.this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public JBPMMessages.ProcessTimer.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                JBPMMessages.ProcessTimer parsedMessage = null;
                try {
                    parsedMessage = JBPMMessages.ProcessTimer.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = ((JBPMMessages.ProcessTimer) (e.getUnfinishedMessage()));
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    } 
                }
                return JBPMMessages.ProcessTimer.Builder.this;
            }

            private int bitField0_;

            // optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;
            private JBPMMessages.ProcessTimer.TimerInstance timer_ = JBPMMessages.ProcessTimer.TimerInstance.getDefaultInstance();

            private SingleFieldBuilder<JBPMMessages.ProcessTimer.TimerInstance, JBPMMessages.ProcessTimer.TimerInstance.Builder, JBPMMessages.ProcessTimer.TimerInstanceOrBuilder> timerBuilder_;

            /**
             * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
             */
            public boolean hasTimer() {
                return ((bitField0_) & 1) == 1;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
             */
            public JBPMMessages.ProcessTimer.TimerInstance getTimer() {
                if ((timerBuilder_) == null) {
                    return timer_;
                } else {
                    return timerBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
             */
            public JBPMMessages.ProcessTimer.Builder setTimer(JBPMMessages.ProcessTimer.TimerInstance value) {
                if ((timerBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    timer_ = value;
                    onChanged();
                } else {
                    timerBuilder_.setMessage(value);
                }
                bitField0_ |= 1;
                return JBPMMessages.ProcessTimer.Builder.this;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
             */
            public JBPMMessages.ProcessTimer.Builder setTimer(JBPMMessages.ProcessTimer.TimerInstance.Builder builderForValue) {
                if ((timerBuilder_) == null) {
                    timer_ = builderForValue.build();
                    onChanged();
                } else {
                    timerBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 1;
                return JBPMMessages.ProcessTimer.Builder.this;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
             */
            public JBPMMessages.ProcessTimer.Builder mergeTimer(JBPMMessages.ProcessTimer.TimerInstance value) {
                if ((timerBuilder_) == null) {
                    if ((((bitField0_) & 1) == 1) && ((timer_) != (JBPMMessages.ProcessTimer.TimerInstance.getDefaultInstance()))) {
                        timer_ = JBPMMessages.ProcessTimer.TimerInstance.newBuilder(timer_).mergeFrom(value).buildPartial();
                    } else {
                        timer_ = value;
                    }
                    onChanged();
                } else {
                    timerBuilder_.mergeFrom(value);
                }
                bitField0_ |= 1;
                return JBPMMessages.ProcessTimer.Builder.this;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
             */
            public JBPMMessages.ProcessTimer.Builder clearTimer() {
                if ((timerBuilder_) == null) {
                    timer_ = JBPMMessages.ProcessTimer.TimerInstance.getDefaultInstance();
                    onChanged();
                } else {
                    timerBuilder_.clear();
                }
                bitField0_ = (bitField0_) & (~1);
                return JBPMMessages.ProcessTimer.Builder.this;
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
             */
            public JBPMMessages.ProcessTimer.TimerInstance.Builder getTimerBuilder() {
                bitField0_ |= 1;
                onChanged();
                return getTimerFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
             */
            public JBPMMessages.ProcessTimer.TimerInstanceOrBuilder getTimerOrBuilder() {
                if ((timerBuilder_) != null) {
                    return timerBuilder_.getMessageOrBuilder();
                } else {
                    return timer_;
                }
            }

            /**
             * <code>optional .org.jbpm.marshalling.ProcessTimer.TimerInstance timer = 1;</code>
             */
            private SingleFieldBuilder<JBPMMessages.ProcessTimer.TimerInstance, JBPMMessages.ProcessTimer.TimerInstance.Builder, JBPMMessages.ProcessTimer.TimerInstanceOrBuilder> getTimerFieldBuilder() {
                if ((timerBuilder_) == null) {
                    timerBuilder_ = new SingleFieldBuilder<JBPMMessages.ProcessTimer.TimerInstance, JBPMMessages.ProcessTimer.TimerInstance.Builder, JBPMMessages.ProcessTimer.TimerInstanceOrBuilder>(timer_, getParentForChildren(), isClean());
                    timer_ = null;
                } 
                return timerBuilder_;
            }

            // optional .org.drools.core.marshalling.Trigger trigger = 2;
            private Trigger trigger_ = org.drools.core.marshalling.impl.ProtobufMessages.Trigger.getDefaultInstance();

            private SingleFieldBuilder<ProtobufMessages.Trigger, ProtobufMessages.Trigger.Builder, ProtobufMessages.TriggerOrBuilder> triggerBuilder_;

            /**
             * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
             */
            public boolean hasTrigger() {
                return ((bitField0_) & 2) == 2;
            }

            /**
             * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
             */
            public Trigger getTrigger() {
                if ((triggerBuilder_) == null) {
                    return trigger_;
                } else {
                    return triggerBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
             */
            public JBPMMessages.ProcessTimer.Builder setTrigger(Trigger value) {
                if ((triggerBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    trigger_ = value;
                    onChanged();
                } else {
                    triggerBuilder_.setMessage(value);
                }
                bitField0_ |= 2;
                return JBPMMessages.ProcessTimer.Builder.this;
            }

            /**
             * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
             */
            public JBPMMessages.ProcessTimer.Builder setTrigger(org.drools.core.marshalling.impl.ProtobufMessages.Trigger.Builder builderForValue) {
                if ((triggerBuilder_) == null) {
                    trigger_ = builderForValue.build();
                    onChanged();
                } else {
                    triggerBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 2;
                return JBPMMessages.ProcessTimer.Builder.this;
            }

            /**
             * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
             */
            public JBPMMessages.ProcessTimer.Builder mergeTrigger(Trigger value) {
                if ((triggerBuilder_) == null) {
                    if ((((bitField0_) & 2) == 2) && ((trigger_) != (org.drools.core.marshalling.impl.ProtobufMessages.Trigger.getDefaultInstance()))) {
                        trigger_ = org.drools.core.marshalling.impl.ProtobufMessages.Trigger.newBuilder(trigger_).mergeFrom(value).buildPartial();
                    } else {
                        trigger_ = value;
                    }
                    onChanged();
                } else {
                    triggerBuilder_.mergeFrom(value);
                }
                bitField0_ |= 2;
                return JBPMMessages.ProcessTimer.Builder.this;
            }

            /**
             * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
             */
            public JBPMMessages.ProcessTimer.Builder clearTrigger() {
                if ((triggerBuilder_) == null) {
                    trigger_ = org.drools.core.marshalling.impl.ProtobufMessages.Trigger.getDefaultInstance();
                    onChanged();
                } else {
                    triggerBuilder_.clear();
                }
                bitField0_ = (bitField0_) & (~2);
                return JBPMMessages.ProcessTimer.Builder.this;
            }

            /**
             * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
             */
            public org.drools.core.marshalling.impl.ProtobufMessages.Trigger.Builder getTriggerBuilder() {
                bitField0_ |= 2;
                onChanged();
                return getTriggerFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
             */
            public TriggerOrBuilder getTriggerOrBuilder() {
                if ((triggerBuilder_) != null) {
                    return triggerBuilder_.getMessageOrBuilder();
                } else {
                    return trigger_;
                }
            }

            /**
             * <code>optional .org.drools.core.marshalling.Trigger trigger = 2;</code>
             */
            private SingleFieldBuilder<ProtobufMessages.Trigger, ProtobufMessages.Trigger.Builder, ProtobufMessages.TriggerOrBuilder> getTriggerFieldBuilder() {
                if ((triggerBuilder_) == null) {
                    triggerBuilder_ = new SingleFieldBuilder<ProtobufMessages.Trigger, ProtobufMessages.Trigger.Builder, ProtobufMessages.TriggerOrBuilder>(trigger_, getParentForChildren(), isClean());
                    trigger_ = null;
                } 
                return triggerBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.ProcessTimer)
        }

        static {
            defaultInstance = new JBPMMessages.ProcessTimer(true);
            JBPMMessages.ProcessTimer.defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.ProcessTimer)
    }

    public interface IterationLevelOrBuilder extends MessageOrBuilder {
        // optional string id = 1;
        /**
         * <code>optional string id = 1;</code>
         */
        boolean hasId();

        /**
         * <code>optional string id = 1;</code>
         */
        String getId();

        /**
         * <code>optional string id = 1;</code>
         */
        ByteString getIdBytes();

        // optional int32 level = 2;
        /**
         * <code>optional int32 level = 2;</code>
         */
        boolean hasLevel();

        /**
         * <code>optional int32 level = 2;</code>
         */
        int getLevel();
    }

    /**
     * Protobuf type {@code org.jbpm.marshalling.IterationLevel}
     */
    // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.IterationLevel)
    public static final class IterationLevel extends GeneratedMessage implements JBPMMessages.IterationLevelOrBuilder {
        // Use IterationLevel.newBuilder() to construct.
        private IterationLevel(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private IterationLevel(boolean noInit) {
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        private static final JBPMMessages.IterationLevel defaultInstance;

        public static JBPMMessages.IterationLevel getDefaultInstance() {
            return JBPMMessages.IterationLevel.defaultInstance;
        }

        public JBPMMessages.IterationLevel getDefaultInstanceForType() {
            return JBPMMessages.IterationLevel.defaultInstance;
        }

        private final UnknownFieldSet unknownFields;

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return JBPMMessages.IterationLevel.this.unknownFields;
        }

        private IterationLevel(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0 :
                            done = true;
                            break;
                        default :
                            {
                                if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                    done = true;
                                } 
                                break;
                            }
                        case 10 :
                            {
                                bitField0_ |= 1;
                                id_ = input.readBytes();
                                break;
                            }
                        case 16 :
                            {
                                bitField0_ |= 2;
                                level_ = input.readInt32();
                                break;
                            }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(JBPMMessages.IterationLevel.this);
            } catch (IOException e) {
                throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.IterationLevel.this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_IterationLevel_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_IterationLevel_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.IterationLevel.class, JBPMMessages.IterationLevel.Builder.class);
        }

        public static Parser<JBPMMessages.IterationLevel> PARSER = new AbstractParser<JBPMMessages.IterationLevel>() {
            public JBPMMessages.IterationLevel parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new JBPMMessages.IterationLevel(input, extensionRegistry);
            }
        };

        @Override
        public Parser<JBPMMessages.IterationLevel> getParserForType() {
            return JBPMMessages.IterationLevel.PARSER;
        }

        private int bitField0_;

        // optional string id = 1;
        public static final int ID_FIELD_NUMBER = 1;

        private Object id_;

        /**
         * <code>optional string id = 1;</code>
         */
        public boolean hasId() {
            return ((bitField0_) & 1) == 1;
        }

        /**
         * <code>optional string id = 1;</code>
         */
        public String getId() {
            Object ref = id_;
            if (ref instanceof String) {
                return ((String) (ref));
            } else {
                ByteString bs = ((ByteString) (ref));
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    id_ = s;
                } 
                return s;
            }
        }

        /**
         * <code>optional string id = 1;</code>
         */
        public ByteString getIdBytes() {
            Object ref = id_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                id_ = b;
                return b;
            } else {
                return ((ByteString) (ref));
            }
        }

        // optional int32 level = 2;
        public static final int LEVEL_FIELD_NUMBER = 2;

        private int level_;

        /**
         * <code>optional int32 level = 2;</code>
         */
        public boolean hasLevel() {
            return ((bitField0_) & 2) == 2;
        }

        /**
         * <code>optional int32 level = 2;</code>
         */
        public int getLevel() {
            return level_;
        }

        private void initFields() {
            id_ = "";
            level_ = 0;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != (-1))
                return isInitialized == 1;
            
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            if (((bitField0_) & 1) == 1) {
                output.writeBytes(1, getIdBytes());
            } 
            if (((bitField0_) & 2) == 2) {
                output.writeInt32(2, level_);
            } 
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != (-1))
                return size;
            
            size = 0;
            if (((bitField0_) & 1) == 1) {
                size += CodedOutputStream.computeBytesSize(1, getIdBytes());
            } 
            if (((bitField0_) & 2) == 2) {
                size += CodedOutputStream.computeInt32Size(2, level_);
            } 
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static JBPMMessages.IterationLevel parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return JBPMMessages.IterationLevel.PARSER.parseFrom(data);
        }

        public static JBPMMessages.IterationLevel parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return JBPMMessages.IterationLevel.PARSER.parseFrom(data, extensionRegistry);
        }

        public static JBPMMessages.IterationLevel parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return JBPMMessages.IterationLevel.PARSER.parseFrom(data);
        }

        public static JBPMMessages.IterationLevel parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return JBPMMessages.IterationLevel.PARSER.parseFrom(data, extensionRegistry);
        }

        public static JBPMMessages.IterationLevel parseFrom(InputStream input) throws IOException {
            return JBPMMessages.IterationLevel.PARSER.parseFrom(input);
        }

        public static JBPMMessages.IterationLevel parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.IterationLevel.PARSER.parseFrom(input, extensionRegistry);
        }

        public static JBPMMessages.IterationLevel parseDelimitedFrom(InputStream input) throws IOException {
            return JBPMMessages.IterationLevel.PARSER.parseDelimitedFrom(input);
        }

        public static JBPMMessages.IterationLevel parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.IterationLevel.PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static JBPMMessages.IterationLevel parseFrom(CodedInputStream input) throws IOException {
            return JBPMMessages.IterationLevel.PARSER.parseFrom(input);
        }

        public static JBPMMessages.IterationLevel parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.IterationLevel.PARSER.parseFrom(input, extensionRegistry);
        }

        public static JBPMMessages.IterationLevel.Builder newBuilder() {
            return JBPMMessages.IterationLevel.Builder.create();
        }

        public JBPMMessages.IterationLevel.Builder newBuilderForType() {
            return JBPMMessages.IterationLevel.newBuilder();
        }

        public static JBPMMessages.IterationLevel.Builder newBuilder(JBPMMessages.IterationLevel prototype) {
            return JBPMMessages.IterationLevel.newBuilder().mergeFrom(prototype);
        }

        public JBPMMessages.IterationLevel.Builder toBuilder() {
            return JBPMMessages.IterationLevel.newBuilder(JBPMMessages.IterationLevel.this);
        }

        @Override
        protected JBPMMessages.IterationLevel.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            JBPMMessages.IterationLevel.Builder builder = new JBPMMessages.IterationLevel.Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.jbpm.marshalling.IterationLevel}
         */
        // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.IterationLevel)
        public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.IterationLevel.Builder> implements JBPMMessages.IterationLevelOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_IterationLevel_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_IterationLevel_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.IterationLevel.class, JBPMMessages.IterationLevel.Builder.class);
            }

            // Construct using org.jbpm.marshalling.impl.JBPMMessages.IterationLevel.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                } 
            }

            private static JBPMMessages.IterationLevel.Builder create() {
                return new JBPMMessages.IterationLevel.Builder();
            }

            public JBPMMessages.IterationLevel.Builder clear() {
                super.clear();
                id_ = "";
                bitField0_ = (bitField0_) & (~1);
                level_ = 0;
                bitField0_ = (bitField0_) & (~2);
                return JBPMMessages.IterationLevel.Builder.this;
            }

            public JBPMMessages.IterationLevel.Builder clone() {
                return JBPMMessages.IterationLevel.Builder.create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_IterationLevel_descriptor;
            }

            public JBPMMessages.IterationLevel getDefaultInstanceForType() {
                return JBPMMessages.IterationLevel.getDefaultInstance();
            }

            public JBPMMessages.IterationLevel build() {
                JBPMMessages.IterationLevel result = buildPartial();
                if (!(result.isInitialized())) {
                    throw AbstractMessage.Builder.newUninitializedMessageException(result);
                } 
                return result;
            }

            public JBPMMessages.IterationLevel buildPartial() {
                JBPMMessages.IterationLevel result = new JBPMMessages.IterationLevel(JBPMMessages.IterationLevel.Builder.this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if ((from_bitField0_ & 1) == 1) {
                    to_bitField0_ |= 1;
                } 
                result.id_ = id_;
                if ((from_bitField0_ & 2) == 2) {
                    to_bitField0_ |= 2;
                } 
                result.level_ = level_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public JBPMMessages.IterationLevel.Builder mergeFrom(Message other) {
                if (other instanceof JBPMMessages.IterationLevel) {
                    return mergeFrom(((JBPMMessages.IterationLevel) (other)));
                } else {
                    super.mergeFrom(other);
                    return JBPMMessages.IterationLevel.Builder.this;
                }
            }

            public JBPMMessages.IterationLevel.Builder mergeFrom(JBPMMessages.IterationLevel other) {
                if (other == (JBPMMessages.IterationLevel.getDefaultInstance()))
                    return JBPMMessages.IterationLevel.Builder.this;
                
                if (other.hasId()) {
                    bitField0_ |= 1;
                    id_ = other.id_;
                    onChanged();
                } 
                if (other.hasLevel()) {
                    setLevel(other.getLevel());
                } 
                JBPMMessages.IterationLevel.Builder.this.mergeUnknownFields(other.getUnknownFields());
                return JBPMMessages.IterationLevel.Builder.this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public JBPMMessages.IterationLevel.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                JBPMMessages.IterationLevel parsedMessage = null;
                try {
                    parsedMessage = JBPMMessages.IterationLevel.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = ((JBPMMessages.IterationLevel) (e.getUnfinishedMessage()));
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    } 
                }
                return JBPMMessages.IterationLevel.Builder.this;
            }

            private int bitField0_;

            // optional string id = 1;
            private Object id_ = "";

            /**
             * <code>optional string id = 1;</code>
             */
            public boolean hasId() {
                return ((bitField0_) & 1) == 1;
            }

            /**
             * <code>optional string id = 1;</code>
             */
            public String getId() {
                Object ref = id_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) (ref)).toStringUtf8();
                    id_ = s;
                    return s;
                } else {
                    return ((String) (ref));
                }
            }

            /**
             * <code>optional string id = 1;</code>
             */
            public ByteString getIdBytes() {
                Object ref = id_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8(((String) (ref)));
                    id_ = b;
                    return b;
                } else {
                    return ((ByteString) (ref));
                }
            }

            /**
             * <code>optional string id = 1;</code>
             */
            public JBPMMessages.IterationLevel.Builder setId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 1;
                id_ = value;
                onChanged();
                return JBPMMessages.IterationLevel.Builder.this;
            }

            /**
             * <code>optional string id = 1;</code>
             */
            public JBPMMessages.IterationLevel.Builder clearId() {
                bitField0_ = (bitField0_) & (~1);
                id_ = JBPMMessages.IterationLevel.getDefaultInstance().getId();
                onChanged();
                return JBPMMessages.IterationLevel.Builder.this;
            }

            /**
             * <code>optional string id = 1;</code>
             */
            public JBPMMessages.IterationLevel.Builder setIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } 
                bitField0_ |= 1;
                id_ = value;
                onChanged();
                return JBPMMessages.IterationLevel.Builder.this;
            }

            // optional int32 level = 2;
            private int level_;

            /**
             * <code>optional int32 level = 2;</code>
             */
            public boolean hasLevel() {
                return ((bitField0_) & 2) == 2;
            }

            /**
             * <code>optional int32 level = 2;</code>
             */
            public int getLevel() {
                return level_;
            }

            /**
             * <code>optional int32 level = 2;</code>
             */
            public JBPMMessages.IterationLevel.Builder setLevel(int value) {
                bitField0_ |= 2;
                level_ = value;
                onChanged();
                return JBPMMessages.IterationLevel.Builder.this;
            }

            /**
             * <code>optional int32 level = 2;</code>
             */
            public JBPMMessages.IterationLevel.Builder clearLevel() {
                bitField0_ = (bitField0_) & (~2);
                level_ = 0;
                onChanged();
                return JBPMMessages.IterationLevel.Builder.this;
            }

            // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.IterationLevel)
        }

        static {
            defaultInstance = new JBPMMessages.IterationLevel(true);
            JBPMMessages.IterationLevel.defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.IterationLevel)
    }

    public interface VariableContainerOrBuilder extends MessageOrBuilder {
        // repeated .org.jbpm.marshalling.Variable variable = 1;
        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
         */
        List<JBPMMessages.Variable> getVariableList();

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
         */
        JBPMMessages.Variable getVariable(int index);

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
         */
        int getVariableCount();

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
         */
        List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList();

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
         */
        JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index);
    }

    /**
     * Protobuf type {@code org.jbpm.marshalling.VariableContainer}
     */
    // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.VariableContainer)
    public static final class VariableContainer extends GeneratedMessage implements JBPMMessages.VariableContainerOrBuilder {
        // Use VariableContainer.newBuilder() to construct.
        private VariableContainer(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private VariableContainer(boolean noInit) {
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        private static final JBPMMessages.VariableContainer defaultInstance;

        public static JBPMMessages.VariableContainer getDefaultInstance() {
            return JBPMMessages.VariableContainer.defaultInstance;
        }

        public JBPMMessages.VariableContainer getDefaultInstanceForType() {
            return JBPMMessages.VariableContainer.defaultInstance;
        }

        private final UnknownFieldSet unknownFields;

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return JBPMMessages.VariableContainer.this.unknownFields;
        }

        private VariableContainer(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0 :
                            done = true;
                            break;
                        default :
                            {
                                if (!(parseUnknownField(input, unknownFields, extensionRegistry, tag))) {
                                    done = true;
                                } 
                                break;
                            }
                        case 10 :
                            {
                                if (!((mutable_bitField0_ & 1) == 1)) {
                                    variable_ = new ArrayList<JBPMMessages.Variable>();
                                    mutable_bitField0_ |= 1;
                                } 
                                variable_.add(input.readMessage(JBPMMessages.Variable.PARSER, extensionRegistry));
                                break;
                            }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(JBPMMessages.VariableContainer.this);
            } catch (IOException e) {
                throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(JBPMMessages.VariableContainer.this);
            } finally {
                if ((mutable_bitField0_ & 1) == 1) {
                    variable_ = Collections.unmodifiableList(variable_);
                } 
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_VariableContainer_descriptor;
        }

        protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_VariableContainer_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.VariableContainer.class, JBPMMessages.VariableContainer.Builder.class);
        }

        public static Parser<JBPMMessages.VariableContainer> PARSER = new AbstractParser<JBPMMessages.VariableContainer>() {
            public JBPMMessages.VariableContainer parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new JBPMMessages.VariableContainer(input, extensionRegistry);
            }
        };

        @Override
        public Parser<JBPMMessages.VariableContainer> getParserForType() {
            return JBPMMessages.VariableContainer.PARSER;
        }

        // repeated .org.jbpm.marshalling.Variable variable = 1;
        public static final int VARIABLE_FIELD_NUMBER = 1;

        private List<JBPMMessages.Variable> variable_;

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
         */
        public List<JBPMMessages.Variable> getVariableList() {
            return variable_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
         */
        public List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList() {
            return variable_;
        }

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
         */
        public int getVariableCount() {
            return variable_.size();
        }

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
         */
        public JBPMMessages.Variable getVariable(int index) {
            return variable_.get(index);
        }

        /**
         * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
         */
        public JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index) {
            return variable_.get(index);
        }

        private void initFields() {
            variable_ = Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != (-1))
                return isInitialized == 1;
            
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            getSerializedSize();
            for (int i = 0; i < (variable_.size()); i++) {
                output.writeMessage(1, variable_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != (-1))
                return size;
            
            size = 0;
            for (int i = 0; i < (variable_.size()); i++) {
                size += CodedOutputStream.computeMessageSize(1, variable_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static JBPMMessages.VariableContainer parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return JBPMMessages.VariableContainer.PARSER.parseFrom(data);
        }

        public static JBPMMessages.VariableContainer parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return JBPMMessages.VariableContainer.PARSER.parseFrom(data, extensionRegistry);
        }

        public static JBPMMessages.VariableContainer parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return JBPMMessages.VariableContainer.PARSER.parseFrom(data);
        }

        public static JBPMMessages.VariableContainer parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return JBPMMessages.VariableContainer.PARSER.parseFrom(data, extensionRegistry);
        }

        public static JBPMMessages.VariableContainer parseFrom(InputStream input) throws IOException {
            return JBPMMessages.VariableContainer.PARSER.parseFrom(input);
        }

        public static JBPMMessages.VariableContainer parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.VariableContainer.PARSER.parseFrom(input, extensionRegistry);
        }

        public static JBPMMessages.VariableContainer parseDelimitedFrom(InputStream input) throws IOException {
            return JBPMMessages.VariableContainer.PARSER.parseDelimitedFrom(input);
        }

        public static JBPMMessages.VariableContainer parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.VariableContainer.PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static JBPMMessages.VariableContainer parseFrom(CodedInputStream input) throws IOException {
            return JBPMMessages.VariableContainer.PARSER.parseFrom(input);
        }

        public static JBPMMessages.VariableContainer parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return JBPMMessages.VariableContainer.PARSER.parseFrom(input, extensionRegistry);
        }

        public static JBPMMessages.VariableContainer.Builder newBuilder() {
            return JBPMMessages.VariableContainer.Builder.create();
        }

        public JBPMMessages.VariableContainer.Builder newBuilderForType() {
            return JBPMMessages.VariableContainer.newBuilder();
        }

        public static JBPMMessages.VariableContainer.Builder newBuilder(JBPMMessages.VariableContainer prototype) {
            return JBPMMessages.VariableContainer.newBuilder().mergeFrom(prototype);
        }

        public JBPMMessages.VariableContainer.Builder toBuilder() {
            return JBPMMessages.VariableContainer.newBuilder(JBPMMessages.VariableContainer.this);
        }

        @Override
        protected JBPMMessages.VariableContainer.Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
            JBPMMessages.VariableContainer.Builder builder = new JBPMMessages.VariableContainer.Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.jbpm.marshalling.VariableContainer}
         */
        // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.VariableContainer)
        public static final class Builder extends GeneratedMessage.Builder<JBPMMessages.VariableContainer.Builder> implements JBPMMessages.VariableContainerOrBuilder {
            public static final Descriptors.Descriptor getDescriptor() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_VariableContainer_descriptor;
            }

            protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_VariableContainer_fieldAccessorTable.ensureFieldAccessorsInitialized(JBPMMessages.VariableContainer.class, JBPMMessages.VariableContainer.Builder.class);
            }

            // Construct using org.jbpm.marshalling.impl.JBPMMessages.VariableContainer.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getVariableFieldBuilder();
                } 
            }

            private static JBPMMessages.VariableContainer.Builder create() {
                return new JBPMMessages.VariableContainer.Builder();
            }

            public JBPMMessages.VariableContainer.Builder clear() {
                super.clear();
                if ((variableBuilder_) == null) {
                    variable_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~1);
                } else {
                    variableBuilder_.clear();
                }
                return JBPMMessages.VariableContainer.Builder.this;
            }

            public JBPMMessages.VariableContainer.Builder clone() {
                return JBPMMessages.VariableContainer.Builder.create().mergeFrom(buildPartial());
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return org.jbpm.marshalling.impl.JBPMMessages.internal_static_org_jbpm_marshalling_VariableContainer_descriptor;
            }

            public JBPMMessages.VariableContainer getDefaultInstanceForType() {
                return JBPMMessages.VariableContainer.getDefaultInstance();
            }

            public JBPMMessages.VariableContainer build() {
                JBPMMessages.VariableContainer result = buildPartial();
                if (!(result.isInitialized())) {
                    throw AbstractMessage.Builder.newUninitializedMessageException(result);
                } 
                return result;
            }

            public JBPMMessages.VariableContainer buildPartial() {
                JBPMMessages.VariableContainer result = new JBPMMessages.VariableContainer(JBPMMessages.VariableContainer.Builder.this);
                int from_bitField0_ = bitField0_;
                if ((variableBuilder_) == null) {
                    if (((bitField0_) & 1) == 1) {
                        variable_ = Collections.unmodifiableList(variable_);
                        bitField0_ = (bitField0_) & (~1);
                    } 
                    result.variable_ = variable_;
                } else {
                    result.variable_ = variableBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public JBPMMessages.VariableContainer.Builder mergeFrom(Message other) {
                if (other instanceof JBPMMessages.VariableContainer) {
                    return mergeFrom(((JBPMMessages.VariableContainer) (other)));
                } else {
                    super.mergeFrom(other);
                    return JBPMMessages.VariableContainer.Builder.this;
                }
            }

            public JBPMMessages.VariableContainer.Builder mergeFrom(JBPMMessages.VariableContainer other) {
                if (other == (JBPMMessages.VariableContainer.getDefaultInstance()))
                    return JBPMMessages.VariableContainer.Builder.this;
                
                if ((variableBuilder_) == null) {
                    if (!(other.variable_.isEmpty())) {
                        if (variable_.isEmpty()) {
                            variable_ = other.variable_;
                            bitField0_ = (bitField0_) & (~1);
                        } else {
                            ensureVariableIsMutable();
                            variable_.addAll(other.variable_);
                        }
                        onChanged();
                    } 
                } else {
                    if (!(other.variable_.isEmpty())) {
                        if (variableBuilder_.isEmpty()) {
                            variableBuilder_.dispose();
                            variableBuilder_ = null;
                            variable_ = other.variable_;
                            bitField0_ = (bitField0_) & (~1);
                            variableBuilder_ = (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) ? getVariableFieldBuilder() : null;
                        } else {
                            variableBuilder_.addAllMessages(other.variable_);
                        }
                    } 
                }
                JBPMMessages.VariableContainer.Builder.this.mergeUnknownFields(other.getUnknownFields());
                return JBPMMessages.VariableContainer.Builder.this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public JBPMMessages.VariableContainer.Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                JBPMMessages.VariableContainer parsedMessage = null;
                try {
                    parsedMessage = JBPMMessages.VariableContainer.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = ((JBPMMessages.VariableContainer) (e.getUnfinishedMessage()));
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    } 
                }
                return JBPMMessages.VariableContainer.Builder.this;
            }

            private int bitField0_;

            // repeated .org.jbpm.marshalling.Variable variable = 1;
            private List<JBPMMessages.Variable> variable_ = Collections.emptyList();

            private void ensureVariableIsMutable() {
                if (!(((bitField0_) & 1) == 1)) {
                    variable_ = new ArrayList<JBPMMessages.Variable>(variable_);
                    bitField0_ |= 1;
                } 
            }

            private RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder> variableBuilder_;

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public List<JBPMMessages.Variable> getVariableList() {
                if ((variableBuilder_) == null) {
                    return Collections.unmodifiableList(variable_);
                } else {
                    return variableBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public int getVariableCount() {
                if ((variableBuilder_) == null) {
                    return variable_.size();
                } else {
                    return variableBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.Variable getVariable(int index) {
                if ((variableBuilder_) == null) {
                    return variable_.get(index);
                } else {
                    return variableBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.VariableContainer.Builder setVariable(int index, JBPMMessages.Variable value) {
                if ((variableBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureVariableIsMutable();
                    variable_.set(index, value);
                    onChanged();
                } else {
                    variableBuilder_.setMessage(index, value);
                }
                return JBPMMessages.VariableContainer.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.VariableContainer.Builder setVariable(int index, JBPMMessages.Variable.Builder builderForValue) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    variable_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    variableBuilder_.setMessage(index, builderForValue.build());
                }
                return JBPMMessages.VariableContainer.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.VariableContainer.Builder addVariable(JBPMMessages.Variable value) {
                if ((variableBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureVariableIsMutable();
                    variable_.add(value);
                    onChanged();
                } else {
                    variableBuilder_.addMessage(value);
                }
                return JBPMMessages.VariableContainer.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.VariableContainer.Builder addVariable(int index, JBPMMessages.Variable value) {
                if ((variableBuilder_) == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    } 
                    ensureVariableIsMutable();
                    variable_.add(index, value);
                    onChanged();
                } else {
                    variableBuilder_.addMessage(index, value);
                }
                return JBPMMessages.VariableContainer.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.VariableContainer.Builder addVariable(JBPMMessages.Variable.Builder builderForValue) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    variable_.add(builderForValue.build());
                    onChanged();
                } else {
                    variableBuilder_.addMessage(builderForValue.build());
                }
                return JBPMMessages.VariableContainer.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.VariableContainer.Builder addVariable(int index, JBPMMessages.Variable.Builder builderForValue) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    variable_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    variableBuilder_.addMessage(index, builderForValue.build());
                }
                return JBPMMessages.VariableContainer.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.VariableContainer.Builder addAllVariable(Iterable<? extends JBPMMessages.Variable> values) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    super.addAll(values, variable_);
                    onChanged();
                } else {
                    variableBuilder_.addAllMessages(values);
                }
                return JBPMMessages.VariableContainer.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.VariableContainer.Builder clearVariable() {
                if ((variableBuilder_) == null) {
                    variable_ = Collections.emptyList();
                    bitField0_ = (bitField0_) & (~1);
                    onChanged();
                } else {
                    variableBuilder_.clear();
                }
                return JBPMMessages.VariableContainer.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.VariableContainer.Builder removeVariable(int index) {
                if ((variableBuilder_) == null) {
                    ensureVariableIsMutable();
                    variable_.remove(index);
                    onChanged();
                } else {
                    variableBuilder_.remove(index);
                }
                return JBPMMessages.VariableContainer.Builder.this;
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.Variable.Builder getVariableBuilder(int index) {
                return getVariableFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.VariableOrBuilder getVariableOrBuilder(int index) {
                if ((variableBuilder_) == null) {
                    return variable_.get(index);
                } else {
                    return variableBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public List<? extends JBPMMessages.VariableOrBuilder> getVariableOrBuilderList() {
                if ((variableBuilder_) != null) {
                    return variableBuilder_.getMessageOrBuilderList();
                } else {
                    return Collections.unmodifiableList(variable_);
                }
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.Variable.Builder addVariableBuilder() {
                return getVariableFieldBuilder().addBuilder(JBPMMessages.Variable.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public JBPMMessages.Variable.Builder addVariableBuilder(int index) {
                return getVariableFieldBuilder().addBuilder(index, JBPMMessages.Variable.getDefaultInstance());
            }

            /**
             * <code>repeated .org.jbpm.marshalling.Variable variable = 1;</code>
             */
            public List<JBPMMessages.Variable.Builder> getVariableBuilderList() {
                return getVariableFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder> getVariableFieldBuilder() {
                if ((variableBuilder_) == null) {
                    variableBuilder_ = new RepeatedFieldBuilder<JBPMMessages.Variable, JBPMMessages.Variable.Builder, JBPMMessages.VariableOrBuilder>(variable_, (((bitField0_) & 1) == 1), getParentForChildren(), isClean());
                    variable_ = null;
                } 
                return variableBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:org.jbpm.marshalling.VariableContainer)
        }

        static {
            defaultInstance = new JBPMMessages.VariableContainer(true);
            JBPMMessages.VariableContainer.defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:org.jbpm.marshalling.VariableContainer)
    }

    public static final int PROCESS_INSTANCE_FIELD_NUMBER = 10;

    /**
     * <code>extend .org.drools.core.marshalling.ProcessData { ... }</code>
     */
    public static final GeneratedMessage.GeneratedExtension<ProtobufMessages.ProcessData, List<JBPMMessages.ProcessInstance>> processInstance = GeneratedMessage.newFileScopedGeneratedExtension(JBPMMessages.ProcessInstance.class, JBPMMessages.ProcessInstance.getDefaultInstance());

    public static final int WORK_ITEM_FIELD_NUMBER = 11;

    /**
     * <code>extend .org.drools.core.marshalling.ProcessData { ... }</code>
     */
    public static final GeneratedMessage.GeneratedExtension<ProtobufMessages.ProcessData, List<JBPMMessages.WorkItem>> workItem = GeneratedMessage.newFileScopedGeneratedExtension(JBPMMessages.WorkItem.class, JBPMMessages.WorkItem.getDefaultInstance());

    public static final int TIMER_ID_FIELD_NUMBER = 13;

    /**
     * <code>extend .org.drools.core.marshalling.ProcessData { ... }</code>
     */
    public static final GeneratedMessage.GeneratedExtension<ProtobufMessages.ProcessData, Long> timerId = GeneratedMessage.newFileScopedGeneratedExtension(Long.class, null);

    public static final int PROCESS_TIMER_FIELD_NUMBER = 12;

    /**
     * <code>extend .org.drools.core.marshalling.ProcessData { ... }</code>
     */
    public static final GeneratedMessage.GeneratedExtension<ProtobufMessages.ProcessData, List<JBPMMessages.ProcessTimer>> processTimer = GeneratedMessage.newFileScopedGeneratedExtension(JBPMMessages.ProcessTimer.class, JBPMMessages.ProcessTimer.getDefaultInstance());

    public static final int PROC_TIMER_FIELD_NUMBER = 100;

    /**
     * <code>extend .org.drools.core.marshalling.Timers.Timer { ... }</code>
     */
    public static final GeneratedMessage.GeneratedExtension<ProtobufMessages.Timers.Timer, JBPMMessages.ProcessTimer> procTimer = GeneratedMessage.newFileScopedGeneratedExtension(JBPMMessages.ProcessTimer.class, JBPMMessages.ProcessTimer.getDefaultInstance());

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_SwimlaneContextInstance_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_SwimlaneContextInstance_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstance_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstance_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_ExclusiveGroupInstance_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_ExclusiveGroupInstance_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_TextMapEntry_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_TextMapEntry_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_HumanTaskNode_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_HumanTaskNode_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_WorkItemNode_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_WorkItemNode_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_SubProcessNode_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_SubProcessNode_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_MilestoneNode_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_MilestoneNode_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_EventNode_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_EventNode_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_TimerNode_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_TimerNode_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_JoinTrigger_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_JoinTrigger_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_StateNode_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_StateNode_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_CompositeContextNode_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_CompositeContextNode_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_ForEachNode_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_ForEachNode_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_AsyncEventNode_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_AsyncEventNode_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_Variable_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_Variable_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_WorkItem_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_WorkItem_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessTimer_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessTimer_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_ProcessTimer_TimerInstance_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_ProcessTimer_TimerInstance_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_IterationLevel_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_IterationLevel_fieldAccessorTable;

    private static Descriptors.Descriptor internal_static_org_jbpm_marshalling_VariableContainer_descriptor;

    private static GeneratedMessage.FieldAccessorTable internal_static_org_jbpm_marshalling_VariableContainer_fieldAccessorTable;

    public static Descriptors.FileDescriptor getDescriptor() {
        return JBPMMessages.descriptor;
    }

    private static Descriptors.FileDescriptor descriptor;

    static {
        String[] descriptorData = new String[]{ "\n\'org/jbpm/marshalling/jbpmmessages.prot" + ("oorg.jbpm.marshalling0org/drools/core" + ("/marshalling/droolsmessages.proto\"\u00d5\nPr" + ("ocessInstance\n\fprocess_type (\t\n\ni" + ("d (\n\nprocess_id (\t\r\nstate " + ("(\nnode_instance_counter (\npro" + ("cess_xml (\t\"\nparent_process_instanc" + ("e_id\f (\ndescription (\t\nsigna" + ("l_completion (\b:true\n\fdeploymentId" + " (\t\ncorrelation_key (\tW\nswiml")))))))) , "ane_context (2=.org.jbpm.marshalling" + (".ProcessInstance.SwimlaneContextInstance" + ("I\n\rnode_instance (22.org.jbpm.marsh" + ("alling.ProcessInstance.NodeInstance0\n\bv" + ("ariable\b (2.org.jbpm.marshalling.Var" + ("iableU\nexclusive_group\n (2<.org.jbp" + ("m.marshalling.ProcessInstance.ExclusiveG" + ("roupInstance\ncompletedNodeIds\r (\t=" + ("\niterationLevels (2$.org.jbpm.marsh" + "alling.IterationLevel=\nSwimlaneContext")))))))) , "Instance\n\bswimlane (\t\n\bactor_id" + (" (\t\u0086\n\fNodeInstance\n\nid (\nnod" + ("e_id (J\ncontent (29.org.jbpm.m" + ("arshalling.ProcessInstance.NodeInstanceC" + ("ontent\r\nlevel (8\nExclusiveGroupI" + ("nstance\ngroup_node_instance_id (" + ("\u008c\nNodeInstanceContentD\ntype (26." + ("org.jbpm.marshalling.ProcessInstance.Nod" + ("eInstanceTypeW\n\brule_set (2E.org.jb" + "pm.marshalling.ProcessInstance.NodeInsta")))))))) , "nceContent.RuleSetNode[\n\nhuman_task " + ("(2G.org.jbpm.marshalling.ProcessInstanc" + ("e.NodeInstanceContent.HumanTaskNodeY\n\tw" + ("ork_item (2F.org.jbpm.marshalling.Pr" + ("ocessInstance.NodeInstanceContent.WorkIt" + ("emNode]\nsub_process (2H.org.jbpm.m" + ("arshalling.ProcessInstance.NodeInstanceC" + ("ontent.SubProcessNodeZ\n\tmilestone (" + ("2G.org.jbpm.marshalling.ProcessInstance." + "NodeInstanceContent.MilestoneNodeR\neve")))))))) , "nt (2C.org.jbpm.marshalling.ProcessI" + ("nstance.NodeInstanceContent.EventNodeR\n" + ("timer\b (2C.org.jbpm.marshalling.Proc" + ("essInstance.NodeInstanceContent.TimerNod" + ("eP\njoin\t (2B.org.jbpm.marshalling.P" + ("rocessInstance.NodeInstanceContent.JoinN" + ("odeR\nstate\n (2C.org.jbpm.marshallin" + ("g.ProcessInstance.NodeInstanceContent.St" + ("ateNodea\n\tcomposite (2N.org.jbpm.ma" + "rshalling.ProcessInstance.NodeInstanceCo")))))))) , "ntent.CompositeContextNodeW\n\bfor_each\f" + (" (2E.org.jbpm.marshalling.ProcessInsta" + ("nce.NodeInstanceContent.ForEachNode]\na" + ("sync_event\r (2H.org.jbpm.marshalling." + ("ProcessInstance.NodeInstanceContent.Asyn" + ("cEventNode\u00d4\nRuleSetNode\ntimer_inst" + ("ance_id (d\n\bmapEntry (2R.org.jb" + ("pm.marshalling.ProcessInstance.NodeInsta" + ("nceContent.RuleSetNode.TextMapEntry\nr" + "ule_flow_group (\t+\n\fTextMapEntry\f\n")))))))) , "name (\t\r\nvalue (\t@\n\rHumanTaskNo" + ("de\n\fwork_item_id (\ntimer_instan" + ("ce_id (?\n\fWorkItemNode\n\fwork_item" + ("_id (\ntimer_instance_id (H\n" + ("SubProcessNode\nprocess_instance_id " + ("(\ntimer_instance_id (*\n\rMilest" + ("oneNode\ntimer_instance_id (\n\tEv" + ("entNode\n\tTimerNode\n\btimer_id (\u009c" + ("\n\bJoinNode_\ntrigger (2N.org.jbpm." + "marshalling.ProcessInstance.NodeInstance")))))))) , "Content.JoinNode.JoinTrigger/\nJoinTrig" + ("ger\nnode_id (\ncounter (&\n" + ("\tStateNode\ntimer_instance_id (\u00c4" + ("\nCompositeContextNode\ntimer_instance" + ("_id (0\n\bvariable (2.org.jbpm.m" + ("arshalling.VariableI\n\rnode_instance " + ("(22.org.jbpm.marshalling.ProcessInstanc" + ("e.NodeInstanceU\nexclusive_group (2" + ("<.org.jbpm.marshalling.ProcessInstance.E" + "xclusiveGroupInstance=\niterationLevels")))))))) , " (2$.org.jbpm.marshalling.IterationL" + ("evel\u00c9\nForEachNodeI\n\rnode_instance " + ("(22.org.jbpm.marshalling.ProcessInstan" + ("ce.NodeInstance0\n\bvariable (2.org." + ("jbpm.marshalling.Variable=\niterationLe" + ("vels (2$.org.jbpm.marshalling.Iterat" + ("ionLevel$\nAsyncEventNode\n\nevent_type" + (" (\t\"\u00a8\nNodeInstanceType\n\rRULE_SET_" + ("NODE \nHUMAN_TASK_NODE\nWORK_ITEM" + "_NODE\nSUBPROCESS_NODE\nMILESTON")))))))) , "E_NODE\n\nEVENT_NODE\n\nTIMER_NODE" + ("\r\n\tJOIN_NODE\n\nSTATE_NODE\b\nCOMPO" + ("SITE_CONTEXT_NODE\t\n\rFOR_EACH_NODE\n" + ("\n\fDYNAMIC_NODE\nEVENT_SUBPROCESS_NOD" + ("E\f\nASYNC_EVENT_NODE\r\"?\n\bVariable\f\n" + ("name (\t\nstrategy_index (\r\nv" + ("alue (\f\"\u00c5\n\bWorkItem\n\nid (\np" + ("rocess_instances_id (\f\nname (\t" + ("\r\nstate (0\n\bvariable (2.org.j" + "bpm.marshalling.Variable\n\rdeployment_i")))))))) , "d (\t\nnode_instance_id (\nnod" + ("e_id\b (\"\u00d3\n\fProcessTimer?\ntimer " + ("(20.org.jbpm.marshalling.ProcessTimer.T" + ("imerInstance5\ntrigger (2$.org.droo" + ("ls.core.marshalling.Trigger\u00ca\n\rTimerIns" + ("tance\n\nid (\n\btimer_id (\r\nd" + ("elay (\nperiod (\nprocess_in" + ("stance_id (\nactivated_time (" + ("\nlast_triggered (\nDEPRECATED_se" + "ssionId\b (\n\tsessionId\t (\"+\nIter")))))))) , "ationLevel\n\nid (\t\r\nlevel (\"E\n" + ("VariableContainer0\n\bvariable (2.o" + ("rg.jbpm.marshalling.Variable:i\nprocess_" + ("instance(.org.drools.core.marshalling.P" + ("rocessData\n (2%.org.jbpm.marshalling." + ("ProcessInstance:[\n\twork_item(.org.drool" + ("s.core.marshalling.ProcessData (2.o" + ("rg.jbpm.marshalling.WorkItem::\n\btimer_id" + ("(.org.drools.core.marshalling.ProcessDa" + "ta\r (:c\n\rprocess_timer(.org.drools.c")))))))) , "ore.marshalling.ProcessData\f (2\".org." + ("jbpm.marshalling.ProcessTimer:a\n\nproc_ti" + ("mer).org.drools.core.marshalling.Timers" + (".Timerd (2\".org.jbpm.marshalling.Proc" + ("essTimerB)\norg.jbpm.marshalling.implB\fJ" + "BPMMessages")))) };
        Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new Descriptors.FileDescriptor.InternalDescriptorAssigner() {
            public ExtensionRegistry assignDescriptors(Descriptors.FileDescriptor root) {
                descriptor = root;
                internal_static_org_jbpm_marshalling_ProcessInstance_descriptor = JBPMMessages.getDescriptor().getMessageTypes().get(0);
                internal_static_org_jbpm_marshalling_ProcessInstance_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_descriptor, new String[]{ "ProcessType" , "Id" , "ProcessId" , "State" , "NodeInstanceCounter" , "ProcessXml" , "ParentProcessInstanceId" , "Description" , "SignalCompletion" , "DeploymentId" , "CorrelationKey" , "SwimlaneContext" , "NodeInstance" , "Variable" , "ExclusiveGroup" , "CompletedNodeIds" , "IterationLevels" });
                internal_static_org_jbpm_marshalling_ProcessInstance_SwimlaneContextInstance_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_descriptor.getNestedTypes().get(0);
                internal_static_org_jbpm_marshalling_ProcessInstance_SwimlaneContextInstance_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_SwimlaneContextInstance_descriptor, new String[]{ "Swimlane" , "ActorId" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstance_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_descriptor.getNestedTypes().get(1);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstance_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstance_descriptor, new String[]{ "Id" , "NodeId" , "Content" , "Level" });
                internal_static_org_jbpm_marshalling_ProcessInstance_ExclusiveGroupInstance_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_descriptor.getNestedTypes().get(2);
                internal_static_org_jbpm_marshalling_ProcessInstance_ExclusiveGroupInstance_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_ExclusiveGroupInstance_descriptor, new String[]{ "GroupNodeInstanceId" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_descriptor.getNestedTypes().get(3);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor, new String[]{ "Type" , "RuleSet" , "HumanTask" , "WorkItem" , "SubProcess" , "Milestone" , "Event" , "Timer" , "Join" , "State" , "Composite" , "ForEach" , "AsyncEvent" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor.getNestedTypes().get(0);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_descriptor, new String[]{ "TimerInstanceId" , "MapEntry" , "RuleFlowGroup" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_TextMapEntry_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_descriptor.getNestedTypes().get(0);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_TextMapEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_RuleSetNode_TextMapEntry_descriptor, new String[]{ "Name" , "Value" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_HumanTaskNode_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor.getNestedTypes().get(1);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_HumanTaskNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_HumanTaskNode_descriptor, new String[]{ "WorkItemId" , "TimerInstanceId" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_WorkItemNode_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor.getNestedTypes().get(2);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_WorkItemNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_WorkItemNode_descriptor, new String[]{ "WorkItemId" , "TimerInstanceId" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_SubProcessNode_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor.getNestedTypes().get(3);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_SubProcessNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_SubProcessNode_descriptor, new String[]{ "ProcessInstanceId" , "TimerInstanceId" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_MilestoneNode_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor.getNestedTypes().get(4);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_MilestoneNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_MilestoneNode_descriptor, new String[]{ "TimerInstanceId" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_EventNode_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor.getNestedTypes().get(5);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_EventNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_EventNode_descriptor, new String[]{  });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_TimerNode_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor.getNestedTypes().get(6);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_TimerNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_TimerNode_descriptor, new String[]{ "TimerId" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor.getNestedTypes().get(7);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_descriptor, new String[]{ "Trigger" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_JoinTrigger_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_descriptor.getNestedTypes().get(0);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_JoinTrigger_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_JoinNode_JoinTrigger_descriptor, new String[]{ "NodeId" , "Counter" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_StateNode_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor.getNestedTypes().get(8);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_StateNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_StateNode_descriptor, new String[]{ "TimerInstanceId" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_CompositeContextNode_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor.getNestedTypes().get(9);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_CompositeContextNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_CompositeContextNode_descriptor, new String[]{ "TimerInstanceId" , "Variable" , "NodeInstance" , "ExclusiveGroup" , "IterationLevels" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_ForEachNode_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor.getNestedTypes().get(10);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_ForEachNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_ForEachNode_descriptor, new String[]{ "NodeInstance" , "Variable" , "IterationLevels" });
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_AsyncEventNode_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_descriptor.getNestedTypes().get(11);
                internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_AsyncEventNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessInstance_NodeInstanceContent_AsyncEventNode_descriptor, new String[]{ "EventType" });
                internal_static_org_jbpm_marshalling_Variable_descriptor = JBPMMessages.getDescriptor().getMessageTypes().get(1);
                internal_static_org_jbpm_marshalling_Variable_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_Variable_descriptor, new String[]{ "Name" , "StrategyIndex" , "Value" });
                internal_static_org_jbpm_marshalling_WorkItem_descriptor = JBPMMessages.getDescriptor().getMessageTypes().get(2);
                internal_static_org_jbpm_marshalling_WorkItem_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_WorkItem_descriptor, new String[]{ "Id" , "ProcessInstancesId" , "Name" , "State" , "Variable" , "DeploymentId" , "NodeInstanceId" , "NodeId" });
                internal_static_org_jbpm_marshalling_ProcessTimer_descriptor = JBPMMessages.getDescriptor().getMessageTypes().get(3);
                internal_static_org_jbpm_marshalling_ProcessTimer_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_descriptor, new String[]{ "Timer" , "Trigger" });
                internal_static_org_jbpm_marshalling_ProcessTimer_TimerInstance_descriptor = JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_descriptor.getNestedTypes().get(0);
                internal_static_org_jbpm_marshalling_ProcessTimer_TimerInstance_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_ProcessTimer_TimerInstance_descriptor, new String[]{ "Id" , "TimerId" , "Delay" , "Period" , "ProcessInstanceId" , "ActivatedTime" , "LastTriggered" , "DEPRECATEDSessionId" , "SessionId" });
                internal_static_org_jbpm_marshalling_IterationLevel_descriptor = JBPMMessages.getDescriptor().getMessageTypes().get(4);
                internal_static_org_jbpm_marshalling_IterationLevel_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_IterationLevel_descriptor, new String[]{ "Id" , "Level" });
                internal_static_org_jbpm_marshalling_VariableContainer_descriptor = JBPMMessages.getDescriptor().getMessageTypes().get(5);
                internal_static_org_jbpm_marshalling_VariableContainer_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(JBPMMessages.internal_static_org_jbpm_marshalling_VariableContainer_descriptor, new String[]{ "Variable" });
                JBPMMessages.processInstance.internalInit(JBPMMessages.descriptor.getExtensions().get(0));
                JBPMMessages.workItem.internalInit(JBPMMessages.descriptor.getExtensions().get(1));
                JBPMMessages.timerId.internalInit(JBPMMessages.descriptor.getExtensions().get(2));
                JBPMMessages.processTimer.internalInit(JBPMMessages.descriptor.getExtensions().get(3));
                JBPMMessages.procTimer.internalInit(JBPMMessages.descriptor.getExtensions().get(4));
                return null;
            }
        };
        Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new Descriptors.FileDescriptor[]{ org.drools.core.marshalling.impl.ProtobufMessages.getDescriptor() }, assigner);
    }

    // @@protoc_insertion_point(outer_class_scope)
}

