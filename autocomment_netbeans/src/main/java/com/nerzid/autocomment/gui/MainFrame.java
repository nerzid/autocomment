package com.nerzid.autocomment.gui;

import com.nerzid.autocomment.database.DataTypeModel;
import com.nerzid.autocomment.database.Database;
import com.nerzid.autocomment.database.MethodModel;
import com.nerzid.autocomment.database.ParameterModel;
import com.nerzid.autocomment.exception.FileNotSelected;
import com.nerzid.autocomment.train.Trainer;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import org.javalite.activejdbc.Base;

/*
 * Copyright 2016 nerzid.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * @author nerzid
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MainFrame() {
        initComponents();
        status_Panel.setVisible(false);
        previous_queries = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        startTraining_btn = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        status_Panel = new javax.swing.JPanel();
        status_lbl = new javax.swing.JLabel();
        status_progress_lbl = new javax.swing.JLabel();
        trainingFile_lbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        search_txt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        query_Table = new javax.swing.JTable();
        search_btn = new javax.swing.JButton();
        limit_checkbox = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        createDB_MenuItem = new javax.swing.JMenuItem();
        selectDB_MenuItem = new javax.swing.JMenuItem();
        exit_MenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        help_btn = new javax.swing.JMenu();
        about_btn = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Autocomment Tool");

        startTraining_btn.setText("Start Training");
        startTraining_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTraining_btnActionPerformed(evt);
            }
        });

        jProgressBar1.setStringPainted(true);
        jProgressBar1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jProgressBar1PropertyChange(evt);
            }
        });

        status_lbl.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        status_lbl.setText("Status:");

        status_progress_lbl.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        status_progress_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        status_progress_lbl.setText("0/0");

        trainingFile_lbl.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        trainingFile_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout status_PanelLayout = new javax.swing.GroupLayout(status_Panel);
        status_Panel.setLayout(status_PanelLayout);
        status_PanelLayout.setHorizontalGroup(
            status_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(status_PanelLayout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(status_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status_progress_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addGap(121, 121, 121))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, status_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trainingFile_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        status_PanelLayout.setVerticalGroup(
            status_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(status_PanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(status_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(status_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(status_progress_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(trainingFile_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startTraining_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                    .addComponent(status_Panel, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(status_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addComponent(startTraining_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        jTabbedPane1.addTab("Training", jPanel1);

        search_txt.setEditable(false);
        search_txt.setText("Choose Database from File->Choose Database to continue...");
        search_txt.setToolTipText("Type Search Query");
        search_txt.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        search_txt.setEnabled(false);
        search_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_txtKeyReleased(evt);
            }
        });

        query_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        query_Table.setRowMargin(2);
        jScrollPane1.setViewportView(query_Table);

        search_btn.setText("SEARCH");
        search_btn.setEnabled(false);
        search_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_btnActionPerformed(evt);
            }
        });
        search_btn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_btnKeyReleased(evt);
            }
        });

        limit_checkbox.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        limit_checkbox.setSelected(true);
        limit_checkbox.setText("LIMIT 1000");
        limit_checkbox.setEnabled(false);
        limit_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limit_checkboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(search_btn)
                .addGap(14, 14, 14)
                .addComponent(search_txt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(limit_checkbox))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_btn)
                    .addComponent(limit_checkbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Table Search", jPanel2);

        jMenu1.setText("File");

        createDB_MenuItem.setText("Create Database");
        createDB_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDB_MenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(createDB_MenuItem);

        selectDB_MenuItem.setText("Select Database");
        selectDB_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDB_MenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(selectDB_MenuItem);

        exit_MenuItem.setText("Exit");
        exit_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_MenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exit_MenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");

        jMenuItem1.setText("Font Size");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        help_btn.setText("Help");

        about_btn.setText("About");
        about_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                about_btnActionPerformed(evt);
            }
        });
        help_btn.add(about_btn);

        jMenuBar1.add(help_btn);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startTraining_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTraining_btnActionPerformed
        Runnable r1 = new Runnable() {

            @Override
            public void run() {
                try {
                    Trainer.main(null);
                } catch (FileNotSelected ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        thread2 = new Thread(r1);
        thread2.start();

        showProgress();

        startTraining_btn.setEnabled(false);
        startTraining_btn.setText("Training...");
        status_Panel.setVisible(true);
    }//GEN-LAST:event_startTraining_btnActionPerformed

    private void jProgressBar1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jProgressBar1PropertyChange

    }//GEN-LAST:event_jProgressBar1PropertyChange

    private void selectDB_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDB_MenuItemActionPerformed
        try {
            Database.openIfNot();
        } catch (FileNotSelected ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (Database.isSet) {
            search_btn.setEnabled(true);
            search_txt.setEnabled(true);
            search_txt.setEditable(true);
            search_txt.setText("");
            limit_checkbox.setEnabled(true);
        }
    }//GEN-LAST:event_selectDB_MenuItemActionPerformed

    private void search_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_btnActionPerformed
        updateJTableData();
    }//GEN-LAST:event_search_btnActionPerformed

    private void search_btnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_btnKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            updateJTableData();
        }
    }//GEN-LAST:event_search_btnKeyReleased

    private void search_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_txtKeyReleased
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                updateJTableData();
                break;
            case KeyEvent.VK_UP:
                goToPreviousQuery();
                break;
            case KeyEvent.VK_DOWN:
                goToNextQuery();
                break;
            default:
                break;
        }

    }//GEN-LAST:event_search_txtKeyReleased

    private void createDB_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDB_MenuItemActionPerformed
        try {
            Database.main(null);
        } catch (FileNotSelected ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_createDB_MenuItemActionPerformed

    private void exit_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_MenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exit_MenuItemActionPerformed

    private void about_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_about_btnActionPerformed
        JOptionPane.showMessageDialog(null, "www.github.com/nerzid/autocomment");
    }//GEN-LAST:event_about_btnActionPerformed

    private void limit_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limit_checkboxActionPerformed
        updateJTableData();
    }//GEN-LAST:event_limit_checkboxActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane optionPane = new JOptionPane();
        JSlider slider = new JSlider();
        slider.setMajorTickSpacing(1);
        slider.setMaximum(20);
        slider.setMinimum(10);
        
        slider.setPaintTicks(true);
        slider.setPaintLabels(true);
        slider.setPaintTrack(true);

        ChangeListener changeListener = new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent changeEvent) {
                JSlider theSlider = (JSlider) changeEvent.getSource();
                if (!theSlider.getValueIsAdjusting()) {
                    optionPane.setInputValue(theSlider.getValue());
                    Font f = query_Table.getFont();
                    String font_name = f.getFontName();
                    query_Table.setFont(new Font(font_name, Font.PLAIN, theSlider.getValue()));
                    query_Table.setRowHeight(theSlider.getValue() + 10);
                }
            }
        };
        slider.addChangeListener(changeListener);

        optionPane.setMessage(new Object[]{"Select a value: ", slider});
        optionPane.setMessageType(JOptionPane.QUESTION_MESSAGE);
        optionPane.setOptionType(JOptionPane.OK_CANCEL_OPTION);
        JDialog dialog = optionPane.createDialog("My Slider");
        dialog.setVisible(true);
        System.out.println("Input: " + optionPane.getInputValue());
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            if (System.getProperty("os.name").contains("Windows")) {
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            } else if (System.getProperty("os.name").contains("Linux")) {
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {

        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    public void updateJTableData() {
        try {
            Database.openIfNot();
            String search_text = search_txt.getText().replaceAll(";", "");

            updatePreviosQueryList(search_text);

            // Allow only SELECT Queries
            if (!search_text.split(" ")[0].toLowerCase().equals("select")) {
                JOptionPane.showMessageDialog(null, "Only SELECT Queries are allowed!");
                return;
            }

            if (limit_checkbox.isSelected()) {
                search_text += " LIMIT 1000";
            }

            List<Map> results = null;
            try {
                results = Base.findAll(search_text);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
                return;
            }

            String db_table_name_tmp = (search_text.toLowerCase().split("from"))[1];
            String db_table_name = "";
            boolean isFindFirstChar = false;
            for (Character c : db_table_name_tmp.toCharArray()) {
                if (!c.equals(' ')) {
                    isFindFirstChar = true;
                }
                if (!isFindFirstChar) {
                    continue;
                } else {
                    db_table_name += c;
                }
            }

            String[] cols = search_text
                    .toLowerCase()
                    .replaceFirst("select", "")
                    .split("from")[0]
                    .trim()
                    .split(",");

            db_table_name = db_table_name.split(" ")[0];
            DefaultTableModel dtm;
            int col_count = 0;
            if (db_table_name.equals(MethodModel.TABLE_NAME.toLowerCase())) {
                if (cols[0].equals("*")) {
                    col_count = MethodModel.COUNT_OF_COLUMNS;
                    Object[][] data = new Object[results.size()][col_count];
                    Object[] column_arr = {MethodModel.COLUMN_MID,
                        MethodModel.COLUMN_SIGNATURE,
                        MethodModel.COLUMN_IDENTIFIER,
                        MethodModel.COLUMN_SPLITTED_IDENTIFIER,
                        MethodModel.COLUMN_LEMMA,
                        MethodModel.COLUMN_POSTAG,
                        MethodModel.COLUMN_FK_DTID};
                    for (int i = 0; i < results.size(); i++) {
                        Map entry = results.get(i);
                        data[i][0] = entry.get(column_arr[0]);
                        data[i][1] = entry.get(column_arr[1]);
                        data[i][2] = entry.get(column_arr[2]);
                        data[i][3] = entry.get(column_arr[3]);
                        data[i][4] = entry.get(column_arr[4]);
                        data[i][5] = entry.get(column_arr[5]);
                        data[i][6] = entry.get(column_arr[6]);
                    }
                    dtm = new DefaultTableModel(data, column_arr);
                } else {
                    col_count = cols.length;
                    Object[][] data = new Object[results.size()][col_count];
                    Object[] column_arr = cols;
                    for (int i = 0; i < results.size(); i++) {
                        Map entry = results.get(i);
                        for (int j = 0; j < column_arr.length; j++) {
                            data[i][j] = entry.get(column_arr[j].toString().trim());
                        }
                    }
                    dtm = new DefaultTableModel(data, column_arr);
                }

                query_Table.setModel(dtm);
            } else if (db_table_name.equals(DataTypeModel.TABLE_NAME.toLowerCase())) {
                if (cols[0].equals("*")) {
                    col_count = DataTypeModel.COUNT_OF_COLUMNS;
                    Object[][] data = new Object[results.size()][col_count];
                    Object[] column_arr = {DataTypeModel.COLUMN_DTID,
                        DataTypeModel.COLUMN_IDENTIFIER,
                        DataTypeModel.COLUMN_SIMPLIFIED_IDENTIFIER,
                        DataTypeModel.COLUMN_LEMMA,
                        DataTypeModel.COLUMN_POSTAG};
                    for (int i = 0; i < results.size(); i++) {
                        Map entry = results.get(i);
                        data[i][0] = entry.get(column_arr[0]);
                        data[i][1] = entry.get(column_arr[1]);
                        data[i][2] = entry.get(column_arr[2]);
                        data[i][3] = entry.get(column_arr[3]);
                        data[i][4] = entry.get(column_arr[4]);
                    }
                    dtm = new DefaultTableModel(data, column_arr);
                } else {
                    col_count = cols.length;
                    Object[][] data = new Object[results.size()][col_count];
                    Object[] column_arr = cols;
                    for (int i = 0; i < results.size(); i++) {
                        Map entry = results.get(i);
                        for (int j = 0; j < column_arr.length; j++) {
                            data[i][j] = entry.get(column_arr[j].toString().trim());
                        }
                    }
                    dtm = new DefaultTableModel(data, column_arr);
                }
                query_Table.setModel(dtm);
            } else if (db_table_name.equals(ParameterModel.TABLE_NAME.toLowerCase())) {
                if (cols[0].equals("*")) {
                    col_count = ParameterModel.COUNT_OF_COLUMNS;
                    Object[][] data = new Object[results.size()][col_count];
                    Object[] column_arr = {ParameterModel.COLUMN_PID,
                        ParameterModel.COLUMN_IDENTIFIER,
                        ParameterModel.COLUMN_SPLITTED_IDENTIFIER,
                        ParameterModel.COLUMN_LEMMA,
                        ParameterModel.COLUMN_POSTAG,
                        ParameterModel.COLUMN_FK_DTID,
                        ParameterModel.COLUMN_FK_MID};
                    for (int i = 0; i < results.size(); i++) {
                        Map entry = results.get(i);
                        data[i][0] = entry.get(column_arr[0]);
                        data[i][1] = entry.get(column_arr[1]);
                        data[i][2] = entry.get(column_arr[2]);
                        data[i][3] = entry.get(column_arr[3]);
                        data[i][4] = entry.get(column_arr[4]);
                        data[i][5] = entry.get(column_arr[5]);
                        data[i][6] = entry.get(column_arr[6]);
                    }

                    dtm = new DefaultTableModel(data, column_arr);
                } else {
                    col_count = cols.length;
                    Object[][] data = new Object[results.size()][col_count];
                    Object[] column_arr = cols;
                    for (int i = 0; i < results.size(); i++) {
                        Map entry = results.get(i);
                        for (int j = 0; j < column_arr.length; j++) {
                            data[i][j] = entry.get(column_arr[j].toString().trim());
                        }
                    }
                    dtm = new DefaultTableModel(data, column_arr);
                }
                query_Table.setModel(dtm);
            } else {
                System.out.println("Table name '" + db_table_name + "' not found in database");
            }
        } catch (FileNotSelected ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void showProgress() {
        Runnable r = new Runnable() {
            @Override
            public void run() {
                try {
                    latch.await();
                    int value = 0;
                    while (value < 100) {
                        value = (int) ((Trainer.currentFileNo * 1.0) / Trainer.files_list.size() * 100);
                        status_progress_lbl.setText(Trainer.currentFileNo + "/" + Trainer.files_list.size());
                        jProgressBar1.setValue(value);
                        trainingFile_lbl.setText(Trainer.current_training_file_name);
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        thread = new Thread(r);
        thread.start();
    }

    public void goToPreviousQuery() {
        if (previous_query_index - 1 >= 0) {
            previous_query_index--;
            search_txt.setText(previous_queries.get(previous_query_index));
        }
    }

    public void goToNextQuery() {
        if (previous_query_index + 1 < previous_queries.size()) {
            previous_query_index++;
            search_txt.setText(previous_queries.get(previous_query_index));
        }
    }

    public void updatePreviosQueryList(String q) {
        previous_queries.add(q);
        previous_query_index = previous_queries.size() - 1;
    }

    public static CountDownLatch latch = new CountDownLatch(1);
    public static List<String> previous_queries;
    public static int previous_query_index = 0;
    private Thread thread;
    private Thread thread2;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about_btn;
    private javax.swing.JMenuItem createDB_MenuItem;
    private javax.swing.JMenuItem exit_MenuItem;
    private javax.swing.JMenu help_btn;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox limit_checkbox;
    private javax.swing.JTable query_Table;
    private javax.swing.JButton search_btn;
    private javax.swing.JTextField search_txt;
    private javax.swing.JMenuItem selectDB_MenuItem;
    private javax.swing.JButton startTraining_btn;
    private javax.swing.JPanel status_Panel;
    private javax.swing.JLabel status_lbl;
    private javax.swing.JLabel status_progress_lbl;
    private javax.swing.JLabel trainingFile_lbl;
    // End of variables declaration//GEN-END:variables

}
